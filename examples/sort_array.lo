main |arr: [val; 99], vec: [val; 3]| {
    arr = [0, 10, "a", "-5", 283, 2, 6, 4, "what", "-1", 20, 7, 8, 2, 0...];
    Vec_new(&vec, &arr, 99, 14);

    out("Unsorted:");
    Vec_print(&vec);

    out("Sorted:");
    Vec_sort(&vec);
    Vec_print(&vec);

    out("Pushing `12.5` then sorting again:");
    Vec_push(&vec, "12.5");
    Vec_sort(&vec);
    Vec_print(&vec);
}

func Vec_new(ret_r: &[val; 3], arr_r: &[val; 99], cap: val, len: val) || {
    *ret_r = [arr_r, cap, len];
}

func Vec_entry(ret_r: &&val, self_r: &[val; 3], i: val) || {
    *ret_r = &((*(*self_r)[0])[i]);
}

func Vec_cap(ret_r: &val, self_r: &[val; 3]) || {
    *ret_r = (*self_r)[1];
}

func Vec_len_r(ret_r: &&val, self_r: &[val; 3]) || {
    *ret_r = &((*self_r)[2]);
}

func Vec_len(ret_r: &val, self_r: &[val; 3]) |len_r: &val| {
    Vec_len_r(&len_r, self_r);
    *ret_r = *len_r;
}

func Vec_push(self_r: &[val; 3], val: val) |cap: val, len: val, entry_r: &val, len_r: &val| {
    Vec_cap(&cap, self_r);
    Vec_len(&len, self_r);
    if (len < cap) {
        Vec_entry(&entry_r, self_r, len);
        *entry_r = val;
        Vec_len_r(&len_r, self_r);
        *len_r = (len + 1);
    }
}

func Vec_print(self_r: &[val; 3]) |i: val, len: val, val_r: &val, str: val| {
    i = 0;
    str = "Vec (";
    Vec_len(&len, self_r);
    str = (str ~ len);
    str = (str ~ ") ");

    while (i < len) {
        if (i != 0) {
            str = (str ~ ", ");
        }

        Vec_entry(&val_r, self_r, i);
        str = (str ~ *val_r);
        i = (i + 1);
    }

    out(str);
}

func Vec_sort(self_r: &[val; 3]) |i: val, j: val, len: val, a_r: &val, b_r: &val, a: val, b: val| {
    i = 0;
    Vec_len(&len, self_r);

    while (i < len) {
        j = i;
        while (j < len) {
            Vec_entry(&a_r, self_r, i);
            Vec_entry(&b_r, self_r, j);
            a = *a_r;
            b = *b_r;

            if (b < a) {
                swap(a_r, b_r);
            }

            j = (j + 1);
        }

        i = (i + 1);
    }
}

func swap(a_r: &val, b_r: &val) |temp: val| {
    temp = *a_r;
    *a_r = *b_r;
    *b_r = temp;
}
