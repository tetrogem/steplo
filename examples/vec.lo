type Vec = {
    arr: &any,
    cap: uint,
    len: uint,
};

main |arr: [any; 10], vec: Vec, str: val, temp: val| {
    Vec_new(&vec, <<&any>>&arr, 10);
    Vec_to_str(&str, &vec);
    out(str);

    Vec_push(&vec, 10);
    Vec_push(&vec, 2);
    Vec_push(&vec, 6);
    Vec_to_str(&str, &vec);
    out(str);

    Vec_pop(<<&any>>&temp, &vec);
    out(("Popped: " ~ temp));
    Vec_to_str(&str, &vec);
    out(str);

    Vec_insert(&vec, 99, 1);
    Vec_to_str(&str, &vec);
    out(str);

    Vec_remove(<<&any>>&temp, &vec, 0);
    out(("Removed: " ~ temp));
    Vec_to_str(&str, &vec);
    out(str);

    Vec_insert(&vec, 123, 0);
    Vec_to_str(&str, &vec);
    out(str);

    Vec_insert(&vec, 456, 0);
    Vec_to_str(&str, &vec);
    out(str);

    Vec_insert(&vec, -1, 2);
    Vec_to_str(&str, &vec);
    out(str);

    Vec_clear(&vec);
    Vec_to_str(&str, &vec);
    out(str);

    Vec_insert(&vec, 1, 0);
    Vec_to_str(&str, &vec);
    out(str);
}

func Vec_new(ret: &Vec, arr: &any, cap: uint) || {
    *ret = { arr: arr, cap: cap, len: 0 };
}

func Vec_get_mut(ret: &&any, self: &Vec, i: uint) |arr: &any| {
    *ret = <<&any>>(<uint>(*self).arr + i);
}

func Vec_get(ret: &any, self: &Vec, i: uint) |entry: &any| {
    Vec_get_mut(&entry, self, i);
    *ret = *entry;
}

func Vec_push(self: &Vec, val: any) |entry: &any| {
    Vec_get_mut(&entry, self, (*self).len);
    *entry = val;
    (*self).len = ((*self).len + 1);
}

func Vec_pop(ret: &any, self: &Vec) |val: any| {
    Vec_get(&val, self, <uint>((*self).len - 1));
    *ret = val;
    (*self).len = <uint>((*self).len - 1);
}

func Vec_insert(self: &Vec, val: any, index: uint)
    |i: uint, len: uint, entry: &any, next_entry: &any|
{
    i = (*self).len;
    Vec_push(self, 0);

    while (i >= index) {
        Vec_get_mut(&entry, self, i);
        Vec_get_mut(&next_entry, self, (i + 1));
        *next_entry = *entry;

        i = <uint>(i - 1);
    };

    Vec_get_mut(&entry, self, index);
    *entry = val;
}

func Vec_remove(ret: &any, self: &Vec, index: uint)
    |i: uint, entry: &any, next_entry: &any, len: &uint|
{
    Vec_get(ret, self, index);
    i = index;
    (*self).len = <uint>((*self).len - 1);

    while (i < (*self).len) {
        Vec_get_mut(&entry, self, i);
        Vec_get_mut(&next_entry, self, (i + 1));
        *entry = *next_entry;

        i = (i + 1);
    };
}

func Vec_clear(self: &Vec) || {
    (*self).len = 0;
}

func Vec_to_str(ret: &val, self: &Vec) |str: val, i: uint, val: val| {
    str = "[";
    i = 0;

    while (i < (*self).len) {
        Vec_get(<<&any>>&val, self, i);
        str = (str ~ val);
        if (i != ((*self).len - 1)) {
            str = (str ~ ", ");
        };

        i = (i + 1);
    };

    str = (str ~ "]");
    *ret = str;
}
