// https://leetcode.com/problems/merge-sorted-array

main |arr1[13], vec1[2], arr2[6], vec2[2], temp| {
    arr1 = ["-3","-2",0,0,0,6,7,0,0,0,0,0,0];
    arr2 = ["-1",1,1,1,2,3];

    Vector_new(&vec1, &arr1, 13);
    Vector_new(&vec2, &arr2, 6);
    Vector_to_string(&temp, &vec1);
    out(temp);
    Vector_to_string(&temp, &vec2);
    out(temp);

    merge_sorted_vecs(&vec1, 7, &vec2, 6);
    Vector_to_string(&temp, &vec1);
    out(("Merged: " ~ temp));
}

func Vector_new(ret_r, vals_r, len) || {
    *ret_r = [vals_r, len];
}

func Vector_vals_r(ret_r, self_r) || {
    *ret_r = (*self_r)[0];
}

func Vector_len(ret_r, self_r) || {
    *ret_r = (*self_r)[1];
}

func Vector_to_string(ret_r, self_r) |str, i, vals_r, len, val| {
    Vector_vals_r(&vals_r, self_r);
    Vector_len(&len, self_r);

    str = "[";
    i = 0;
    while (i < len) {
        val = (*vals_r)[i];
        str = (str ~ val);

        if ((i + 1) < len) {
            str = (str ~ ", ");
        };

        i = (i + 1);
    };

    str = (str ~ "]");
    *ret_r = str;
}

func merge_sorted_vecs(vec1_r, m, vec2_r, n) |i, nums1_vals_r, nums2_vals_r, num1, num2| {
    Vector_vals_r(&nums1_vals_r, vec1_r);
    Vector_vals_r(&nums2_vals_r, vec2_r);

    i = ((m + n) - 1);
    while (i >= 0) {
        num1 = (*nums1_vals_r)[(m - 1)];
        num2 = (*nums2_vals_r)[(n - 1)];

        if ((n <= 0) || (num1 >= num2)) {
            (*nums1_vals_r)[i] = num1;
            m = (m - 1);
        } else {
            (*nums1_vals_r)[i] = num2;
            n = (n - 1);
        };

        i = (i - 1);
    };
}
