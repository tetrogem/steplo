main {
    proc #80 {
        $sp = "-1";
        %5b = #d3;
        jump %5b;
    }
}

func main {
    proc #d3 {
        %d1 = "2";
        $sp = ($sp + %d1);
        %67 = "20";
        %95 = "0";
        %ba = ($sp - %95);
        %a4 = "0";
        %74 = (%ba + %a4);
        stack[%74] = %67;
        %da = "0";
        %81 = ($sp - %da);
        %c3 = "2";
        %63 = ($sp + %c3);
        stack[%63] = %81;
        %a7 = "1";
        %a4e = ($sp + %a7);
        %81d = #5f;
        stack[%a4e] = %81d;
        %fd = #1a;
        jump %fd;
    }

    proc #5f {
        exit;
    }
}

func func.iterate {
    proc #1a {
        %9d = "3";
        $sp = ($sp + %9d);
        %5d = "1";
        %cf = ($sp - %5d);
        %b4 = stack[%cf];
        %77 = stack[%b4];
        %d4 = "0";
        %1e = ($sp - %d4);
        %db = "0";
        %68 = (%1e + %db);
        stack[%68] = %77;
        %47 = "0";
        %cd = "0";
        %fdf = ($sp - %cd);
        %0e = stack[%fdf];
        %35 = (%47 != %0e);
        %f2 = #3b;
        if %35 jump %f2;
        %31 = #37;
        jump %31;
    }

    proc #37 {
        %0f = "3";
        $sp = ($sp - %0f);
        %7f = "1";
        %22 = ($sp + %7f);
        %b0 = stack[%22];
        jump %b0;
    }

    proc #3b {
        %94 = "0";
        %38 = ($sp - %94);
        %28 = stack[%38];
        %ca = "1";
        %f1 = (%28 - %ca);
        %a6 = "1";
        %73 = ($sp - %a6);
        %83 = "0";
        %b6 = (%73 + %83);
        %2d = stack[%b6];
        stack[%2d] = %f1;
        %b7 = "1";
        %ef = ($sp + %b7);
        %c6 = #b79;
        stack[%ef] = %c6;
        %9a = #a4d;
        jump %9a;
    }

    proc #b79 {
        %bb = "1";
        %9b = ($sp - %bb);
        %f0 = stack[%9b];
        %00 = "2";
        %ba8 = ($sp + %00);
        stack[%ba8] = %f0;
        %14 = "1";
        %4e = ($sp + %14);
        %352 = #0b;
        stack[%4e] = %352;
        %c32 = #1a;
        jump %c32;
    }

    proc #0b {
        %e3 = #37;
        jump %e3;
    }
}

func func.greet {
    proc #a4d {
        %58 = "1";
        $sp = ($sp + %58);
        %7c = "Hello!";
        %19 = "2";
        %03 = ($sp + %19);
        stack[%03] = %7c;
        %2b = "1";
        %32 = ($sp + %2b);
        %d18 = #e8;
        stack[%32] = %d18;
        %6f = #9e;
        jump %6f;
    }

    proc #e8 {
        %3c = "1";
        $sp = ($sp - %3c);
        %66 = "1";
        %7d = ($sp + %66);
        %4a = stack[%7d];
        jump %4a;
    }
}

func func.out {
    proc #9e {
        %fa = "2";
        $sp = ($sp + %fa);
        %689 = "0";
        %f19 = ($sp - %689);
        %b1 = stack[%f19];
        out %b1;
        %c1 = "2";
        $sp = ($sp - %c1);
        %f9 = "1";
        %eb = ($sp + %f9);
        %64 = stack[%eb];
        jump %64;
    }
}

func func.in {
    proc #76 {
        %1c = "3";
        $sp = ($sp + %1c);
        %2d1 = "0";
        %41 = ($sp - %2d1);
        in;
        stack[%41] = $answer;
        %5a = "0";
        %5a9 = ($sp - %5a);
        %383 = stack[%5a9];
        %d9 = "1";
        %85 = ($sp - %d9);
        %631 = "0";
        %7e = (%85 + %631);
        %c0 = stack[%7e];
        stack[%c0] = %383;
        %82 = "3";
        $sp = ($sp - %82);
        %3f = "1";
        %18 = ($sp + %3f);
        %24 = stack[%18];
        jump %24;
    }
}