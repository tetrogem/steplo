main {
    proc #a2 {
        $sp = "-1";
        %41 = #75;
        jump %41;
    }
}

func main {
    proc #75 {
        %0b = "25";
        $sp = ($sp + %0b);
        %b3 = "-3";
        %43 = "23";
        %78 = ($sp - %43);
        %d2 = "0";
        %29 = (%78 + %d2);
        stack[%29] = %b3;
        %05 = "-2";
        %16 = "23";
        %412 = ($sp - %16);
        %64 = "1";
        %eb = (%412 + %64);
        stack[%eb] = %05;
        %23 = "0";
        %4f = "23";
        %33 = ($sp - %4f);
        %c2 = "2";
        %87 = (%33 + %c2);
        stack[%87] = %23;
        %3e = "0";
        %ca = "23";
        %50 = ($sp - %ca);
        %f1 = "3";
        %8e = (%50 + %f1);
        stack[%8e] = %3e;
        %2b = "0";
        %89 = "23";
        %69 = ($sp - %89);
        %d4 = "4";
        %ec = (%69 + %d4);
        stack[%ec] = %2b;
        %97 = "6";
        %db = "23";
        %71 = ($sp - %db);
        %85 = "5";
        %dd = (%71 + %85);
        stack[%dd] = %97;
        %44 = "7";
        %c0 = "23";
        %2be = ($sp - %c0);
        %8b = "6";
        %f7 = (%2be + %8b);
        stack[%f7] = %44;
        %37 = "0";
        %44e = "23";
        %65 = ($sp - %44e);
        %8a = "7";
        %0f = (%65 + %8a);
        stack[%0f] = %37;
        %01 = "0";
        %5f = "23";
        %b9 = ($sp - %5f);
        %99 = "8";
        %751 = (%b9 + %99);
        stack[%751] = %01;
        %86 = "0";
        %2c = "23";
        %5d = ($sp - %2c);
        %b5 = "9";
        %57 = (%5d + %b5);
        stack[%57] = %86;
        %af = "0";
        %f9 = "23";
        %ae = ($sp - %f9);
        %74 = "10";
        %7c = (%ae + %74);
        stack[%7c] = %af;
        %92 = "0";
        %5b = "23";
        %46 = ($sp - %5b);
        %1a = "11";
        %749 = (%46 + %1a);
        stack[%749] = %92;
        %3f = "0";
        %1f = "23";
        %03 = ($sp - %1f);
        %45 = "12";
        %53 = (%03 + %45);
        stack[%53] = %3f;
        %6a = "-1";
        %d6 = "8";
        %09 = ($sp - %d6);
        %ec6 = "0";
        %87c = (%09 + %ec6);
        stack[%87c] = %6a;
        %81 = "1";
        %a0 = "8";
        %0e = ($sp - %a0);
        %f0 = "1";
        %55 = (%0e + %f0);
        stack[%55] = %81;
        %456 = "1";
        %93 = "8";
        %e6 = ($sp - %93);
        %73 = "2";
        %bc = (%e6 + %73);
        stack[%bc] = %456;
        %b93 = "1";
        %a3 = "8";
        %c1 = ($sp - %a3);
        %63 = "3";
        %4e = (%c1 + %63);
        stack[%4e] = %b93;
        %f7c = "2";
        %11 = "8";
        %4d = ($sp - %11);
        %ec2 = "4";
        %5e = (%4d + %ec2);
        stack[%5e] = %f7c;
        %bd = "3";
        %756 = "8";
        %a31 = ($sp - %756);
        %98 = "5";
        %417 = (%a31 + %98);
        stack[%417] = %bd;
        %58 = "10";
        %01c = ($sp - %58);
        %4a = "2";
        %13 = ($sp + %4a);
        stack[%13] = %01c;
        %27 = "23";
        %99f = ($sp - %27);
        %9b = "3";
        %c8 = ($sp + %9b);
        stack[%c8] = %99f;
        %a00 = "13";
        %a9 = "4";
        %ae6 = ($sp + %a9);
        stack[%ae6] = %a00;
        %fc = "1";
        %fb = ($sp + %fc);
        %ca0 = #ebd;
        stack[%fb] = %ca0;
        %a22 = #7f;
        jump %a22;
    }

    proc #ebd {
        %54 = "2";
        %06 = ($sp - %54);
        %80 = "2";
        %e3 = ($sp + %80);
        stack[%e3] = %06;
        %f4 = "8";
        %0e1 = ($sp - %f4);
        %45f = "3";
        %23d = ($sp + %45f);
        stack[%23d] = %0e1;
        %28 = "6";
        %10 = "4";
        %0bc = ($sp + %10);
        stack[%0bc] = %28;
        %5a = "1";
        %dd5 = ($sp + %5a);
        %36 = #cf;
        stack[%dd5] = %36;
        %293 = #7f;
        jump %293;
    }

    proc #cf {
        %ecf = "0";
        %b0 = ($sp - %ecf);
        %80a = "2";
        %1b = ($sp + %80a);
        stack[%1b] = %b0;
        %31 = "10";
        %6ab = ($sp - %31);
        %ff = "3";
        %4fc = ($sp + %ff);
        stack[%4fc] = %6ab;
        %5a2 = "1";
        %b1 = ($sp + %5a2);
        %a4 = #4b;
        stack[%b1] = %a4;
        %35 = #5f1;
        jump %35;
    }

    proc #4b {
        %a8 = "0";
        %83 = ($sp - %a8);
        %0ba = stack[%83];
        %5c = "2";
        %b7 = ($sp + %5c);
        stack[%b7] = %0ba;
        %52 = "1";
        %c1c = ($sp + %52);
        %ee = #e5;
        stack[%c1c] = %ee;
        %f3 = #058;
        jump %f3;
    }

    proc #e5 {
        %6b = "0";
        %70 = ($sp - %6b);
        %c2c = "2";
        %b74 = ($sp + %c2c);
        stack[%b74] = %70;
        %72 = "2";
        %60 = ($sp - %72);
        %4c = "3";
        %693 = ($sp + %4c);
        stack[%693] = %60;
        %e4 = "1";
        %d65 = ($sp + %e4);
        %ef = #3f7;
        stack[%d65] = %ef;
        %c6 = #5f1;
        jump %c6;
    }

    proc #3f7 {
        %fc5 = "0";
        %694 = ($sp - %fc5);
        %f2 = stack[%694];
        %f75 = "2";
        %44c = ($sp + %f75);
        stack[%44c] = %f2;
        %782 = "1";
        %f78 = ($sp + %782);
        %17 = #e1;
        stack[%f78] = %17;
        %b8 = #058;
        jump %b8;
    }

    proc #e1 {
        %efc = "10";
        %92a = ($sp - %efc);
        %b72 = "2";
        %3d = ($sp + %b72);
        stack[%3d] = %92a;
        %bd5 = "7";
        %7f9 = "3";
        %cc = ($sp + %7f9);
        stack[%cc] = %bd5;
        %5d7 = "2";
        %40 = ($sp - %5d7);
        %83c = "4";
        %5eb = ($sp + %83c);
        stack[%5eb] = %40;
        %34 = "6";
        %ddc = "5";
        %68 = ($sp + %ddc);
        stack[%68] = %34;
        %f9e = "1";
        %872 = ($sp + %f9e);
        %da = #f8;
        stack[%872] = %da;
        %a93 = #df;
        jump %a93;
    }

    proc #f8 {
        %8f = "0";
        %f18 = ($sp - %8f);
        %b9b = "2";
        %359 = ($sp + %b9b);
        stack[%359] = %f18;
        %453 = "10";
        %8f9 = ($sp - %453);
        %63e = "3";
        %07 = ($sp + %63e);
        stack[%07] = %8f9;
        %5be = "1";
        %e69 = ($sp + %5be);
        %43c = #b96;
        stack[%e69] = %43c;
        %6f = #5f1;
        jump %6f;
    }

    proc #b96 {
        %283 = "Merged: ";
        %739 = "0";
        %d3 = ($sp - %739);
        %88 = stack[%d3];
        %41a = (%283 ~ %88);
        %fff = "2";
        %d0 = ($sp + %fff);
        stack[%d0] = %41a;
        %2bed = "1";
        %79 = ($sp + %2bed);
        %95 = #9c;
        stack[%79] = %95;
        %d4f = #058;
        jump %d4f;
    }

    proc #9c {
        exit;
    }
}

func func.Vector_new {
    proc #7f {
        %94 = "4";
        $sp = ($sp + %94);
        %6c = "1";
        %6c1 = ($sp - %6c);
        %949 = stack[%6c1];
        %88f = "2";
        %aa = ($sp - %88f);
        %f5 = stack[%aa];
        %6e = "0";
        %0a = (%f5 + %6e);
        stack[%0a] = %949;
        %e32 = "0";
        %4a5 = ($sp - %e32);
        %cf6 = stack[%4a5];
        %585 = "2";
        %1c = ($sp - %585);
        %18 = stack[%1c];
        %aaa = "1";
        %c85 = (%18 + %aaa);
        stack[%c85] = %cf6;
        %e57 = "4";
        $sp = ($sp - %e57);
        %337 = "1";
        %20 = ($sp + %337);
        %14 = stack[%20];
        jump %14;
    }
}

func func.Vector_vals_ref {
    proc #d0d {
        %cb = "3";
        $sp = ($sp + %cb);
        %ccd = "0";
        %bde = "0";
        %8a6 = ($sp - %bde);
        %4560 = stack[%8a6];
        %8ac = (%4560 + %ccd);
        %c68 = stack[%8ac];
        %bc8 = "1";
        %505 = ($sp - %bc8);
        %b5f = stack[%505];
        %20e = "0";
        %f43 = (%b5f + %20e);
        stack[%f43] = %c68;
        %25 = "3";
        $sp = ($sp - %25);
        %4b9 = "1";
        %2839 = ($sp + %4b9);
        %8ac9 = stack[%2839];
        jump %8ac9;
    }
}

func func.Vector_len {
    proc #4cd {
        %692 = "3";
        $sp = ($sp + %692);
        %d05 = "1";
        %b05 = "0";
        %a5 = ($sp - %b05);
        %330 = stack[%a5];
        %5e7 = (%330 + %d05);
        %bcf = stack[%5e7];
        %26 = "1";
        %9a = ($sp - %26);
        %97f = stack[%9a];
        %cf1 = "0";
        %532 = (%97f + %cf1);
        stack[%532] = %bcf;
        %9c8 = "3";
        $sp = ($sp - %9c8);
        %dc = "1";
        %1c3 = ($sp + %dc);
        %ed = stack[%1c3];
        jump %ed;
    }
}

func func.Vector_to_string {
    proc #5f1 {
        %32 = "8";
        $sp = ($sp + %32);
        %1ca = "2";
        %010 = ($sp - %1ca);
        %d0c = "2";
        %67 = ($sp + %d0c);
        stack[%67] = %010;
        %06d = "5";
        %f81 = ($sp - %06d);
        %ab = stack[%f81];
        %7e = "3";
        %881 = ($sp + %7e);
        stack[%881] = %ab;
        %942 = "1";
        %2d = ($sp + %942);
        %4dd = #d28;
        stack[%2d] = %4dd;
        %7e8 = #d0d;
        jump %7e8;
    }

    proc #d28 {
        %f0b = "1";
        %116 = ($sp - %f0b);
        %de = "2";
        %dd9 = ($sp + %de);
        stack[%dd9] = %116;
        %84 = "5";
        %c0a = ($sp - %84);
        %10e = stack[%c0a];
        %408 = "3";
        %62 = ($sp + %408);
        stack[%62] = %10e;
        %39 = "1";
        %3c = ($sp + %39);
        %0d = #6c3;
        stack[%3c] = %0d;
        %47 = #4cd;
        jump %47;
    }

    proc #6c3 {
        %81d = "[";
        %abb = "4";
        %2f = ($sp - %abb);
        %1c7 = "0";
        %a8d = (%2f + %1c7);
        stack[%a8d] = %81d;
        %c4 = "0";
        %cf7 = "3";
        %7f4 = ($sp - %cf7);
        %8ae = "0";
        %b0d = (%7f4 + %8ae);
        stack[%b0d] = %c4;
        %e54 = #d8;
        jump %e54;
    }

    proc #608 {
        %91 = "4";
        %49 = ($sp - %91);
        %f52 = stack[%49];
        %7fc = "]";
        %92c = (%f52 ~ %7fc);
        %7f5 = "4";
        %1e = ($sp - %7f5);
        %a35 = "0";
        %809 = (%1e + %a35);
        stack[%809] = %92c;
        %c05 = "4";
        %093 = ($sp - %c05);
        %807 = stack[%093];
        %3d2 = "6";
        %f82 = ($sp - %3d2);
        %9ba = stack[%f82];
        %b50 = "0";
        %43b = (%9ba + %b50);
        stack[%43b] = %807;
        %d34 = "8";
        $sp = ($sp - %d34);
        %0fa = "1";
        %d5 = ($sp + %0fa);
        %ec69 = stack[%d5];
        jump %ec69;
    }

    proc #1e1 {
        %119 = "2";
        %6bd = ($sp - %119);
        %b15 = stack[%6bd];
        %c28 = "3";
        %f06 = ($sp - %c28);
        %ebd6 = stack[%f06];
        %b6 = (%b15 + %ebd6);
        %51 = stack[%b6];
        %4e6 = "0";
        %8f5 = ($sp - %4e6);
        %7f3 = "0";
        %99f1 = (%8f5 + %7f3);
        stack[%99f1] = %51;
        %348 = "4";
        %60c = ($sp - %348);
        %f17 = stack[%60c];
        %df4 = "0";
        %2b1 = ($sp - %df4);
        %3b = stack[%2b1];
        %a45 = (%f17 ~ %3b);
        %fe = "4";
        %448 = ($sp - %fe);
        %ce = "0";
        %147 = (%448 + %ce);
        stack[%147] = %a45;
        %e62 = "3";
        %a4a = ($sp - %e62);
        %cc1 = stack[%a4a];
        %3d5 = "1";
        %ab9 = (%cc1 + %3d5);
        %474 = "1";
        %749a = ($sp - %474);
        %2c4 = stack[%749a];
        %42 = (%ab9 < %2c4);
        %270 = #076;
        %0ae = #afd;
        if %42 then jump %270 else jump %0ae;
    }

    proc #afd {
        %ba = "3";
        %37e = ($sp - %ba);
        %511 = stack[%37e];
        %6932 = "1";
        %37d = (%511 + %6932);
        %d2c = "3";
        %e0 = ($sp - %d2c);
        %e34 = "0";
        %6e0 = (%e0 + %e34);
        stack[%6e0] = %37d;
        %734 = #d8;
        jump %734;
    }

    proc #076 {
        %d1 = "4";
        %912 = ($sp - %d1);
        %dc0 = stack[%912];
        %2fd = ", ";
        %e5e = (%dc0 ~ %2fd);
        %c23 = "4";
        %15 = ($sp - %c23);
        %1b6 = "0";
        %4fce = (%15 + %1b6);
        stack[%4fce] = %e5e;
        %c3 = #afd;
        jump %c3;
    }

    proc #d8 {
        %7fb = "3";
        %bc4 = ($sp - %7fb);
        %654 = stack[%bc4];
        %691 = "1";
        %d5f = ($sp - %691);
        %a3f = stack[%d5f];
        %696 = (%654 < %a3f);
        %59 = #1e1;
        %de0 = #608;
        if %696 then jump %59 else jump %de0;
    }
}

func func.merge_sorted_vecs {
    proc #df {
        %9b3 = "10";
        $sp = ($sp + %9b3);
        %3ef = "3";
        %3bd = ($sp - %3ef);
        %b722 = "2";
        %348f = ($sp + %b722);
        stack[%348f] = %3bd;
        %091 = "8";
        %b7f = ($sp - %091);
        %5c7 = stack[%b7f];
        %59d = "3";
        %a26 = ($sp + %59d);
        stack[%a26] = %5c7;
        %5c2 = "1";
        %548 = ($sp + %5c2);
        %fc57 = #0ad;
        stack[%548] = %fc57;
        %6bc = #d0d;
        jump %6bc;
    }

    proc #0ad {
        %627 = "2";
        %81e = ($sp - %627);
        %694d = "2";
        %2f1 = ($sp + %694d);
        stack[%2f1] = %81e;
        %85f = "6";
        %cea = ($sp - %85f);
        %f05 = stack[%cea];
        %9b8 = "3";
        %aa2 = ($sp + %9b8);
        stack[%aa2] = %f05;
        %c4e = "1";
        %d43 = ($sp + %c4e);
        %d8a = #93d;
        stack[%d43] = %d8a;
        %4cd5 = #d0d;
        jump %4cd5;
    }

    proc #93d {
        %e64 = "7";
        %4e9 = ($sp - %e64);
        %80f = stack[%4e9];
        %f58 = "5";
        %c0d = ($sp - %f58);
        %157 = stack[%c0d];
        %b30 = (%80f + %157);
        %067 = "1";
        %38 = (%b30 - %067);
        %134 = "4";
        %03c = ($sp - %134);
        %2d0 = "0";
        %682 = (%03c + %2d0);
        stack[%682] = %38;
        %a1 = #75d;
        jump %a1;
    }

    proc #69a {
        %d23 = "10";
        $sp = ($sp - %d23);
        %b5b = "1";
        %8c = ($sp + %b5b);
        %b8c = stack[%8c];
        jump %b8c;
    }

    proc #a96 {
        %9ae = "7";
        %3d8 = ($sp - %9ae);
        %343 = stack[%3d8];
        %7e2 = "1";
        %d15 = (%343 - %7e2);
        %1f1 = "3";
        %c06 = ($sp - %1f1);
        %f5e = stack[%c06];
        %0fd = (%f5e + %d15);
        %cb7 = stack[%0fd];
        %e2 = "1";
        %80b = ($sp - %e2);
        %a19 = "0";
        %232 = (%80b + %a19);
        stack[%232] = %cb7;
        %dc9 = "5";
        %5d0 = ($sp - %dc9);
        %a3c = stack[%5d0];
        %650 = "1";
        %00 = (%a3c - %650);
        %718 = "2";
        %a09 = ($sp - %718);
        %533 = stack[%a09];
        %992 = (%533 + %00);
        %3300 = stack[%992];
        %ee6 = "0";
        %cd = ($sp - %ee6);
        %1c5 = "0";
        %5b9 = (%cd + %1c5);
        stack[%5b9] = %3300;
        %658 = "5";
        %56 = ($sp - %658);
        %f49 = stack[%56];
        %e4f = "0";
        %1c0 = (!(%f49 > %e4f));
        %546 = "1";
        %dfb = ($sp - %546);
        %7b = stack[%dfb];
        %478 = "0";
        %7b4 = ($sp - %478);
        %b4 = stack[%7b4];
        %6c9 = (!(%7b < %b4));
        %c2b = (%1c0 || %6c9);
        %ecb = #a9e;
        %278 = #0c;
        if %c2b then jump %ecb else jump %278;
    }

    proc #d9 {
        %9e = "4";
        %a9a = ($sp - %9e);
        %ae5 = stack[%a9a];
        %f6 = "1";
        %052 = (%ae5 - %f6);
        %36d = "4";
        %950 = ($sp - %36d);
        %fa = "0";
        %e9 = (%950 + %fa);
        stack[%e9] = %052;
        %d5b = #75d;
        jump %d5b;
    }

    proc #a9e {
        %abd = "1";
        %0e5 = ($sp - %abd);
        %fac = stack[%0e5];
        %9d = "4";
        %3d1 = ($sp - %9d);
        %e2e = stack[%3d1];
        %0dd = "3";
        %6a1 = ($sp - %0dd);
        %97c = stack[%6a1];
        %1b2 = (%97c + %e2e);
        %051 = "0";
        %56f = (%1b2 + %051);
        stack[%56f] = %fac;
        %bc1 = "7";
        %b9f = ($sp - %bc1);
        %f9e8 = stack[%b9f];
        %cbc = "1";
        %b2 = (%f9e8 - %cbc);
        %6fc = "7";
        %af7 = ($sp - %6fc);
        %76 = "0";
        %719 = (%af7 + %76);
        stack[%719] = %b2;
        %79e = #d9;
        jump %79e;
    }

    proc #0c {
        %b20 = "0";
        %23c = ($sp - %b20);
        %0e1e = stack[%23c];
        %463 = "4";
        %687 = ($sp - %463);
        %415 = stack[%687];
        %daa = "3";
        %11a = ($sp - %daa);
        %b38 = stack[%11a];
        %e98 = (%b38 + %415);
        %fcf = "0";
        %871 = (%e98 + %fcf);
        stack[%871] = %0e1e;
        %30 = "5";
        %cdd = ($sp - %30);
        %ccd2 = stack[%cdd];
        %4e3 = "1";
        %c21 = (%ccd2 - %4e3);
        %eb1 = "5";
        %a1f = ($sp - %eb1);
        %e7 = "0";
        %9a5 = (%a1f + %e7);
        stack[%9a5] = %c21;
        %b5e = #d9;
        jump %b5e;
    }

    proc #75d {
        %df6 = "4";
        %36d3 = ($sp - %df6);
        %c9 = stack[%36d3];
        %572 = "0";
        %eb6 = (!(%c9 < %572));
        %eb9 = #a96;
        %6ee = #69a;
        if %eb6 then jump %eb9 else jump %6ee;
    }
}

func func.out {
    proc #058 {
        %766 = "2";
        $sp = ($sp + %766);
        %5ebb = "0";
        %30b = ($sp - %5ebb);
        %c6a = stack[%30b];
        out %c6a;
        %e15 = "2";
        $sp = ($sp - %e15);
        %273 = "1";
        %eef = ($sp + %273);
        %44e3 = stack[%eef];
        jump %44e3;
    }
}

func func.in {
    proc #dbe {
        %64e = "3";
        $sp = ($sp + %64e);
        %f50 = "0";
        %d29 = ($sp - %f50);
        in;
        stack[%d29] = $answer;
        %dbc = "0";
        %0a6 = ($sp - %dbc);
        %707 = stack[%0a6];
        %a57 = "1";
        %1cb = ($sp - %a57);
        %d7 = stack[%1cb];
        %f1d = "0";
        %d32 = (%d7 + %f1d);
        stack[%d32] = %707;
        %724 = "3";
        $sp = ($sp - %724);
        %d0f = "1";
        %0917 = ($sp + %d0f);
        %77 = stack[%0917];
        jump %77;
    }
}