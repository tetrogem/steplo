main {
    proc #19 {
        $sp = "-1";
        %6f = #2f;
        jump %6f;
    }
}

func main {
    proc #2f {
        %b9 = "25";
        $sp = ($sp + %b9);
        %b5 = "-3";
        %2b = "23";
        %0a = ($sp - %2b);
        %84 = "0";
        %f8 = (%0a + %84);
        stack[%f8] = %b5;
        %ce = "-2";
        %a6 = "23";
        %96 = ($sp - %a6);
        %09 = "1";
        %77 = (%96 + %09);
        stack[%77] = %ce;
        %06 = "0";
        %b1 = "23";
        %7f = ($sp - %b1);
        %ac = "2";
        %e4 = (%7f + %ac);
        stack[%e4] = %06;
        %85 = "0";
        %18 = "23";
        %f9 = ($sp - %18);
        %17 = "3";
        %c3 = (%f9 + %17);
        stack[%c3] = %85;
        %061 = "0";
        %db = "23";
        %be = ($sp - %db);
        %43 = "4";
        %cb = (%be + %43);
        stack[%cb] = %061;
        %d7 = "6";
        %24 = "23";
        %e44 = ($sp - %24);
        %4b = "5";
        %8f = (%e44 + %4b);
        stack[%8f] = %d7;
        %c7 = "7";
        %29 = "23";
        %34 = ($sp - %29);
        %f6 = "6";
        %cbc = (%34 + %f6);
        stack[%cbc] = %c7;
        %c6 = "0";
        %c0 = "23";
        %35 = ($sp - %c0);
        %fe = "7";
        %c8 = (%35 + %fe);
        stack[%c8] = %c6;
        %d3 = "0";
        %42 = "23";
        %72 = ($sp - %42);
        %97 = "8";
        %61 = (%72 + %97);
        stack[%61] = %d3;
        %ed = "0";
        %38 = "23";
        %81 = ($sp - %38);
        %fc = "9";
        %2f5 = (%81 + %fc);
        stack[%2f5] = %ed;
        %64 = "0";
        %d4 = "23";
        %e7 = ($sp - %d4);
        %25 = "10";
        %ee = (%e7 + %25);
        stack[%ee] = %64;
        %f1 = "0";
        %b9c = "23";
        %5b = ($sp - %b9c);
        %06f = "11";
        %960 = (%5b + %06f);
        stack[%960] = %f1;
        %ef = "0";
        %19f = "23";
        %93 = ($sp - %19f);
        %40 = "12";
        %f1d = (%93 + %40);
        stack[%f1d] = %ef;
        %83 = "-1";
        %f4 = "8";
        %f3 = ($sp - %f4);
        %d9 = "0";
        %344 = (%f3 + %d9);
        stack[%344] = %83;
        %b0 = "1";
        %31 = "8";
        %aa = ($sp - %31);
        %3f = "1";
        %e2 = (%aa + %3f);
        stack[%e2] = %b0;
        %0d = "1";
        %10 = "8";
        %3c = ($sp - %10);
        %fed = "2";
        %22 = (%3c + %fed);
        stack[%22] = %0d;
        %f98 = "1";
        %f16 = "8";
        %00 = ($sp - %f16);
        %dc = "3";
        %63 = (%00 + %dc);
        stack[%63] = %f98;
        %6a = "2";
        %d71 = "8";
        %63e = ($sp - %d71);
        %cf = "4";
        %02 = (%63e + %cf);
        stack[%02] = %6a;
        %298 = "3";
        %e2a = "8";
        %f11 = ($sp - %e2a);
        %6fe = "5";
        %ca = (%f11 + %6fe);
        stack[%ca] = %298;
        %9c = "10";
        %68 = ($sp - %9c);
        %843 = "2";
        %961 = ($sp + %843);
        stack[%961] = %68;
        %81f = "23";
        %a4 = ($sp - %81f);
        %86 = "3";
        %fe3 = ($sp + %86);
        stack[%fe3] = %a4;
        %e6 = "13";
        %d2 = "4";
        %e70 = ($sp + %d2);
        stack[%e70] = %e6;
        %d42 = "1";
        %8a = ($sp + %d42);
        %7d = #4b8;
        stack[%8a] = %7d;
        %fe2 = #5e;
        jump %fe2;
    }

    proc #4b8 {
        %bd = "2";
        %0d0 = ($sp - %bd);
        %b5d = "2";
        %7e = ($sp + %b5d);
        stack[%7e] = %0d0;
        %39 = "8";
        %399 = ($sp - %39);
        %23 = "3";
        %292 = ($sp + %23);
        stack[%292] = %399;
        %37 = "6";
        %06e = "4";
        %d72 = ($sp + %06e);
        stack[%d72] = %37;
        %1b = "1";
        %f46 = ($sp + %1b);
        %7c = #1b2;
        stack[%f46] = %7c;
        %8e = #5e;
        jump %8e;
    }

    proc #1b2 {
        %a62 = "0";
        %7e8 = ($sp - %a62);
        %e2a8 = "2";
        %34b = ($sp + %e2a8);
        stack[%34b] = %7e8;
        %edb = "10";
        %f8d = ($sp - %edb);
        %8ec = "3";
        %0c = ($sp + %8ec);
        stack[%0c] = %f8d;
        %de = "1";
        %74 = ($sp + %de);
        %6b = #f5;
        stack[%74] = %6b;
        %4f = #cec;
        jump %4f;
    }

    proc #f5 {
        %a9 = "0";
        %3a = ($sp - %a9);
        %224 = stack[%3a];
        %31b = "2";
        %39a = ($sp + %31b);
        stack[%39a] = %224;
        %0cc = "1";
        %73 = ($sp + %0cc);
        %49 = #75;
        stack[%73] = %49;
        %47 = #ec;
        jump %47;
    }

    proc #75 {
        %c2 = "0";
        %e3 = ($sp - %c2);
        %18c = "2";
        %55 = ($sp + %18c);
        stack[%55] = %e3;
        %72e = "2";
        %2e = ($sp - %72e);
        %233 = "3";
        %07 = ($sp + %233);
        stack[%07] = %2e;
        %862 = "1";
        %e3e = ($sp + %862);
        %7e3 = #ad;
        stack[%e3e] = %7e3;
        %3e = #cec;
        jump %3e;
    }

    proc #ad {
        %024 = "0";
        %496 = ($sp - %024);
        %9c8 = stack[%496];
        %91 = "2";
        %adf = ($sp + %91);
        stack[%adf] = %9c8;
        %07e = "1";
        %3e2 = ($sp + %07e);
        %b11 = #25f;
        stack[%3e2] = %b11;
        %c68 = #ec;
        jump %c68;
    }

    proc #25f {
        %67 = "10";
        %af = ($sp - %67);
        %82 = "2";
        %9cb = ($sp + %82);
        stack[%9cb] = %af;
        %fc7 = "7";
        %a5 = "3";
        %32 = ($sp + %a5);
        stack[%32] = %fc7;
        %b52 = "2";
        %2ef = ($sp - %b52);
        %d1 = "4";
        %c04 = ($sp + %d1);
        stack[%c04] = %2ef;
        %01 = "6";
        %d9c = "5";
        %92 = ($sp + %d9c);
        stack[%92] = %01;
        %cb1 = "1";
        %15 = ($sp + %cb1);
        %b2 = #fd;
        stack[%15] = %b2;
        %44 = #23b;
        jump %44;
    }

    proc #fd {
        %11 = "0";
        %9f = ($sp - %11);
        %d8 = "2";
        %56 = ($sp + %d8);
        stack[%56] = %9f;
        %c5 = "10";
        %da = ($sp - %c5);
        %771 = "3";
        %39f = ($sp + %771);
        stack[%39f] = %da;
        %12 = "1";
        %962 = ($sp + %12);
        %b53 = #db8;
        stack[%962] = %b53;
        %a48 = #cec;
        jump %a48;
    }

    proc #db8 {
        %4d = "Merged: ";
        %2f4 = "0";
        %d1a = ($sp - %2f4);
        %28 = stack[%d1a];
        %03 = (%4d ~ %28);
        %12e = "2";
        %b97 = ($sp + %12e);
        stack[%b97] = %03;
        %57 = "1";
        %73f = ($sp + %57);
        %32a = #385;
        stack[%73f] = %32a;
        %5d = #ec;
        jump %5d;
    }

    proc #385 {
        exit;
    }
}

func func.Vector_new {
    proc #5e {
        %33 = "4";
        $sp = ($sp + %33);
        %4a = "1";
        %fd2 = ($sp - %4a);
        %186 = stack[%fd2];
        %16 = "2";
        %f7 = ($sp - %16);
        %126 = stack[%f7];
        %388 = "0";
        %2c = (%126 + %388);
        stack[%2c] = %186;
        %50 = "0";
        %e26 = ($sp - %50);
        %fb = stack[%e26];
        %5c = "2";
        %248 = ($sp - %5c);
        %5b6 = stack[%248];
        %81e = "1";
        %aa3 = (%5b6 + %81e);
        stack[%aa3] = %fb;
        %a1 = "4";
        $sp = ($sp - %a1);
        %ea = "1";
        %d7e = ($sp + %ea);
        %2e6 = stack[%d7e];
        jump %2e6;
    }
}

func func.Vector_vals_ref {
    proc #d8e {
        %68b = "3";
        $sp = ($sp + %68b);
        %9d = "0";
        %7e9 = ($sp - %9d);
        %49e = stack[%7e9];
        %b56 = "0";
        %98 = (%49e + %b56);
        %eae = stack[%98];
        %686 = "1";
        %aca = ($sp - %686);
        %ca7 = stack[%aca];
        %e1 = "0";
        %a9e = (%ca7 + %e1);
        stack[%a9e] = %eae;
        %d6 = "3";
        $sp = ($sp - %d6);
        %b9cf = "1";
        %5ba = ($sp + %b9cf);
        %50d = stack[%5ba];
        jump %50d;
    }
}

func func.Vector_len {
    proc #a1b {
        %1a = "3";
        $sp = ($sp + %1a);
        %161 = "0";
        %f1e = ($sp - %161);
        %d99 = stack[%f1e];
        %0ca = "1";
        %2bb = (%d99 + %0ca);
        %c7e = stack[%2bb];
        %1d = "1";
        %c57 = ($sp - %1d);
        %ce1 = stack[%c57];
        %d0 = "0";
        %dd = (%ce1 + %d0);
        stack[%dd] = %c7e;
        %e6c = "3";
        $sp = ($sp - %e6c);
        %9d6 = "1";
        %864 = ($sp + %9d6);
        %7c2 = stack[%864];
        jump %7c2;
    }
}

func func.Vector_to_string {
    proc #cec {
        %cd = "8";
        $sp = ($sp + %cd);
        %48 = "2";
        %fa = ($sp - %48);
        %02c = "2";
        %7ea = ($sp + %02c);
        stack[%7ea] = %fa;
        %336 = "5";
        %d29 = ($sp - %336);
        %b20 = stack[%d29];
        %d5 = "3";
        %84d = ($sp + %d5);
        stack[%84d] = %b20;
        %88 = "1";
        %04 = ($sp + %88);
        %3b = #80;
        stack[%04] = %3b;
        %5b3 = #d8e;
        jump %5b3;
    }

    proc #80 {
        %d97 = "1";
        %6e = ($sp - %d97);
        %a6d = "2";
        %9dd = ($sp + %a6d);
        stack[%9dd] = %6e;
        %70 = "5";
        %385b = ($sp - %70);
        %f57 = stack[%385b];
        %6c = "3";
        %3997 = ($sp + %6c);
        stack[%3997] = %f57;
        %4e = "1";
        %8e3 = ($sp + %4e);
        %1be = #eb;
        stack[%8e3] = %1be;
        %bf = #a1b;
        jump %bf;
    }

    proc #eb {
        %ea4 = "[";
        %5d3 = "4";
        %63a = ($sp - %5d3);
        %7a = "0";
        %3ae = (%63a + %7a);
        stack[%3ae] = %ea4;
        %682 = "0";
        %66 = "3";
        %b9f = ($sp - %66);
        %1bd = "0";
        %127 = (%b9f + %1bd);
        stack[%127] = %682;
        %cb8 = #52;
        jump %cb8;
    }

    proc #aa5 {
        %e0 = "4";
        %d10 = ($sp - %e0);
        %bc = stack[%d10];
        %0cc1 = "]";
        %387 = (%bc ~ %0cc1);
        %eea = "4";
        %2e2 = ($sp - %eea);
        %51 = "0";
        %ea5 = (%2e2 + %51);
        stack[%ea5] = %387;
        %3ee = "4";
        %660 = ($sp - %3ee);
        %95 = stack[%660];
        %443 = "6";
        %41 = ($sp - %443);
        %f9c = stack[%41];
        %280 = "0";
        %c38 = (%f9c + %280);
        stack[%c38] = %95;
        %49a = "8";
        $sp = ($sp - %49a);
        %d3b = "1";
        %73c = ($sp + %d3b);
        %7ed = stack[%73c];
        jump %7ed;
    }

    proc #b92 {
        %d7ee = "2";
        %67a = ($sp - %d7ee);
        %0d7 = stack[%67a];
        %a3 = "3";
        %bb = ($sp - %a3);
        %1a3 = stack[%bb];
        %ba = (%0d7 + %1a3);
        %ff = stack[%ba];
        %1b3 = "0";
        %9ff = ($sp - %1b3);
        %3d = "0";
        %30 = (%9ff + %3d);
        stack[%30] = %ff;
        %75f = "4";
        %444 = ($sp - %75f);
        %4c = stack[%444];
        %ae = "0";
        %b7 = ($sp - %ae);
        %b6 = stack[%b7];
        %d9d = (%4c ~ %b6);
        %f119 = "4";
        %9a = ($sp - %f119);
        %7a5 = "0";
        %7b = (%9a + %7a5);
        stack[%7b] = %d9d;
        %3e7 = "3";
        %46 = ($sp - %3e7);
        %723 = stack[%46];
        %45 = "1";
        %cc = (%723 + %45);
        %856 = "1";
        %3b6 = ($sp - %856);
        %983 = stack[%3b6];
        %c87 = (%cc < %983);
        %079 = #3fa;
        %d2d = #398;
        if %c87 then jump %079 else jump %d2d;
    }

    proc #398 {
        %860 = "3";
        %5a = ($sp - %860);
        %9e = stack[%5a];
        %047 = "1";
        %b6e = (%9e + %047);
        %bf1 = "3";
        %4b7 = ($sp - %bf1);
        %036 = "0";
        %a3d = (%4b7 + %036);
        stack[%a3d] = %b6e;
        %35f = #52;
        jump %35f;
    }

    proc #3fa {
        %54 = "4";
        %612 = ($sp - %54);
        %471 = stack[%612];
        %489 = ", ";
        %667 = (%471 ~ %489);
        %23a = "4";
        %c8a = ($sp - %23a);
        %004 = "0";
        %a0 = (%c8a + %004);
        stack[%a0] = %667;
        %a99 = #398;
        jump %a99;
    }

    proc #52 {
        %d65 = "3";
        %b1d = ($sp - %d65);
        %89 = stack[%b1d];
        %3e6 = "1";
        %41b = ($sp - %3e6);
        %aaa = stack[%41b];
        %2efd = (%89 < %aaa);
        %048 = #b92;
        %80d = #aa5;
        if %2efd then jump %048 else jump %80d;
    }
}

func func.merge_sorted_vecs {
    proc #23b {
        %e42 = "12";
        $sp = ($sp + %e42);
        %825 = "5";
        %db4 = ($sp - %825);
        %21 = "2";
        %5aa = ($sp + %21);
        stack[%5aa] = %db4;
        %b59 = "10";
        %de0 = ($sp - %b59);
        %3a5 = stack[%de0];
        %49b = "3";
        %852 = ($sp + %49b);
        stack[%852] = %3a5;
        %7a58 = "1";
        %300 = ($sp + %7a58);
        %dea = #64b;
        stack[%300] = %dea;
        %2e3 = #d8e;
        jump %2e3;
    }

    proc #64b {
        %3f2 = "4";
        %0d9 = ($sp - %3f2);
        %f73 = "2";
        %df = ($sp + %f73);
        stack[%df] = %0d9;
        %b3 = "8";
        %926 = ($sp - %b3);
        %566 = stack[%926];
        %05 = "3";
        %7a1 = ($sp + %05);
        stack[%7a1] = %566;
        %a7 = "1";
        %de0c = ($sp + %a7);
        %832 = #7fd;
        stack[%de0c] = %832;
        %971 = #d8e;
        jump %971;
    }

    proc #7fd {
        %6c9 = "9";
        %a3dd = ($sp - %6c9);
        %f38 = stack[%a3dd];
        %918 = "7";
        %87 = ($sp - %918);
        %4965 = stack[%87];
        %b37 = (%f38 + %4965);
        %7fc = "1";
        %a8 = (%b37 - %7fc);
        %7d2 = "6";
        %552 = ($sp - %7d2);
        %58 = "0";
        %f7a = (%552 + %58);
        stack[%f7a] = %a8;
        %806 = #a76;
        jump %806;
    }

    proc #ff0 {
        %75fc = "12";
        $sp = ($sp - %75fc);
        %a1f = "1";
        %0e = ($sp + %a1f);
        %2b9 = stack[%0e];
        jump %2b9;
    }

    proc #63c {
        %90 = "5";
        %40e = ($sp - %90);
        %b0f = stack[%40e];
        %6f2 = "9";
        %c9 = ($sp - %6f2);
        %f32 = stack[%c9];
        %524 = (%b0f + %f32);
        %7ba = "1";
        %b9f7 = (%524 - %7ba);
        %e9 = stack[%b9f7];
        %76 = "3";
        %83f = ($sp - %76);
        %f98b = "0";
        %8c = (%83f + %f98b);
        stack[%8c] = %e9;
        %2d = "4";
        %fce = ($sp - %2d);
        %7c5 = stack[%fce];
        %ea5a = "7";
        %71 = ($sp - %ea5a);
        %dfc = stack[%71];
        %987 = (%7c5 + %dfc);
        %559 = "1";
        %db0 = (%987 - %559);
        %9ca = stack[%db0];
        %ae7 = "2";
        %381 = ($sp - %ae7);
        %5d7 = "0";
        %af0 = (%381 + %5d7);
        stack[%af0] = %9ca;
        %a98 = "7";
        %1f = ($sp - %a98);
        %f49 = stack[%1f];
        %18f = "0";
        %fb7 = (!(%f49 > %18f));
        %99 = "1";
        %48a = ($sp - %99);
        %955 = "0";
        %8b = (%48a + %955);
        stack[%8b] = %fb7;
        %3c4 = "3";
        %44b = ($sp - %3c4);
        %53 = stack[%44b];
        %222 = "2";
        %33e = ($sp - %222);
        %475 = stack[%33e];
        %79 = (!(%53 < %475));
        %94 = "0";
        %8b1 = ($sp - %94);
        %7fa = "0";
        %567 = (%8b1 + %7fa);
        stack[%567] = %79;
        %5d3c = "1";
        %3c47 = ($sp - %5d3c);
        %9db = stack[%3c47];
        %f81 = "0";
        %ae0 = ($sp - %f81);
        %869 = stack[%ae0];
        %68e = (%9db || %869);
        %b2d = #7bc;
        %59 = #e5;
        if %68e then jump %b2d else jump %59;
    }

    proc #e78 {
        %116 = "6";
        %3b0 = ($sp - %116);
        %4e2 = stack[%3b0];
        %a18 = "1";
        %219 = (%4e2 - %a18);
        %442 = "6";
        %36 = ($sp - %442);
        %dc9 = "0";
        %adc = (%36 + %dc9);
        stack[%adc] = %219;
        %415 = #a76;
        jump %415;
    }

    proc #7bc {
        %a6a = "3";
        %340 = ($sp - %a6a);
        %a8c = stack[%340];
        %bcb = "5";
        %5db = ($sp - %bcb);
        %e8 = stack[%5db];
        %bc1 = "6";
        %e65 = ($sp - %bc1);
        %afa = stack[%e65];
        %0c8 = (%e8 + %afa);
        %d80 = "0";
        %331 = (%0c8 + %d80);
        stack[%331] = %a8c;
        %d53 = "9";
        %fba = ($sp - %d53);
        %0d8 = stack[%fba];
        %2f6 = "1";
        %3ce = (%0d8 - %2f6);
        %96a = "9";
        %902 = ($sp - %96a);
        %0f = "0";
        %b4 = (%902 + %0f);
        stack[%b4] = %3ce;
        %168 = #e78;
        jump %168;
    }

    proc #e5 {
        %598 = "2";
        %a40 = ($sp - %598);
        %cc5 = stack[%a40];
        %0c3 = "5";
        %27 = ($sp - %0c3);
        %e21 = stack[%27];
        %824 = "6";
        %d27 = ($sp - %824);
        %7dd = stack[%d27];
        %e71 = (%e21 + %7dd);
        %a92 = "0";
        %5f = (%e71 + %a92);
        stack[%5f] = %cc5;
        %69 = "7";
        %9b = ($sp - %69);
        %456 = stack[%9b];
        %e93 = "1";
        %6e7 = (%456 - %e93);
        %b16 = "7";
        %103 = ($sp - %b16);
        %d16 = "0";
        %72c = (%103 + %d16);
        stack[%72c] = %6e7;
        %9bc = #e78;
        jump %9bc;
    }

    proc #a76 {
        %8fb = "6";
        %8b5 = ($sp - %8fb);
        %592 = stack[%8b5];
        %a31 = "0";
        %d6d = (!(%592 < %a31));
        %86c = #63c;
        %450 = #ff0;
        if %d6d then jump %86c else jump %450;
    }
}

func func.out {
    proc #ec {
        %e59 = "2";
        $sp = ($sp + %e59);
        %a64 = "0";
        %e38 = ($sp - %a64);
        %dc1 = stack[%e38];
        out %dc1;
        %0d2 = "2";
        $sp = ($sp - %0d2);
        %e94 = "1";
        %bd1 = ($sp + %e94);
        %5c7 = stack[%bd1];
        jump %5c7;
    }
}

func func.in {
    proc #6c1 {
        %60 = "3";
        $sp = ($sp + %60);
        %a0b = "0";
        %f2 = ($sp - %a0b);
        in;
        stack[%f2] = $answer;
        %4ff = "0";
        %954 = ($sp - %4ff);
        %9d3 = stack[%954];
        %7e80 = "1";
        %dac = ($sp - %7e80);
        %ebc = stack[%dac];
        %802 = "0";
        %738 = (%ebc + %802);
        stack[%738] = %9d3;
        %90a = "3";
        $sp = ($sp - %90a);
        %ebd = "1";
        %965 = ($sp + %ebd);
        %90a1 = stack[%965];
        jump %90a1;
    }
}