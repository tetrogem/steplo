main {
    proc #e3 {
        $sp = "-1";
        jump #cd;
    }
}

func main {
    proc #cd {
        $sp = ($sp + "25");
        stack[($sp - "23")] = "-3";
        stack[(($sp - "23") + "1")] = "-2";
        stack[(($sp - "23") + "2")] = "0";
        stack[(($sp - "23") + "3")] = "0";
        stack[(($sp - "23") + "4")] = "0";
        stack[(($sp - "23") + "5")] = "6";
        stack[(($sp - "23") + "6")] = "7";
        stack[(($sp - "23") + "7")] = "0";
        stack[(($sp - "23") + "8")] = "0";
        stack[(($sp - "23") + "9")] = "0";
        stack[(($sp - "23") + "10")] = "0";
        stack[(($sp - "23") + "11")] = "0";
        stack[(($sp - "23") + "12")] = "0";
        stack[($sp - "8")] = "-1";
        stack[(($sp - "8") + "1")] = "1";
        stack[(($sp - "8") + "2")] = "1";
        stack[(($sp - "8") + "3")] = "1";
        stack[(($sp - "8") + "4")] = "2";
        stack[(($sp - "8") + "5")] = "3";
        stack[($sp + "2")] = ($sp - "10");
        stack[($sp + "3")] = ($sp - "23");
        stack[($sp + "4")] = "13";
        stack[($sp + "1")] = #fe;
        jump #3f;
    }

    proc #fe {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = ($sp - "8");
        stack[($sp + "4")] = "6";
        stack[($sp + "1")] = #d0;
        jump #3f;
    }

    proc #d0 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = ($sp - "10");
        stack[($sp + "1")] = #79;
        jump #90;
    }

    proc #79 {
        stack[($sp + "2")] = stack[$sp];
        stack[($sp + "1")] = #b2;
        jump #fa;
    }

    proc #b2 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = ($sp - "2");
        stack[($sp + "1")] = #10;
        jump #90;
    }

    proc #10 {
        stack[($sp + "2")] = stack[$sp];
        stack[($sp + "1")] = #99;
        jump #fa;
    }

    proc #99 {
        stack[($sp + "2")] = ($sp - "10");
        stack[($sp + "3")] = "7";
        stack[($sp + "4")] = ($sp - "2");
        stack[($sp + "5")] = "6";
        stack[($sp + "1")] = #5c;
        jump #25;
    }

    proc #5c {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = ($sp - "10");
        stack[($sp + "1")] = #67;
        jump #90;
    }

    proc #67 {
        stack[($sp + "2")] = ("Merged: " ~ stack[$sp]);
        stack[($sp + "1")] = #8f;
        jump #fa;
    }

    proc #8f {
        exit;
    }
}

func func.Vector_new {
    proc #3f {
        $sp = ($sp + "4");
        stack[stack[($sp - "2")]] = stack[($sp - "1")];
        stack[(stack[($sp - "2")] + "1")] = stack[$sp];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vector_vals_r {
    proc #33 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[stack[$sp]];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vector_len {
    proc #29 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[(stack[$sp] + "1")];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vector_to_string {
    proc #90 {
        $sp = ($sp + "8");
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #5e;
        jump #33;
    }

    proc #5e {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #03;
        jump #29;
    }

    proc #03 {
        stack[($sp - "4")] = "[";
        stack[($sp - "3")] = "0";
        if (stack[($sp - "3")] < stack[($sp - "1")]) then jump #87 else jump #45;
    }

    proc #45 {
        stack[($sp - "4")] = (stack[($sp - "4")] ~ "]");
        stack[stack[($sp - "6")]] = stack[($sp - "4")];
        $sp = ($sp - "8");
        jump stack[($sp + "1")];
    }

    proc #87 {
        stack[$sp] = stack[(stack[($sp - "2")] + stack[($sp - "3")])];
        stack[($sp - "4")] = (stack[($sp - "4")] ~ stack[$sp]);
        if ((stack[($sp - "3")] + "1") < stack[($sp - "1")]) then jump #0c else jump #cc;
    }

    proc #cc {
        stack[($sp - "3")] = (stack[($sp - "3")] + "1");
        if (stack[($sp - "3")] < stack[($sp - "1")]) then jump #87 else jump #45;
    }

    proc #0c {
        stack[($sp - "4")] = (stack[($sp - "4")] ~ ", ");
        jump #cc;
    }
}

func func.merge_sorted_vecs {
    proc #25 {
        $sp = ($sp + "10");
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = stack[($sp - "8")];
        stack[($sp + "1")] = #b6;
        jump #33;
    }

    proc #b6 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "6")];
        stack[($sp + "1")] = #e2;
        jump #33;
    }

    proc #e2 {
        stack[($sp - "4")] = ((stack[($sp - "7")] + stack[($sp - "5")]) - "1");
        if (!(stack[($sp - "4")] < "0")) then jump #cc4 else jump #30;
    }

    proc #30 {
        $sp = ($sp - "10");
        jump stack[($sp + "1")];
    }

    proc #cc4 {
        stack[($sp - "1")] = stack[(stack[($sp - "3")] + (stack[($sp - "7")] - "1"))];
        stack[$sp] = stack[(stack[($sp - "2")] + (stack[($sp - "5")] - "1"))];
        if ((!(stack[($sp - "5")] > "0")) || (!(stack[($sp - "1")] < stack[$sp]))) then jump #0cc else jump #4d;
    }

    proc #19 {
        stack[($sp - "4")] = (stack[($sp - "4")] - "1");
        if (!(stack[($sp - "4")] < "0")) then jump #cc4 else jump #30;
    }

    proc #0cc {
        stack[(stack[($sp - "3")] + stack[($sp - "4")])] = stack[($sp - "1")];
        stack[($sp - "7")] = (stack[($sp - "7")] - "1");
        jump #19;
    }

    proc #4d {
        stack[(stack[($sp - "3")] + stack[($sp - "4")])] = stack[$sp];
        stack[($sp - "5")] = (stack[($sp - "5")] - "1");
        jump #19;
    }
}

func func.out {
    proc #fa {
        $sp = ($sp + "2");
        out stack[$sp];
        $sp = ($sp - "2");
        jump stack[($sp + "1")];
    }
}