main {
    proc #40 {
        $sp = "-1";
        jump #2c;
    }
}

func main {
    proc #2c {
        $sp = ($sp + "25");
        stack[($sp - "23")] = "-3";
        stack[(($sp - "23") + "1")] = "-2";
        stack[(($sp - "23") + "2")] = "0";
        stack[(($sp - "23") + "3")] = "0";
        stack[(($sp - "23") + "4")] = "0";
        stack[(($sp - "23") + "5")] = "6";
        stack[(($sp - "23") + "6")] = "7";
        stack[(($sp - "23") + "7")] = "0";
        stack[(($sp - "23") + "8")] = "0";
        stack[(($sp - "23") + "9")] = "0";
        stack[(($sp - "23") + "10")] = "0";
        stack[(($sp - "23") + "11")] = "0";
        stack[(($sp - "23") + "12")] = "0";
        stack[($sp - "8")] = "-1";
        stack[(($sp - "8") + "1")] = "1";
        stack[(($sp - "8") + "2")] = "1";
        stack[(($sp - "8") + "3")] = "1";
        stack[(($sp - "8") + "4")] = "2";
        stack[(($sp - "8") + "5")] = "3";
        stack[($sp + "2")] = ($sp - "10");
        stack[($sp + "3")] = ($sp - "23");
        stack[($sp + "4")] = "13";
        stack[($sp + "1")] = #e3;
        jump #de;
    }

    proc #e3 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = ($sp - "8");
        stack[($sp + "4")] = "6";
        stack[($sp + "1")] = #a9;
        jump #de;
    }

    proc #a9 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = ($sp - "10");
        stack[($sp + "1")] = #e9;
        jump #15;
    }

    proc #e9 {
        stack[($sp + "2")] = stack[$sp];
        stack[($sp + "1")] = #154;
        jump #ff;
    }

    proc #154 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = ($sp - "2");
        stack[($sp + "1")] = #ff5;
        jump #15;
    }

    proc #ff5 {
        stack[($sp + "2")] = stack[$sp];
        stack[($sp + "1")] = #8c;
        jump #ff;
    }

    proc #8c {
        stack[($sp + "2")] = ($sp - "10");
        stack[($sp + "3")] = "7";
        stack[($sp + "4")] = ($sp - "2");
        stack[($sp + "5")] = "6";
        stack[($sp + "1")] = #51;
        jump #03;
    }

    proc #51 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = ($sp - "10");
        stack[($sp + "1")] = #9f;
        jump #15;
    }

    proc #9f {
        stack[($sp + "2")] = ("Merged: " ~ stack[$sp]);
        stack[($sp + "1")] = #9c;
        jump #ff;
    }

    proc #9c {
        exit;
    }
}

func func.Vector_new {
    proc #de {
        $sp = ($sp + "4");
        stack[stack[($sp - "2")]] = stack[($sp - "1")];
        stack[(stack[($sp - "2")] + "1")] = stack[$sp];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vector_vals_ref {
    proc #a3 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[stack[$sp]];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vector_len {
    proc #5f {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[(stack[$sp] + "1")];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vector_to_string {
    proc #15 {
        $sp = ($sp + "8");
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #62;
        jump #a3;
    }

    proc #62 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #74;
        jump #5f;
    }

    proc #74 {
        stack[($sp - "4")] = "[";
        stack[($sp - "3")] = "0";
        if (stack[($sp - "3")] < stack[($sp - "1")]) then jump #d7 else jump #8ca;
    }

    proc #8ca {
        stack[($sp - "4")] = (stack[($sp - "4")] ~ "]");
        stack[stack[($sp - "6")]] = stack[($sp - "4")];
        $sp = ($sp - "8");
        jump stack[($sp + "1")];
    }

    proc #d7 {
        stack[$sp] = stack[(stack[($sp - "2")] + stack[($sp - "3")])];
        stack[($sp - "4")] = (stack[($sp - "4")] ~ stack[$sp]);
        if ((stack[($sp - "3")] + "1") < stack[($sp - "1")]) then jump #1a else jump #91;
    }

    proc #91 {
        stack[($sp - "3")] = (stack[($sp - "3")] + "1");
        if (stack[($sp - "3")] < stack[($sp - "1")]) then jump #d7 else jump #8ca;
    }

    proc #1a {
        stack[($sp - "4")] = (stack[($sp - "4")] ~ ", ");
        jump #91;
    }
}

func func.merge_sorted_vecs {
    proc #03 {
        $sp = ($sp + "10");
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = stack[($sp - "8")];
        stack[($sp + "1")] = #bd;
        jump #a3;
    }

    proc #bd {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "6")];
        stack[($sp + "1")] = #ca;
        jump #a3;
    }

    proc #ca {
        stack[($sp - "4")] = ((stack[($sp - "7")] + stack[($sp - "5")]) - "1");
        if (!(stack[($sp - "4")] < "0")) then jump #10 else jump #6b;
    }

    proc #6b {
        $sp = ($sp - "10");
        jump stack[($sp + "1")];
    }

    proc #10 {
        stack[($sp - "1")] = stack[((stack[($sp - "3")] + stack[($sp - "7")]) - "1")];
        stack[$sp] = stack[((stack[($sp - "2")] + stack[($sp - "5")]) - "1")];
        if ((!(stack[($sp - "5")] > "0")) || (!(stack[($sp - "1")] < stack[$sp]))) then jump #d0 else jump #48;
    }

    proc #df {
        stack[($sp - "4")] = (stack[($sp - "4")] - "1");
        if (!(stack[($sp - "4")] < "0")) then jump #10 else jump #6b;
    }

    proc #d0 {
        stack[(stack[($sp - "3")] + stack[($sp - "4")])] = stack[($sp - "1")];
        stack[($sp - "7")] = (stack[($sp - "7")] - "1");
        jump #df;
    }

    proc #48 {
        stack[(stack[($sp - "3")] + stack[($sp - "4")])] = stack[$sp];
        stack[($sp - "5")] = (stack[($sp - "5")] - "1");
        jump #df;
    }
}

func func.out {
    proc #ff {
        $sp = ($sp + "2");
        out stack[$sp];
        $sp = ($sp - "2");
        jump stack[($sp + "1")];
    }
}