main {
    proc #a2 {
        $sp = "-1";
        jump #75;
    }
}

func main {
    proc #75 {
        $sp = ($sp + "25");
        stack[($sp - "23")] = "-3";
        stack[(($sp - "23") + "1")] = "-2";
        stack[(($sp - "23") + "2")] = "0";
        stack[(($sp - "23") + "3")] = "0";
        stack[(($sp - "23") + "4")] = "0";
        stack[(($sp - "23") + "5")] = "6";
        stack[(($sp - "23") + "6")] = "7";
        stack[(($sp - "23") + "7")] = "0";
        stack[(($sp - "23") + "8")] = "0";
        stack[(($sp - "23") + "9")] = "0";
        stack[(($sp - "23") + "10")] = "0";
        stack[(($sp - "23") + "11")] = "0";
        stack[(($sp - "23") + "12")] = "0";
        stack[($sp - "8")] = "-1";
        stack[(($sp - "8") + "1")] = "1";
        stack[(($sp - "8") + "2")] = "1";
        stack[(($sp - "8") + "3")] = "1";
        stack[(($sp - "8") + "4")] = "2";
        stack[(($sp - "8") + "5")] = "3";
        stack[($sp + "2")] = ($sp - "10");
        stack[($sp + "3")] = ($sp - "23");
        stack[($sp + "4")] = "13";
        stack[($sp + "1")] = #eb;
        jump #7f;
    }

    proc #eb {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = ($sp - "8");
        stack[($sp + "4")] = "6";
        stack[($sp + "1")] = #cf;
        jump #7f;
    }

    proc #cf {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = ($sp - "10");
        stack[($sp + "1")] = #4b;
        jump #5f;
    }

    proc #4b {
        stack[($sp + "2")] = stack[$sp];
        stack[($sp + "1")] = #e5;
        jump #05;
    }

    proc #e5 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = ($sp - "2");
        stack[($sp + "1")] = #3f;
        jump #5f;
    }

    proc #3f {
        stack[($sp + "2")] = stack[$sp];
        stack[($sp + "1")] = #e1;
        jump #05;
    }

    proc #e1 {
        stack[($sp + "2")] = ($sp - "10");
        stack[($sp + "3")] = "7";
        stack[($sp + "4")] = ($sp - "2");
        stack[($sp + "5")] = "6";
        stack[($sp + "1")] = #f8;
        jump #df;
    }

    proc #f8 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = ($sp - "10");
        stack[($sp + "1")] = #b9;
        jump #5f;
    }

    proc #b9 {
        stack[($sp + "2")] = ("Merged: " ~ stack[$sp]);
        stack[($sp + "1")] = #9c;
        jump #05;
    }

    proc #9c {
        exit;
    }
}

func func.Vector_new {
    proc #7f {
        $sp = ($sp + "4");
        stack[stack[($sp - "2")]] = stack[($sp - "1")];
        stack[(stack[($sp - "2")] + "1")] = stack[$sp];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vector_vals_ref {
    proc #d0 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[stack[$sp]];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vector_len {
    proc #4c {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[(stack[$sp] + "1")];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vector_to_string {
    proc #5f {
        $sp = ($sp + "8");
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #d2;
        jump #d0;
    }

    proc #d2 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #6c;
        jump #4c;
    }

    proc #6c {
        stack[($sp - "4")] = "[";
        stack[($sp - "3")] = "0";
        if (stack[($sp - "3")] < stack[($sp - "1")]) then jump #1e else jump #60;
    }

    proc #60 {
        stack[($sp - "4")] = (stack[($sp - "4")] ~ "]");
        stack[stack[($sp - "6")]] = stack[($sp - "4")];
        $sp = ($sp - "8");
        jump stack[($sp + "1")];
    }

    proc #1e {
        stack[$sp] = stack[(stack[($sp - "2")] + stack[($sp - "3")])];
        stack[($sp - "4")] = (stack[($sp - "4")] ~ stack[$sp]);
        if ((stack[($sp - "3")] + "1") < stack[($sp - "1")]) then jump #07 else jump #af;
    }

    proc #af {
        stack[($sp - "3")] = (stack[($sp - "3")] + "1");
        if (stack[($sp - "3")] < stack[($sp - "1")]) then jump #1e else jump #60;
    }

    proc #07 {
        stack[($sp - "4")] = (stack[($sp - "4")] ~ ", ");
        jump #af;
    }
}

func func.merge_sorted_vecs {
    proc #df {
        $sp = ($sp + "10");
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = stack[($sp - "8")];
        stack[($sp + "1")] = #0a;
        jump #d0;
    }

    proc #0a {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "6")];
        stack[($sp + "1")] = #93;
        jump #d0;
    }

    proc #93 {
        stack[($sp - "4")] = ((stack[($sp - "7")] + stack[($sp - "5")]) - "1");
        if (!(stack[($sp - "4")] < "0")) then jump #a9 else jump #69;
    }

    proc #69 {
        $sp = ($sp - "10");
        jump stack[($sp + "1")];
    }

    proc #a9 {
        stack[($sp - "1")] = stack[(stack[($sp - "3")] + (stack[($sp - "7")] - "1"))];
        stack[$sp] = stack[(stack[($sp - "2")] + (stack[($sp - "5")] - "1"))];
        if ((!(stack[($sp - "5")] > "0")) || (!(stack[($sp - "1")] < stack[$sp]))) then jump #a9e else jump #0c;
    }

    proc #d9 {
        stack[($sp - "4")] = (stack[($sp - "4")] - "1");
        if (!(stack[($sp - "4")] < "0")) then jump #a9 else jump #69;
    }

    proc #a9e {
        stack[(stack[($sp - "3")] + stack[($sp - "4")])] = stack[($sp - "1")];
        stack[($sp - "7")] = (stack[($sp - "7")] - "1");
        jump #d9;
    }

    proc #0c {
        stack[(stack[($sp - "3")] + stack[($sp - "4")])] = stack[$sp];
        stack[($sp - "5")] = (stack[($sp - "5")] - "1");
        jump #d9;
    }
}

func func.out {
    proc #05 {
        $sp = ($sp + "2");
        out stack[$sp];
        $sp = ($sp - "2");
        jump stack[($sp + "1")];
    }
}