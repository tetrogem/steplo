main {
    proc #4b {
        $sp = "-1";
        %ea = #ad;
        jump %ea;
    }
}

func main {
    proc #ad {
        %78 = "4";
        $sp = ($sp + %78);
        %66 = "2";
        %df = ($sp - %66);
        %28 = "2";
        %08 = ($sp + %28);
        stack[%08] = %df;
        %47 = "-10";
        %9a = "3";
        %4d = ($sp + %9a);
        stack[%4d] = %47;
        %f5 = "20";
        %76 = "4";
        %286 = ($sp + %76);
        stack[%286] = %f5;
        %6c = "1";
        %71 = ($sp + %6c);
        %c2 = #eb;
        stack[%71] = %c2;
        %d5 = #54;
        jump %d5;
    }

    proc #eb {
        %45 = "1";
        %9f = ($sp - %45);
        %d8 = "2";
        %b7 = ($sp + %d8);
        stack[%b7] = %9f;
        %cb = "-10";
        %bb = "3";
        %b5 = ($sp + %bb);
        stack[%b5] = %cb;
        %9af = "20";
        %67 = "4";
        %be = ($sp + %67);
        stack[%be] = %9af;
        %ca = "1";
        %04 = ($sp + %ca);
        %75 = #8c;
        stack[%04] = %75;
        %e8 = #68;
        jump %e8;
    }

    proc #8c {
        %9f6 = "0";
        %35 = ($sp - %9f6);
        %46 = "2";
        %1d = ($sp + %46);
        stack[%1d] = %35;
        %ae = "10";
        %29 = "3";
        %eaf = ($sp + %29);
        stack[%eaf] = %ae;
        %de = "20";
        %a7 = "4";
        %ab = ($sp + %a7);
        stack[%ab] = %de;
        %30 = "1";
        %a6 = ($sp + %30);
        %54d = #c5;
        stack[%a6] = %54d;
        %0f = #03;
        jump %0f;
    }

    proc #c5 {
        %4a = "2";
        %a3 = ($sp - %4a);
        %c3 = stack[%a3];
        %95 = "2";
        %15 = ($sp + %95);
        stack[%15] = %c3;
        %23 = "1";
        %01 = ($sp + %23);
        %fd = #a2;
        stack[%01] = %fd;
        %14 = #16;
        jump %14;
    }

    proc #a2 {
        %05 = "1";
        %74 = ($sp - %05);
        %6e = stack[%74];
        %21 = "2";
        %bf = ($sp + %21);
        stack[%bf] = %6e;
        %81 = "1";
        %d6 = ($sp + %81);
        %10 = #38;
        stack[%d6] = %10;
        %8f = #16;
        jump %8f;
    }

    proc #38 {
        %c0 = "0";
        %6e0 = ($sp - %c0);
        %c7 = stack[%6e0];
        %4e = "2";
        %fb = ($sp + %4e);
        stack[%fb] = %c7;
        %5c = "1";
        %52 = ($sp + %5c);
        %785 = #8f8;
        stack[%52] = %785;
        %d54 = #16;
        jump %d54;
    }

    proc #8f8 {
        exit;
    }
}

func func.out {
    proc #16 {
        %a8 = "2";
        $sp = ($sp + %a8);
        %70 = "0";
        %786 = ($sp - %70);
        %b5f = stack[%786];
        out %b5f;
        %b3 = "2";
        $sp = ($sp - %b3);
        %8e = "1";
        %07 = ($sp + %8e);
        %1f = stack[%07];
        jump %1f;
    }
}

func func.in {
    proc #1c {
        %57 = "3";
        $sp = ($sp + %57);
        %98 = "0";
        %e7 = ($sp - %98);
        in;
        stack[%e7] = $answer;
        %451 = "0";
        %e4 = ($sp - %451);
        %e7c = stack[%e4];
        %4aa = "1";
        %a5 = ($sp - %4aa);
        %49 = stack[%a5];
        %32 = "0";
        %c4 = (%49 + %32);
        stack[%c4] = %e7c;
        %ac = "3";
        $sp = ($sp - %ac);
        %19 = "1";
        %981 = ($sp + %19);
        %782 = stack[%981];
        jump %782;
    }
}

func func.random_num {
    proc #54 {
        %09 = "5";
        $sp = ($sp + %09);
        %4da = "0";
        %781 = ($sp - %4da);
        %92 = "0.0";
        %714 = "1.0";
        stack[%781] = (%92 <random> %714);
        %ff = "2";
        %bd = ($sp - %ff);
        %7b = stack[%bd];
        %33 = "0";
        %85 = ($sp - %33);
        %83 = stack[%85];
        %ad3 = "1";
        %8d = ($sp - %ad3);
        %b7e = stack[%8d];
        %40 = "2";
        %d60 = ($sp - %40);
        %d6a = stack[%d60];
        %012 = (%b7e - %d6a);
        %61 = (%83 * %012);
        %c76 = (%7b + %61);
        %ef = "3";
        %e2 = ($sp - %ef);
        %e7a = stack[%e2];
        %72 = "0";
        %e5 = (%e7a + %72);
        stack[%e5] = %c76;
        %c5e = "5";
        $sp = ($sp - %c5e);
        %707 = "1";
        %69 = ($sp + %707);
        %c8 = stack[%69];
        jump %c8;
    }
}

func func.random_int {
    proc #68 {
        %bc = "5";
        $sp = ($sp + %bc);
        %b74 = "0";
        %07b = ($sp - %b74);
        %b3f = "2";
        %63 = ($sp - %b3f);
        %cf = stack[%63];
        %d0 = "1";
        %abc = ($sp - %d0);
        %11 = stack[%abc];
        stack[%07b] = (%cf <random> %11);
        %6b = "0";
        %e51 = ($sp - %6b);
        %b1 = stack[%e51];
        %a3e = "3";
        %71c = ($sp - %a3e);
        %693 = stack[%71c];
        %c6 = "0";
        %48 = (%693 + %c6);
        stack[%48] = %b1;
        %acd = "5";
        $sp = ($sp - %acd);
        %7f = "1";
        %a89 = ($sp + %7f);
        %e9 = stack[%a89];
        jump %e9;
    }
}

func func.random_uint {
    proc #03 {
        %810 = "5";
        $sp = ($sp + %810);
        %f1 = "0";
        %dc = ($sp - %f1);
        %a77 = "2";
        %99 = ($sp - %a77);
        %df1 = stack[%99];
        %9fb = "1";
        %84 = ($sp - %9fb);
        %7f5 = stack[%84];
        stack[%dc] = (%df1 <random> %7f5);
        %22 = "0";
        %8f2 = ($sp - %22);
        %10c = stack[%8f2];
        %a68 = "3";
        %af = ($sp - %a68);
        %50 = stack[%af];
        %9b = "0";
        %293 = (%50 + %9b);
        stack[%293] = %10c;
        %5a = "5";
        $sp = ($sp - %5a);
        %9fa = "1";
        %b2 = ($sp + %9fa);
        %87 = stack[%b2];
        jump %87;
    }
}