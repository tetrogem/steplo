main {
    proc #d5 {
        $sp = "-1";
        %95 = #2f;
        jump %95;
    }
}

func main {
    proc #2f {
        %67 = "5";
        $sp = ($sp + %67);
        %0c = "3";
        %ac = ($sp - %0c);
        %1c = "2";
        %36 = ($sp + %1c);
        stack[%36] = %ac;
        %f1 = "4";
        %43 = "3";
        %ce = ($sp + %43);
        stack[%ce] = %f1;
        %f4 = "4";
        %70 = "4";
        %12 = ($sp + %70);
        stack[%12] = %f4;
        %ae = "1";
        %7f = ($sp + %ae);
        %75 = #f5;
        stack[%7f] = %75;
        %9d = #b9;
        jump %9d;
    }

    proc #f5 {
        %99 = "1";
        %a4 = ($sp - %99);
        %a2 = "2";
        %4d = ($sp + %a2);
        stack[%4d] = %a4;
        %e6 = "5";
        %d6 = "3";
        %8f = ($sp + %d6);
        stack[%8f] = %e6;
        %93 = "8";
        %23 = "4";
        %96 = ($sp + %23);
        stack[%96] = %93;
        %59 = "1";
        %8c = ($sp + %59);
        %64 = #58;
        stack[%8c] = %64;
        %73 = #b9;
        jump %73;
    }

    proc #58 {
        %82 = "3";
        %1e = ($sp - %82);
        %29 = "2";
        %18 = ($sp + %29);
        stack[%18] = %1e;
        %55 = "Rect 1";
        %57 = "3";
        %6f = ($sp + %57);
        stack[%6f] = %55;
        %1c7 = "1";
        %51 = ($sp + %1c7);
        %f9 = #43b;
        stack[%51] = %f9;
        %4c = #cb;
        jump %4c;
    }

    proc #43b {
        %8a = "1";
        %f7 = ($sp - %8a);
        %52 = "2";
        %e4 = ($sp + %52);
        stack[%e4] = %f7;
        %aa = "Rect 2";
        %9c = "3";
        %22 = ($sp + %9c);
        stack[%22] = %aa;
        %b4 = "1";
        %fd = ($sp + %b4);
        %579 = #c8;
        stack[%fd] = %579;
        %960 = #cb;
        jump %960;
    }

    proc #c8 {
        %80 = "Done!";
        %78 = "2";
        %02 = ($sp + %78);
        stack[%02] = %80;
        %48 = "1";
        %21 = ($sp + %48);
        %27 = #ec;
        stack[%21] = %27;
        %b97 = #da;
        jump %b97;
    }

    proc #ec {
        exit;
    }
}

func func.Rect_new {
    proc #b9 {
        %6e = "4";
        $sp = ($sp + %6e);
        %3e = "1";
        %16 = ($sp - %3e);
        %5c = stack[%16];
        %8c5 = "2";
        %a1 = ($sp - %8c5);
        %71 = stack[%a1];
        %42 = "0";
        %72 = (%71 + %42);
        stack[%72] = %5c;
        %33 = "0";
        %59a = ($sp - %33);
        %1ee = stack[%59a];
        %49 = "2";
        %1f = ($sp - %49);
        %46 = stack[%1f];
        %ed = "1";
        %98 = (%46 + %ed);
        stack[%98] = %1ee;
        %aaa = "4";
        $sp = ($sp - %aaa);
        %97 = "1";
        %ba = ($sp + %97);
        %c0 = stack[%ba];
        jump %c0;
    }
}

func func.Rect_width {
    proc #a2d {
        %69 = "3";
        $sp = ($sp + %69);
        %029 = "0";
        %a3 = "0";
        %9a = ($sp - %a3);
        %11 = stack[%9a];
        %68 = (%11 + %029);
        %4e = stack[%68];
        %da6 = "1";
        %90 = ($sp - %da6);
        %d6f = stack[%90];
        %bd = "0";
        %a9 = (%d6f + %bd);
        stack[%a9] = %4e;
        %6a = "3";
        $sp = ($sp - %6a);
        %6e1 = "1";
        %bb = ($sp + %6e1);
        %a3e = stack[%bb];
        jump %a3e;
    }
}

func func.Rect_height {
    proc #09 {
        %19 = "3";
        $sp = ($sp + %19);
        %a44 = "1";
        %a9a = "0";
        %01 = ($sp - %a9a);
        %e2 = stack[%01];
        %b2 = (%e2 + %a44);
        %6a0 = stack[%b2];
        %dc = "1";
        %19f = ($sp - %dc);
        %32 = stack[%19f];
        %4b = "0";
        %29c = (%32 + %4b);
        stack[%29c] = %6a0;
        %952 = "3";
        $sp = ($sp - %952);
        %14 = "1";
        %7b = ($sp + %14);
        %62 = stack[%7b];
        jump %62;
    }
}

func func.Rect_area {
    proc #b3 {
        %b5 = "5";
        $sp = ($sp + %b5);
        %39 = "1";
        %03 = ($sp - %39);
        %44 = "2";
        %8b = ($sp + %44);
        stack[%8b] = %03;
        %e2e = "2";
        %5b = ($sp - %e2e);
        %437 = stack[%5b];
        %1a = "3";
        %ac8 = ($sp + %1a);
        stack[%ac8] = %437;
        %d8 = "1";
        %592 = ($sp + %d8);
        %b6 = #d50;
        stack[%592] = %b6;
        %491 = #a2d;
        jump %491;
    }

    proc #d50 {
        %3a = "0";
        %e7 = ($sp - %3a);
        %1f3 = "2";
        %8d = ($sp + %1f3);
        stack[%8d] = %e7;
        %6c = "2";
        %1e6 = ($sp - %6c);
        %c9 = stack[%1e6];
        %39f = "3";
        %59d = ($sp + %39f);
        stack[%59d] = %c9;
        %af = "1";
        %5d = ($sp + %af);
        %6d = #78c;
        stack[%5d] = %6d;
        %81 = #09;
        jump %81;
    }

    proc #78c {
        %71d = "1";
        %d1 = ($sp - %71d);
        %516 = stack[%d1];
        %7a = "0";
        %c5 = ($sp - %7a);
        %3f = stack[%c5];
        %73a = (%516 * %3f);
        %04 = "3";
        %f8 = ($sp - %04);
        %14c = stack[%f8];
        %10 = "0";
        %15 = (%14c + %10);
        stack[%15] = %73a;
        %0d = "5";
        $sp = ($sp - %0d);
        %de = "1";
        %012 = ($sp + %de);
        %a7 = stack[%012];
        jump %a7;
    }
}

func func.Rect_perimeter {
    proc #495 {
        %3a2 = "5";
        $sp = ($sp + %3a2);
        %15c = "1";
        %7a8 = ($sp - %15c);
        %87 = "2";
        %06 = ($sp + %87);
        stack[%06] = %7a8;
        %cf = "2";
        %7d = ($sp - %cf);
        %c7 = stack[%7d];
        %d15 = "3";
        %c3 = ($sp + %d15);
        stack[%c3] = %c7;
        %e21 = "1";
        %ca = ($sp + %e21);
        %5df = #ad;
        stack[%ca] = %5df;
        %103 = #a2d;
        jump %103;
    }

    proc #ad {
        %b7 = "0";
        %0c6 = ($sp - %b7);
        %336 = "2";
        %37 = ($sp + %336);
        stack[%37] = %0c6;
        %3b = "2";
        %10a = ($sp - %3b);
        %022 = stack[%10a];
        %bf = "3";
        %ff = ($sp + %bf);
        stack[%ff] = %022;
        %a47 = "1";
        %b49 = ($sp + %a47);
        %0a = #76;
        stack[%b49] = %0a;
        %b1 = #09;
        jump %b1;
    }

    proc #76 {
        %372 = "1";
        %39a = ($sp - %372);
        %17 = stack[%39a];
        %37b = "2";
        %a18 = (%17 * %37b);
        %90d = "1";
        %717 = ($sp - %90d);
        %26 = "0";
        %7c = (%717 + %26);
        stack[%7c] = %a18;
        %992 = "0";
        %afd = ($sp - %992);
        %d8e = stack[%afd];
        %2a = "2";
        %53 = (%d8e * %2a);
        %a36 = "0";
        %67e = ($sp - %a36);
        %75c = "0";
        %8e = (%67e + %75c);
        stack[%8e] = %53;
        %dd = "1";
        %d65 = ($sp - %dd);
        %ce7 = stack[%d65];
        %5e = "0";
        %441 = ($sp - %5e);
        %538 = stack[%441];
        %1ed = (%ce7 + %538);
        %3b1 = "3";
        %a6 = ($sp - %3b1);
        %f4b = stack[%a6];
        %3a1 = "0";
        %0c2 = (%f4b + %3a1);
        stack[%0c2] = %1ed;
        %0af = "5";
        $sp = ($sp - %0af);
        %7d7 = "1";
        %79 = ($sp + %7d7);
        %27c = stack[%79];
        jump %27c;
    }
}

func func.Rect_print_info {
    proc #cb {
        %6ae = "5";
        $sp = ($sp + %6ae);
        %f78 = "1";
        %338 = ($sp - %f78);
        %e5 = "2";
        %77 = ($sp + %e5);
        stack[%77] = %338;
        %47 = "3";
        %0a1 = ($sp - %47);
        %3f0 = stack[%0a1];
        %97d = "3";
        %221 = ($sp + %97d);
        stack[%221] = %3f0;
        %713 = "1";
        %420 = ($sp + %713);
        %180 = #c7e;
        stack[%420] = %180;
        %34 = #a2d;
        jump %34;
    }

    proc #c7e {
        %033 = "0";
        %fe = ($sp - %033);
        %3723 = "2";
        %2e = ($sp + %3723);
        stack[%2e] = %fe;
        %9d5 = "3";
        %30 = ($sp - %9d5);
        %31 = stack[%30];
        %680 = "3";
        %3c = ($sp + %680);
        stack[%3c] = %31;
        %0afc = "1";
        %9e = ($sp + %0afc);
        %0c24 = #dcf;
        stack[%9e] = %0c24;
        %df = #09;
        jump %df;
    }

    proc #dcf {
        %fc = "2";
        %998 = ($sp - %fc);
        %04f = stack[%998];
        %0e = " dimensions: ";
        %6b = (%04f ~ %0e);
        %424 = "1";
        %813 = ($sp - %424);
        %e45 = stack[%813];
        %b0 = (%6b ~ %e45);
        %466 = " x ";
        %70e = (%b0 ~ %466);
        %db = "0";
        %447 = ($sp - %db);
        %3d = stack[%447];
        %93a = (%70e ~ %3d);
        %698 = "2";
        %3ec = ($sp + %698);
        stack[%3ec] = %93a;
        %a0 = "1";
        %7cf = ($sp + %a0);
        %3ee = #b6c;
        stack[%7cf] = %3ee;
        %d3 = #da;
        jump %d3;
    }

    proc #b6c {
        %ce2 = "1";
        %9a9 = ($sp - %ce2);
        %f3 = "2";
        %68a = ($sp + %f3);
        stack[%68a] = %9a9;
        %2c = "3";
        %dbb = ($sp - %2c);
        %9e8 = stack[%dbb];
        %19c = "3";
        %463 = ($sp + %19c);
        stack[%463] = %9e8;
        %3ec9 = "1";
        %dca = ($sp + %3ec9);
        %191 = #8e0;
        stack[%dca] = %191;
        %d64 = #495;
        jump %d64;
    }

    proc #8e0 {
        %50 = "2";
        %027 = ($sp - %50);
        %66 = stack[%027];
        %d0 = " perimeter: ";
        %f2 = (%66 ~ %d0);
        %429 = "1";
        %aac = ($sp - %429);
        %88 = stack[%aac];
        %bfa = (%f2 ~ %88);
        %8fe = "2";
        %686 = ($sp + %8fe);
        stack[%686] = %bfa;
        %c79 = "1";
        %1c6 = ($sp + %c79);
        %675 = #41;
        stack[%1c6] = %675;
        %020 = #da;
        jump %020;
    }

    proc #41 {
        %f18 = "1";
        %8ec = ($sp - %f18);
        %c1 = "2";
        %7da = ($sp + %c1);
        stack[%7da] = %8ec;
        %a22 = "3";
        %7ce = ($sp - %a22);
        %d4 = stack[%7ce];
        %934 = "3";
        %769 = ($sp + %934);
        stack[%769] = %d4;
        %aab = "1";
        %bc = ($sp + %aab);
        %cfc = #ecb;
        stack[%bc] = %cfc;
        %cb9 = #b3;
        jump %cb9;
    }

    proc #ecb {
        %1a6 = "2";
        %5a = ($sp - %1a6);
        %52c = stack[%5a];
        %931 = " area: ";
        %9b = (%52c ~ %931);
        %238 = "1";
        %12b = ($sp - %238);
        %d33 = stack[%12b];
        %c59 = (%9b ~ %d33);
        %490 = "2";
        %0b = ($sp + %490);
        stack[%0b] = %c59;
        %975 = "1";
        %2c9 = ($sp + %975);
        %904 = #4dc;
        stack[%2c9] = %904;
        %c4 = #da;
        jump %c4;
    }

    proc #4dc {
        %e3 = "5";
        $sp = ($sp - %e3);
        %7177 = "1";
        %20 = ($sp + %7177);
        %d4e = stack[%20];
        jump %d4e;
    }
}

func func.out {
    proc #da {
        %171 = "2";
        $sp = ($sp + %171);
        %84 = "0";
        %f97 = ($sp - %84);
        %b49a = stack[%f97];
        out %b49a;
        %771 = "2";
        $sp = ($sp - %771);
        %66e = "1";
        %8f2 = ($sp + %66e);
        %00 = stack[%8f2];
        jump %00;
    }
}

func func.in {
    proc #ef {
        %58a = "3";
        $sp = ($sp + %58a);
        %d9 = "0";
        %348 = ($sp - %d9);
        in;
        stack[%348] = $answer;
        %57f = "0";
        %3c9 = ($sp - %57f);
        %28 = stack[%3c9];
        %b65 = "1";
        %e1 = ($sp - %b65);
        %f16 = stack[%e1];
        %6f8 = "0";
        %157 = (%f16 + %6f8);
        stack[%157] = %28;
        %aed = "3";
        $sp = ($sp - %aed);
        %909 = "1";
        %2d = ($sp + %909);
        %640 = stack[%2d];
        jump %640;
    }
}