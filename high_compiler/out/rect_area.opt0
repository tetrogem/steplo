main {
    proc #c1 {
        $sp = "-1";
        %e8 = #b2;
        jump %e8;
    }
}

func main {
    proc #b2 {
        %12 = "5";
        $sp = ($sp + %12);
        %7d = "3";
        %78 = ($sp - %7d);
        %3d = "2";
        %0d = ($sp + %3d);
        stack[%0d] = %78;
        %5a = "4";
        %57 = "3";
        %1a = ($sp + %57);
        stack[%1a] = %5a;
        %38 = "4";
        %7e = "4";
        %a7 = ($sp + %7e);
        stack[%a7] = %38;
        %6b = "1";
        %d7 = ($sp + %6b);
        %6b7 = #f4;
        stack[%d7] = %6b7;
        %89 = #b3;
        jump %89;
    }

    proc #f4 {
        %92 = "1";
        %a6 = ($sp - %92);
        %fe = "2";
        %33 = ($sp + %fe);
        stack[%33] = %a6;
        %fa = "5";
        %a6e = "3";
        %03 = ($sp + %a6e);
        stack[%03] = %fa;
        %dd = "8";
        %64 = "4";
        %56 = ($sp + %64);
        stack[%56] = %dd;
        %e9 = "1";
        %1e = ($sp + %e9);
        %3d5 = #0b;
        stack[%1e] = %3d5;
        %e3 = #b3;
        jump %e3;
    }

    proc #0b {
        %24 = "3";
        %a4 = ($sp - %24);
        %784 = "2";
        %0e = ($sp + %784);
        stack[%0e] = %a4;
        %10 = "Rect 1";
        %17 = "3";
        %8f = ($sp + %17);
        stack[%8f] = %10;
        %18 = "1";
        %3e = ($sp + %18);
        %90 = #75;
        stack[%3e] = %90;
        %dc = #123;
        jump %dc;
    }

    proc #75 {
        %d5 = "1";
        %df = ($sp - %d5);
        %1d = "2";
        %63 = ($sp + %1d);
        stack[%63] = %df;
        %9b = "Rect 2";
        %16 = "3";
        %53 = ($sp + %16);
        stack[%53] = %9b;
        %920 = "1";
        %6a = ($sp + %920);
        %09 = #8e;
        stack[%6a] = %09;
        %be = #123;
        jump %be;
    }

    proc #8e {
        %0c = "Done!";
        %01 = "2";
        %5f = ($sp + %01);
        stack[%5f] = %0c;
        %31 = "1";
        %636 = ($sp + %31);
        %5b = #cb;
        stack[%636] = %5b;
        %67 = #fa4;
        jump %67;
    }

    proc #cb {
        exit;
    }
}

func func.Rect_new {
    proc #b3 {
        %ea = "4";
        $sp = ($sp + %ea);
        %61 = "1";
        %e6 = ($sp - %61);
        %24d = stack[%e6];
        %5e = "2";
        %ee = ($sp - %5e);
        %56a = stack[%ee];
        %8a = "0";
        %a1 = (%56a + %8a);
        stack[%a1] = %24d;
        %94 = "0";
        %e7 = ($sp - %94);
        %01b = stack[%e7];
        %1b = "2";
        %c2 = ($sp - %1b);
        %6e = stack[%c2];
        %11 = "1";
        %7e9 = (%6e + %11);
        stack[%7e9] = %01b;
        %81 = "4";
        $sp = ($sp - %81);
        %a0 = "1";
        %25 = ($sp + %a0);
        %52 = stack[%25];
        jump %52;
    }
}

func func.Rect_width {
    proc #ce {
        %904 = "3";
        $sp = ($sp + %904);
        %ee5 = "0";
        %8d = "0";
        %31e = ($sp - %8d);
        %335 = stack[%31e];
        %ae = (%335 + %ee5);
        %6f = stack[%ae];
        %e4 = "1";
        %a7a = ($sp - %e4);
        %4b = stack[%a7a];
        %ba = "0";
        %dd8 = (%4b + %ba);
        stack[%dd8] = %6f;
        %bd = "3";
        $sp = ($sp - %bd);
        %47 = "1";
        %46 = ($sp + %47);
        %cf = stack[%46];
        jump %cf;
    }
}

func func.Rect_height {
    proc #6e0 {
        %20 = "3";
        $sp = ($sp + %20);
        %45 = "1";
        %4a = "0";
        %c0 = ($sp - %4a);
        %6d = stack[%c0];
        %1b6 = (%6d + %45);
        %6f4 = stack[%1b6];
        %641 = "1";
        %d79 = ($sp - %641);
        %0ea = stack[%d79];
        %02 = "0";
        %4af = (%0ea + %02);
        stack[%4af] = %6f4;
        %2a = "3";
        $sp = ($sp - %2a);
        %bae = "1";
        %d55 = ($sp + %bae);
        %d1 = stack[%d55];
        jump %d1;
    }
}

func func.Rect_area {
    proc #73 {
        %72 = "5";
        $sp = ($sp + %72);
        %cc = "1";
        %a5 = ($sp - %cc);
        %7d0 = "2";
        %08 = ($sp + %7d0);
        stack[%08] = %a5;
        %5e1 = "2";
        %da = ($sp - %5e1);
        %8c = stack[%da];
        %108 = "3";
        %0c2 = ($sp + %108);
        stack[%0c2] = %8c;
        %330 = "1";
        %be4 = ($sp + %330);
        %d553 = #a3;
        stack[%be4] = %d553;
        %bde = #ce;
        jump %bde;
    }

    proc #a3 {
        %f5 = "0";
        %1e1 = ($sp - %f5);
        %082 = "2";
        %59 = ($sp + %082);
        stack[%59] = %1e1;
        %e32 = "2";
        %39 = ($sp - %e32);
        %1c = stack[%39];
        %57e = "3";
        %08f = ($sp + %57e);
        stack[%08f] = %1c;
        %bc = "1";
        %29 = ($sp + %bc);
        %70 = #ccf;
        stack[%29] = %70;
        %4b6 = #6e0;
        jump %4b6;
    }

    proc #ccf {
        %dad = "1";
        %2ab = ($sp - %dad);
        %8b = stack[%2ab];
        %a4c = "0";
        %ee3 = ($sp - %a4c);
        %82 = stack[%ee3];
        %23 = (%8b * %82);
        %ac = "3";
        %cd = ($sp - %ac);
        %44 = stack[%cd];
        %e5 = "0";
        %6ba = (%44 + %e5);
        stack[%6ba] = %23;
        %7c = "5";
        $sp = ($sp - %7c);
        %8c3 = "1";
        %f0 = ($sp + %8c3);
        %49 = stack[%f0];
        jump %49;
    }
}

func func.Rect_perimeter {
    proc #ec {
        %04 = "5";
        $sp = ($sp + %04);
        %cb0 = "1";
        %3e8 = ($sp - %cb0);
        %b34 = "2";
        %f2 = ($sp + %b34);
        stack[%f2] = %3e8;
        %a64 = "2";
        %78b = ($sp - %a64);
        %f03 = stack[%78b];
        %eab = "3";
        %b8 = ($sp + %eab);
        stack[%b8] = %f03;
        %1f = "1";
        %62 = ($sp + %1f);
        %05 = #2d;
        stack[%62] = %05;
        %20b = #ce;
        jump %20b;
    }

    proc #2d {
        %05b = "0";
        %66 = ($sp - %05b);
        %e1 = "2";
        %af = ($sp + %e1);
        stack[%af] = %66;
        %e64 = "2";
        %79 = ($sp - %e64);
        %19 = stack[%79];
        %233 = "3";
        %4f = ($sp + %233);
        stack[%4f] = %19;
        %fe0 = "1";
        %a0d = ($sp + %fe0);
        %1f2 = #781;
        stack[%a0d] = %1f2;
        %a55 = #6e0;
        jump %a55;
    }

    proc #781 {
        %c8 = "1";
        %ad = ($sp - %c8);
        %fe8 = stack[%ad];
        %aa = "2";
        %1cb = (%fe8 * %aa);
        %3b = "1";
        %34 = ($sp - %3b);
        %d5b = "0";
        %85 = (%34 + %d5b);
        stack[%85] = %1cb;
        %5f0 = "0";
        %86 = ($sp - %5f0);
        %3f = stack[%86];
        %48 = "2";
        %179 = (%3f * %48);
        %06 = "0";
        %116 = ($sp - %06);
        %9c = "0";
        %9c9 = (%116 + %9c);
        stack[%9c9] = %179;
        %a2 = "1";
        %4d = ($sp - %a2);
        %0d1 = stack[%4d];
        %7da = "0";
        %8f4 = ($sp - %7da);
        %c1e = stack[%8f4];
        %4a0 = (%0d1 + %c1e);
        %a4d = "3";
        %670 = ($sp - %a4d);
        %9a = stack[%670];
        %8c5 = "0";
        %57d = (%9a + %8c5);
        stack[%57d] = %4a0;
        %4bd = "5";
        $sp = ($sp - %4bd);
        %333 = "1";
        %c4 = ($sp + %333);
        %68 = stack[%c4];
        jump %68;
    }
}

func func.Rect_print_info {
    proc #123 {
        %de = "5";
        $sp = ($sp + %de);
        %824 = "1";
        %8f6 = ($sp - %824);
        %343 = "2";
        %5ac = ($sp + %343);
        stack[%5ac] = %8f6;
        %5f2 = "3";
        %d1e = ($sp - %5f2);
        %35 = stack[%d1e];
        %9f = "3";
        %ec6 = ($sp + %9f);
        stack[%ec6] = %35;
        %453 = "1";
        %0f = ($sp + %453);
        %0da = #20bb;
        stack[%0f] = %0da;
        %88 = #ce;
        jump %88;
    }

    proc #20bb {
        %1e6 = "0";
        %ef = ($sp - %1e6);
        %067 = "2";
        %eb = ($sp + %067);
        stack[%eb] = %ef;
        %5fd = "3";
        %87 = ($sp - %5fd);
        %67f = stack[%87];
        %030 = "3";
        %42 = ($sp + %030);
        stack[%42] = %67f;
        %ce3 = "1";
        %647 = ($sp + %ce3);
        %65 = #3ee;
        stack[%647] = %65;
        %659 = #6e0;
        jump %659;
    }

    proc #3ee {
        %04e = "2";
        %d6 = ($sp - %04e);
        %a6f = stack[%d6];
        %67b = " dimensions: ";
        %6b4 = (%a6f ~ %67b);
        %799 = "1";
        %635 = ($sp - %799);
        %4d8 = stack[%635];
        %97 = (%6b4 ~ %4d8);
        %14 = " x ";
        %4a1 = (%97 ~ %14);
        %637 = "0";
        %db = ($sp - %637);
        %6ff = stack[%db];
        %89d = (%4a1 ~ %6ff);
        %0a = "2";
        %083 = ($sp + %0a);
        stack[%083] = %89d;
        %7d04 = "1";
        %eb4 = ($sp + %7d04);
        %47c = #63f;
        stack[%eb4] = %47c;
        %b4 = #fa4;
        jump %b4;
    }

    proc #63f {
        %13 = "1";
        %30 = ($sp - %13);
        %76 = "2";
        %bb = ($sp + %76);
        stack[%bb] = %30;
        %75a = "3";
        %d3 = ($sp - %75a);
        %4e = stack[%d3];
        %b80 = "3";
        %ab = ($sp + %b80);
        stack[%ab] = %4e;
        %5c = "1";
        %530 = ($sp + %5c);
        %297 = #b5;
        stack[%530] = %297;
        %83 = #ec;
        jump %83;
    }

    proc #b5 {
        %764 = "2";
        %fb = ($sp - %764);
        %6a9 = stack[%fb];
        %101 = " perimeter: ";
        %7c7 = (%6a9 ~ %101);
        %6d4 = "1";
        %afa = ($sp - %6d4);
        %70a = stack[%afa];
        %1a2 = (%7c7 ~ %70a);
        %9cd = "2";
        %15 = ($sp + %9cd);
        stack[%15] = %1a2;
        %8cd = "1";
        %a7d = ($sp + %8cd);
        %1fe = #48e;
        stack[%a7d] = %1fe;
        %1e3 = #fa4;
        jump %1e3;
    }

    proc #48e {
        %5fdb = "1";
        %d9 = ($sp - %5fdb);
        %7d7 = "2";
        %2e = ($sp + %7d7);
        stack[%2e] = %d9;
        %5cb = "3";
        %8ca = ($sp - %5cb);
        %b1 = stack[%8ca];
        %aa4 = "3";
        %a42 = ($sp + %aa4);
        stack[%a42] = %b1;
        %c01 = "1";
        %119 = ($sp + %c01);
        %08a = #8ec;
        stack[%119] = %08a;
        %ca = #73;
        jump %ca;
    }

    proc #8ec {
        %a9 = "2";
        %c4c = ($sp - %a9);
        %60 = stack[%c4c];
        %678 = " area: ";
        %9a7 = (%60 ~ %678);
        %7b = "1";
        %2ad = ($sp - %7b);
        %bb0 = stack[%2ad];
        %fd = (%9a7 ~ %bb0);
        %f2c = "2";
        %168 = ($sp + %f2c);
        stack[%168] = %fd;
        %e2 = "1";
        %0a6 = ($sp + %e2);
        %28 = #ba8;
        stack[%0a6] = %28;
        %751 = #fa4;
        jump %751;
    }

    proc #ba8 {
        %a36 = "5";
        $sp = ($sp - %a36);
        %9d = "1";
        %70b = ($sp + %9d);
        %e58 = stack[%70b];
        jump %e58;
    }
}

func func.out {
    proc #fa4 {
        %832 = "2";
        $sp = ($sp + %832);
        %fb2 = "0";
        %ff = ($sp - %fb2);
        %4f9 = stack[%ff];
        out %4f9;
        %fc = "2";
        $sp = ($sp - %fc);
        %dc1 = "1";
        %f6 = ($sp + %dc1);
        %bc4 = stack[%f6];
        jump %bc4;
    }
}

func func.in {
    proc #85b {
        %da0 = "3";
        $sp = ($sp + %da0);
        %b39 = "0";
        %43 = ($sp - %b39);
        in;
        stack[%43] = $answer;
        %399 = "0";
        %ea6 = ($sp - %399);
        %4a3 = stack[%ea6];
        %bb7 = "1";
        %43a = ($sp - %bb7);
        %bae6 = stack[%43a];
        %e0 = "0";
        %11c = (%bae6 + %e0);
        stack[%11c] = %4a3;
        %b6 = "3";
        $sp = ($sp - %b6);
        %ae5 = "1";
        %03c = ($sp + %ae5);
        %f1 = stack[%03c];
        jump %f1;
    }
}

func func.random {
    proc #761 {
        %102 = "5";
        $sp = ($sp + %102);
        %6a2 = "0";
        %95 = ($sp - %6a2);
        %07 = "2";
        %1b8 = ($sp - %07);
        %682 = stack[%1b8];
        %9d7 = "1";
        %469 = ($sp - %9d7);
        %605 = stack[%469];
        stack[%95] = (%682 <random> %605);
        %f2e = "0";
        %3350 = ($sp - %f2e);
        %baf = stack[%3350];
        %b8e = "3";
        %463 = ($sp - %b8e);
        %5d = stack[%463];
        %522 = "0";
        %eae = (%5d + %522);
        stack[%eae] = %baf;
        %293 = "5";
        $sp = ($sp - %293);
        %d65 = "1";
        %0ec = ($sp + %d65);
        %fd1 = stack[%0ec];
        jump %fd1;
    }
}