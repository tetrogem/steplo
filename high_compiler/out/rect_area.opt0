main {
    proc #78 {
        $sp = "-1";
        %f7 = #ca;
        jump %f7;
    }
}

func main {
    proc #ca {
        %27 = "5";
        $sp = ($sp + %27);
        %0d = "3";
        %01 = ($sp - %0d);
        %f3 = "2";
        %92 = ($sp + %f3);
        stack[%92] = %01;
        %1b = "4";
        %82 = "3";
        %38 = ($sp + %82);
        stack[%38] = %1b;
        %41 = "4";
        %b1 = "4";
        %6f = ($sp + %b1);
        stack[%6f] = %41;
        %c4 = "1";
        %7a = ($sp + %c4);
        %b6 = #f6;
        stack[%7a] = %b6;
        %f78 = #ed;
        jump %f78;
    }

    proc #f6 {
        %33 = "1";
        %89 = ($sp - %33);
        %64 = "2";
        %cb = ($sp + %64);
        stack[%cb] = %89;
        %40 = "5";
        %cf = "3";
        %6fc = ($sp + %cf);
        stack[%6fc] = %40;
        %cd = "8";
        %dd = "4";
        %ec = ($sp + %dd);
        stack[%ec] = %cd;
        %3b = "1";
        %88 = ($sp + %3b);
        %3d = #6d;
        stack[%88] = %3d;
        %f4 = #ed;
        jump %f4;
    }

    proc #6d {
        %72 = "3";
        %91 = ($sp - %72);
        %7aa = "2";
        %7e = ($sp + %7aa);
        stack[%7e] = %91;
        %6a = "Rect 1";
        %9b = "3";
        %c1 = ($sp + %9b);
        stack[%c1] = %6a;
        %e5 = "1";
        %12 = ($sp + %e5);
        %f2 = #c3;
        stack[%12] = %f2;
        %45 = #272;
        jump %45;
    }

    proc #c3 {
        %a5 = "1";
        %8a = ($sp - %a5);
        %e4 = "2";
        %39 = ($sp + %e4);
        stack[%39] = %8a;
        %56 = "Rect 2";
        %899 = "3";
        %5f = ($sp + %899);
        stack[%5f] = %56;
        %cc = "1";
        %8d = ($sp + %cc);
        %60 = #02;
        stack[%8d] = %60;
        %05 = #272;
        jump %05;
    }

    proc #02 {
        %7e7 = "Done!";
        %fd = "2";
        %ce = ($sp + %fd);
        stack[%ce] = %7e7;
        %06 = "1";
        %e2 = ($sp + %06);
        %4d = #10;
        stack[%e2] = %4d;
        %47 = #8e;
        jump %47;
    }

    proc #10 {
        exit;
    }
}

func func.Rect_new {
    proc #ed {
        %a5d = "4";
        $sp = ($sp + %a5d);
        %9b4 = "1";
        %335 = ($sp - %9b4);
        %b1b = stack[%335];
        %87 = "2";
        %61 = ($sp - %87);
        %8b = stack[%61];
        %b7 = "0";
        %cb5 = (%8b + %b7);
        stack[%cb5] = %b1b;
        %3a = "0";
        %21 = ($sp - %3a);
        %cf1 = stack[%21];
        %08 = "2";
        %398 = ($sp - %08);
        %12a = stack[%398];
        %b16 = "1";
        %f47 = (%12a + %b16);
        stack[%f47] = %cf1;
        %22 = "4";
        $sp = ($sp - %22);
        %8ea = "1";
        %ac = ($sp + %8ea);
        %c3e = stack[%ac];
        jump %c3e;
    }
}

func func.Rect_width {
    proc #77 {
        %c2 = "3";
        $sp = ($sp + %c2);
        %26 = "0";
        %cb3 = "0";
        %4c = ($sp - %cb3);
        %8a9 = stack[%4c];
        %4f = (%8a9 + %26);
        %f5 = stack[%4f];
        %5c = "1";
        %7d = ($sp - %5c);
        %50 = stack[%7d];
        %13 = "0";
        %00 = (%50 + %13);
        stack[%00] = %f5;
        %42 = "3";
        $sp = ($sp - %42);
        %e55 = "1";
        %057 = ($sp + %e55);
        %e45 = stack[%057];
        jump %e45;
    }
}

func func.Rect_height {
    proc #bc {
        %6f9 = "3";
        $sp = ($sp + %6f9);
        %0575 = "1";
        %47f = "0";
        %3a7 = ($sp - %47f);
        %052 = stack[%3a7];
        %34 = (%052 + %0575);
        %b9 = stack[%34];
        %e7 = "1";
        %015 = ($sp - %e7);
        %267 = stack[%015];
        %44 = "0";
        %ac8 = (%267 + %44);
        stack[%ac8] = %b9;
        %f70 = "3";
        $sp = ($sp - %f70);
        %ba = "1";
        %de = ($sp + %ba);
        %18 = stack[%de];
        jump %18;
    }
}

func func.Rect_area {
    proc #ad {
        %74 = "5";
        $sp = ($sp + %74);
        %604 = "1";
        %f22 = ($sp - %604);
        %59 = "2";
        %f65 = ($sp + %59);
        stack[%f65] = %f22;
        %29 = "2";
        %de8 = ($sp - %29);
        %d5 = stack[%de8];
        %3a1 = "3";
        %e72 = ($sp + %3a1);
        stack[%e72] = %d5;
        %85 = "1";
        %73 = ($sp + %85);
        %5b = #226;
        stack[%73] = %5b;
        %07 = #77;
        jump %07;
    }

    proc #226 {
        %a3 = "0";
        %71 = ($sp - %a3);
        %53 = "2";
        %1c = ($sp + %53);
        stack[%1c] = %71;
        %263 = "2";
        %ae = ($sp - %263);
        %1f = stack[%ae];
        %81 = "3";
        %814 = ($sp + %81);
        stack[%814] = %1f;
        %aa = "1";
        %d0 = ($sp + %aa);
        %e4e = #595;
        stack[%d0] = %e4e;
        %a9 = #bc;
        jump %a9;
    }

    proc #595 {
        %341 = "1";
        %d1 = ($sp - %341);
        %1fe = stack[%d1];
        %ab = "0";
        %773 = ($sp - %ab);
        %19 = stack[%773];
        %f63 = (%1fe * %19);
        %7e0 = "3";
        %c35 = ($sp - %7e0);
        %f54 = stack[%c35];
        %bb = "0";
        %dc = (%f54 + %bb);
        stack[%dc] = %f63;
        %890 = "5";
        $sp = ($sp - %890);
        %2f = "1";
        %051 = ($sp + %2f);
        %76 = stack[%051];
        jump %76;
    }
}

func func.Rect_perimeter {
    proc #d8 {
        %b0 = "5";
        $sp = ($sp + %b0);
        %15 = "1";
        %a8 = ($sp - %15);
        %7b = "2";
        %79 = ($sp + %7b);
        stack[%79] = %a8;
        %13e = "2";
        %9d = ($sp - %13e);
        %75 = stack[%9d];
        %6e = "3";
        %5f0 = ($sp + %6e);
        stack[%5f0] = %75;
        %55 = "1";
        %fe = ($sp + %55);
        %880 = #c7;
        stack[%fe] = %880;
        %332 = #77;
        jump %332;
    }

    proc #c7 {
        %9d3 = "0";
        %43 = ($sp - %9d3);
        %69 = "2";
        %14 = ($sp + %69);
        stack[%14] = %43;
        %564 = "2";
        %a87 = ($sp - %564);
        %9d1 = stack[%a87];
        %f63d = "3";
        %9e = ($sp + %f63d);
        stack[%9e] = %9d1;
        %abe = "1";
        %2c = ($sp + %abe);
        %d6 = #ab2;
        stack[%2c] = %d6;
        %5d = #bc;
        jump %5d;
    }

    proc #ab2 {
        %80 = "1";
        %e78 = ($sp - %80);
        %26f = stack[%e78];
        %d9 = "2";
        %eb = (%26f * %d9);
        %858 = "1";
        %347 = ($sp - %858);
        %f6a = "0";
        %6a2 = (%347 + %f6a);
        stack[%6a2] = %eb;
        %82b = "0";
        %9f = ($sp - %82b);
        %41c = stack[%9f];
        %aba = "2";
        %6f2 = (%41c * %aba);
        %7f = "0";
        %760 = ($sp - %7f);
        %ff = "0";
        %7c = (%760 + %ff);
        stack[%7c] = %6f2;
        %64a = "1";
        %402 = ($sp - %64a);
        %1b5 = stack[%402];
        %7da = "0";
        %97 = ($sp - %7da);
        %6f25 = stack[%97];
        %a4 = (%1b5 + %6f25);
        %95 = "3";
        %3ae = ($sp - %95);
        %df = stack[%3ae];
        %a5d3 = "0";
        %bd = (%df + %a5d3);
        stack[%bd] = %a4;
        %fe1 = "5";
        $sp = ($sp - %fe1);
        %fe5 = "1";
        %bbd = ($sp + %fe5);
        %1b8 = stack[%bbd];
        jump %1b8;
    }
}

func func.Rect_print_info {
    proc #272 {
        %cc9 = "5";
        $sp = ($sp + %cc9);
        %806 = "1";
        %31 = ($sp - %806);
        %387 = "2";
        %38b = ($sp + %387);
        stack[%38b] = %31;
        %24 = "3";
        %568 = ($sp - %24);
        %82d = stack[%568];
        %0e = "3";
        %3c = ($sp + %0e);
        stack[%3c] = %82d;
        %a59 = "1";
        %1a = ($sp + %a59);
        %fa = #022;
        stack[%1a] = %fa;
        %807 = #77;
        jump %807;
    }

    proc #022 {
        %cd4 = "0";
        %9f5 = ($sp - %cd4);
        %22f = "2";
        %1cf = ($sp + %22f);
        stack[%1cf] = %9f5;
        %cce = "3";
        %ecc = ($sp - %cce);
        %16 = stack[%ecc];
        %9f2 = "3";
        %924 = ($sp + %9f2);
        stack[%924] = %16;
        %46 = "1";
        %b12 = ($sp + %46);
        %da = #d61;
        stack[%b12] = %da;
        %a94 = #bc;
        jump %a94;
    }

    proc #d61 {
        %399 = "2";
        %f9 = ($sp - %399);
        %c6 = stack[%f9];
        %502 = " dimensions: ";
        %32 = (%c6 ~ %502);
        %881 = "1";
        %107 = ($sp - %881);
        %5f8 = stack[%107];
        %d9e = (%32 ~ %5f8);
        %3f = " x ";
        %26c = (%d9e ~ %3f);
        %06c = "0";
        %8a1 = ($sp - %06c);
        %09 = stack[%8a1];
        %4e = (%26c ~ %09);
        %62 = "2";
        %90 = ($sp + %62);
        stack[%90] = %4e;
        %18c = "1";
        %9f9 = ($sp + %18c);
        %4b = #68;
        stack[%9f9] = %4b;
        %50b = #8e;
        jump %50b;
    }

    proc #68 {
        %94 = "1";
        %a80 = ($sp - %94);
        %6f8 = "2";
        %603 = ($sp + %6f8);
        stack[%603] = %a80;
        %d2 = "3";
        %b8 = ($sp - %d2);
        %a2 = stack[%b8];
        %915 = "3";
        %6ad = ($sp + %915);
        stack[%6ad] = %a2;
        %809 = "1";
        %748 = ($sp + %809);
        %2d = #e4c;
        stack[%748] = %2d;
        %066 = #d8;
        jump %066;
    }

    proc #e4c {
        %803 = "2";
        %b16a = ($sp - %803);
        %8b9 = stack[%b16a];
        %293 = " perimeter: ";
        %b3 = (%8b9 ~ %293);
        %6a24 = "1";
        %f94 = ($sp - %6a24);
        %cec = stack[%f94];
        %96 = (%b3 ~ %cec);
        %b11 = "2";
        %b70 = ($sp + %b11);
        stack[%b70] = %96;
        %99 = "1";
        %3c9 = ($sp + %99);
        %51 = #c8;
        stack[%3c9] = %51;
        %a36 = #8e;
        jump %a36;
    }

    proc #c8 {
        %c75 = "1";
        %6db = ($sp - %c75);
        %40c = "2";
        %d85 = ($sp + %40c);
        stack[%d85] = %6db;
        %f79 = "3";
        %aad = ($sp - %f79);
        %bf = stack[%aad];
        %faa = "3";
        %7484 = ($sp + %faa);
        stack[%7484] = %bf;
        %8b7 = "1";
        %d7 = ($sp + %8b7);
        %e6 = #3e;
        stack[%d7] = %e6;
        %1c2 = #ad;
        jump %1c2;
    }

    proc #3e {
        %5d9 = "2";
        %158 = ($sp - %5d9);
        %ff3 = stack[%158];
        %ca2 = " area: ";
        %db = (%ff3 ~ %ca2);
        %86 = "1";
        %99b = ($sp - %86);
        %de9 = stack[%99b];
        %8d3 = (%db ~ %de9);
        %55f = "2";
        %7d8 = ($sp + %55f);
        stack[%7d8] = %8d3;
        %458 = "1";
        %1f6 = ($sp + %458);
        %513 = #e69;
        stack[%1f6] = %513;
        %4bc = #8e;
        jump %4bc;
    }

    proc #e69 {
        %8dc = "5";
        $sp = ($sp - %8dc);
        %13e9 = "1";
        %2cb = ($sp + %13e9);
        %956 = stack[%2cb];
        jump %956;
    }
}

func func.out {
    proc #8e {
        %a0 = "2";
        $sp = ($sp + %a0);
        %730 = "0";
        %d3 = ($sp - %730);
        %78b = stack[%d3];
        out %78b;
        %8f = "2";
        $sp = ($sp - %8f);
        %b69 = "1";
        %8b5 = ($sp + %b69);
        %4cd = stack[%8b5];
        jump %4cd;
    }
}

func func.in {
    proc #fb {
        %3999 = "3";
        $sp = ($sp + %3999);
        %0515 = "0";
        %415 = ($sp - %0515);
        in;
        stack[%415] = $answer;
        %320 = "0";
        %f9b = ($sp - %320);
        %98 = stack[%f9b];
        %a7 = "1";
        %d66 = ($sp - %a7);
        %8c = stack[%d66];
        %8f0 = "0";
        %66 = (%8c + %8f0);
        stack[%66] = %98;
        %d92 = "3";
        $sp = ($sp - %d92);
        %436 = "1";
        %563 = ($sp + %436);
        %154 = stack[%563];
        jump %154;
    }
}