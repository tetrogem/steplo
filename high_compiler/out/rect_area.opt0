main {
    proc #f2 {
        $sp = "-1";
        %5c = #91;
        jump %5c;
    }
}

func main {
    proc #91 {
        %39 = "5";
        $sp = ($sp + %39);
        %60 = "3";
        %81 = ($sp - %60);
        %e5 = "2";
        %31 = ($sp + %e5);
        stack[%31] = %81;
        %90 = "4";
        %7a = "3";
        %0c = ($sp + %7a);
        stack[%0c] = %90;
        %d5 = "4";
        %de = "4";
        %6b = ($sp + %de);
        stack[%6b] = %d5;
        %d2 = "1";
        %6c = ($sp + %d2);
        %46 = #b2;
        stack[%6c] = %46;
        %2d = #4f;
        jump %2d;
    }

    proc #b2 {
        %4c = "1";
        %67 = ($sp - %4c);
        %f1 = "2";
        %c1 = ($sp + %f1);
        stack[%c1] = %67;
        %f6 = "5";
        %def = "3";
        %26 = ($sp + %def);
        stack[%26] = %f6;
        %1e = "8";
        %93 = "4";
        %8c = ($sp + %93);
        stack[%8c] = %1e;
        %4f0 = "1";
        %da = ($sp + %4f0);
        %84 = #a8;
        stack[%da] = %84;
        %7a7 = #4f;
        jump %7a7;
    }

    proc #a8 {
        %ed = "3";
        %2d7 = ($sp - %ed);
        %3f = "2";
        %915 = ($sp + %3f);
        stack[%915] = %2d7;
        %4d = "Rect 1";
        %47 = "3";
        %3f9 = ($sp + %47);
        stack[%3f9] = %4d;
        %be = "1";
        %e4 = ($sp + %be);
        %15 = #79;
        stack[%e4] = %15;
        %59 = #e5a;
        jump %59;
    }

    proc #79 {
        %61 = "1";
        %62 = ($sp - %61);
        %c2 = "2";
        %be5 = ($sp + %c2);
        stack[%be5] = %62;
        %ae = "Rect 2";
        %47f = "3";
        %82 = ($sp + %47f);
        stack[%82] = %ae;
        %311 = "1";
        %e7 = ($sp + %311);
        %b1 = #c3;
        stack[%e7] = %b1;
        %e8 = #e5a;
        jump %e8;
    }

    proc #c3 {
        %e1 = "Done!";
        %56 = "2";
        %70 = ($sp + %56);
        stack[%70] = %e1;
        %f64 = "1";
        %6ca = ($sp + %f64);
        %05 = #8a;
        stack[%6ca] = %05;
        %69 = #40;
        jump %69;
    }

    proc #8a {
        exit;
    }
}

func func.Rect_new {
    proc #4f {
        %a0 = "4";
        $sp = ($sp + %a0);
        %a1 = "1";
        %72 = ($sp - %a1);
        %cc = stack[%72];
        %5b = "2";
        %7c = ($sp - %5b);
        %ef = stack[%7c];
        %3c = "0";
        %19 = (%ef + %3c);
        stack[%19] = %cc;
        %32 = "0";
        %822 = ($sp - %32);
        %a3 = stack[%822];
        %6f = "2";
        %34 = ($sp - %6f);
        %b8 = stack[%34];
        %f8 = "1";
        %468 = (%b8 + %f8);
        stack[%468] = %a3;
        %34b = "4";
        $sp = ($sp - %34b);
        %848 = "1";
        %e6 = ($sp + %848);
        %56f = stack[%e6];
        jump %56f;
    }
}

func func.Rect_width {
    proc #b9 {
        %b1c = "3";
        $sp = ($sp + %b1c);
        %c0 = "0";
        %75 = "0";
        %ee = ($sp - %75);
        %f3 = stack[%ee];
        %3a = (%f3 + %c0);
        %34e = stack[%3a];
        %8c3 = "1";
        %6d = ($sp - %8c3);
        %b6 = stack[%6d];
        %51 = "0";
        %f9 = (%b6 + %51);
        stack[%f9] = %34e;
        %23 = "3";
        $sp = ($sp - %23);
        %a6 = "1";
        %04 = ($sp + %a6);
        %517 = stack[%04];
        jump %517;
    }
}

func func.Rect_height {
    proc #7a4 {
        %3b = "3";
        $sp = ($sp + %3b);
        %48 = "1";
        %7a8 = "0";
        %24 = ($sp - %7a8);
        %d0 = stack[%24];
        %f84 = (%d0 + %48);
        %b10 = stack[%f84];
        %8d = "1";
        %fa = ($sp - %8d);
        %eb = stack[%fa];
        %69e = "0";
        %ce = (%eb + %69e);
        stack[%ce] = %b10;
        %1a = "3";
        $sp = ($sp - %1a);
        %16 = "1";
        %b7 = ($sp + %16);
        %de2 = stack[%b7];
        jump %de2;
    }
}

func func.Rect_area {
    proc #11 {
        %fc = "5";
        $sp = ($sp + %fc);
        %f4 = "1";
        %9c = ($sp - %f4);
        %c4 = "2";
        %21 = ($sp + %c4);
        stack[%21] = %9c;
        %92 = "2";
        %16f = ($sp - %92);
        %14 = stack[%16f];
        %f97 = "3";
        %1b = ($sp + %f97);
        stack[%1b] = %14;
        %e0 = "1";
        %6d6 = ($sp + %e0);
        %38 = #a0c;
        stack[%6d6] = %38;
        %798 = #b9;
        jump %798;
    }

    proc #a0c {
        %78 = "0";
        %191 = ($sp - %78);
        %b5 = "2";
        %ca = ($sp + %b5);
        stack[%ca] = %191;
        %690 = "2";
        %a0b = ($sp - %690);
        %28 = stack[%a0b];
        %d0e = "3";
        %33 = ($sp + %d0e);
        stack[%33] = %28;
        %f0 = "1";
        %ea = ($sp + %f0);
        %28d = #aa;
        stack[%ea] = %28d;
        %6e = #7a4;
        jump %6e;
    }

    proc #aa {
        %3e = "1";
        %2e = ($sp - %3e);
        %a5 = stack[%2e];
        %20 = "0";
        %85 = ($sp - %20);
        %a7 = stack[%85];
        %a9 = (%a5 * %a7);
        %ab = "3";
        %264 = ($sp - %ab);
        %679 = stack[%264];
        %b0 = "0";
        %692 = (%679 + %b0);
        stack[%692] = %a9;
        %ac = "5";
        $sp = ($sp - %ac);
        %cf = "1";
        %30 = ($sp + %cf);
        %02 = stack[%30];
        jump %02;
    }
}

func func.Rect_perimeter {
    proc #c44 {
        %9e = "5";
        $sp = ($sp + %9e);
        %242 = "1";
        %4a = ($sp - %242);
        %2a = "2";
        %cb = ($sp + %2a);
        stack[%cb] = %4a;
        %54 = "2";
        %380 = ($sp - %54);
        %568 = stack[%380];
        %0f = "3";
        %e76 = ($sp + %0f);
        stack[%e76] = %568;
        %1915 = "1";
        %190 = ($sp + %1915);
        %b25 = #709;
        stack[%190] = %b25;
        %0fa = #b9;
        jump %0fa;
    }

    proc #709 {
        %282 = "0";
        %0a = ($sp - %282);
        %ad = "2";
        %8d0 = ($sp + %ad);
        stack[%8d0] = %0a;
        %d3 = "2";
        %ba = ($sp - %d3);
        %fd = stack[%ba];
        %59f = "3";
        %f16 = ($sp + %59f);
        stack[%f16] = %fd;
        %d28 = "1";
        %80 = ($sp + %d28);
        %c26 = #1917;
        stack[%80] = %c26;
        %7ad = #7a4;
        jump %7ad;
    }

    proc #1917 {
        %ae8 = "1";
        %60d = ($sp - %ae8);
        %147 = stack[%60d];
        %8f = "2";
        %fe = (%147 * %8f);
        %c48 = "1";
        %b20 = ($sp - %c48);
        %38c = "0";
        %27 = (%b20 + %38c);
        stack[%27] = %fe;
        %2b = "0";
        %908 = ($sp - %2b);
        %82c = stack[%908];
        %d4 = "2";
        %9e3 = (%82c * %d4);
        %52 = "0";
        %b13 = ($sp - %52);
        %c9 = "0";
        %2a2 = (%b13 + %c9);
        stack[%2a2] = %9e3;
        %8e = "1";
        %ff = ($sp - %8e);
        %5a = stack[%ff];
        %9d = "0";
        %8c1 = ($sp - %9d);
        %a5c = stack[%8c1];
        %37 = (%5a + %a5c);
        %a3b = "3";
        %386 = ($sp - %a3b);
        %bd = stack[%386];
        %95 = "0";
        %fac = (%bd + %95);
        stack[%fac] = %37;
        %e04 = "5";
        $sp = ($sp - %e04);
        %fc4 = "1";
        %dd = ($sp + %fc4);
        %3c5 = stack[%dd];
        jump %3c5;
    }
}

func func.Rect_print_info {
    proc #e5a {
        %159 = "5";
        $sp = ($sp + %159);
        %36 = "1";
        %a98 = ($sp - %36);
        %4c6 = "2";
        %594 = ($sp + %4c6);
        stack[%594] = %a98;
        %1ec = "3";
        %a89 = ($sp - %1ec);
        %b58 = stack[%a89];
        %56d = "3";
        %41 = ($sp + %56d);
        stack[%41] = %b58;
        %88 = "1";
        %d2f = ($sp + %88);
        %ef9 = #ce1;
        stack[%d2f] = %ef9;
        %d1 = #b9;
        jump %d1;
    }

    proc #ce1 {
        %98 = "0";
        %c3b = ($sp - %98);
        %08 = "2";
        %9db = ($sp + %08);
        stack[%9db] = %c3b;
        %40c = "3";
        %73 = ($sp - %40c);
        %fd3 = stack[%73];
        %aeb = "3";
        %333 = ($sp + %aeb);
        stack[%333] = %fd3;
        %6a = "1";
        %f37 = ($sp + %6a);
        %247 = #ec;
        stack[%f37] = %247;
        %985 = #7a4;
        jump %985;
    }

    proc #ec {
        %07 = "2";
        %23e = ($sp - %07);
        %0c3 = stack[%23e];
        %e2 = " dimensions: ";
        %d4a = (%0c3 ~ %e2);
        %ffd = "1";
        %1b2 = ($sp - %ffd);
        %389 = stack[%1b2];
        %72f = (%d4a ~ %389);
        %c9d = " x ";
        %f98 = (%72f ~ %c9d);
        %84c = "0";
        %fe5 = ($sp - %84c);
        %8d3 = stack[%fe5];
        %7cd = (%f98 ~ %8d3);
        %fcd = "2";
        %078 = ($sp + %fcd);
        stack[%078] = %7cd;
        %fd4 = "1";
        %ff9 = ($sp + %fd4);
        %e84 = #35;
        stack[%ff9] = %e84;
        %6b2 = #40;
        jump %6b2;
    }

    proc #35 {
        %c6 = "1";
        %99 = ($sp - %c6);
        %2b8 = "2";
        %ed9 = ($sp + %2b8);
        stack[%ed9] = %99;
        %43 = "3";
        %283 = ($sp - %43);
        %ad7 = stack[%283];
        %db = "3";
        %00 = ($sp + %db);
        stack[%00] = %ad7;
        %dae = "1";
        %260 = ($sp + %dae);
        %80a = #fea;
        stack[%260] = %80a;
        %25 = #c44;
        jump %25;
    }

    proc #fea {
        %dd4 = "2";
        %40d = ($sp - %dd4);
        %3d = stack[%40d];
        %f5 = " perimeter: ";
        %a55 = (%3d ~ %f5);
        %ae9 = "1";
        %14a = ($sp - %ae9);
        %312 = stack[%14a];
        %c95 = (%a55 ~ %312);
        %18 = "2";
        %19d = ($sp + %18);
        stack[%19d] = %c95;
        %fdb = "1";
        %2f = ($sp + %fdb);
        %63 = #da5;
        stack[%2f] = %63;
        %ac4 = #40;
        jump %ac4;
    }

    proc #da5 {
        %eb1 = "1";
        %e80 = ($sp - %eb1);
        %a2 = "2";
        %f60 = ($sp + %a2);
        stack[%f60] = %e80;
        %180 = "3";
        %13 = ($sp - %180);
        %051 = stack[%13];
        %29 = "3";
        %49 = ($sp + %29);
        stack[%49] = %051;
        %e3 = "1";
        %dc = ($sp + %e3);
        %145 = #3c9;
        stack[%dc] = %145;
        %4d5 = #11;
        jump %4d5;
    }

    proc #3c9 {
        %a1c = "2";
        %10 = ($sp - %a1c);
        %eaf = stack[%10];
        %7d = " area: ";
        %58 = (%eaf ~ %7d);
        %f7 = "1";
        %324 = ($sp - %f7);
        %c15 = stack[%324];
        %50 = (%58 ~ %c15);
        %138 = "2";
        %cd = ($sp + %138);
        stack[%cd] = %50;
        %735 = "1";
        %0e = ($sp + %735);
        %b85 = #41b;
        stack[%0e] = %b85;
        %99d = #40;
        jump %99d;
    }

    proc #41b {
        %b4 = "5";
        $sp = ($sp - %b4);
        %545 = "1";
        %1f = ($sp + %545);
        %6c9 = stack[%1f];
        jump %6c9;
    }
}

func func.out {
    proc #40 {
        %fdba = "2";
        $sp = ($sp + %fdba);
        %2b2 = "0";
        %b83 = ($sp - %2b2);
        %67e = stack[%b83];
        out %67e;
        %12 = "2";
        $sp = ($sp - %12);
        %494 = "1";
        %7a9 = ($sp + %494);
        %1b1 = stack[%7a9];
        jump %1b1;
    }
}

func func.in {
    proc #2c {
        %c10 = "3";
        $sp = ($sp + %c10);
        %825 = "0";
        %42 = ($sp - %825);
        in;
        stack[%42] = $answer;
        %7a1 = "0";
        %6fe = ($sp - %7a1);
        %a4 = stack[%6fe];
        %93d = "1";
        %b46 = ($sp - %93d);
        %5d = stack[%b46];
        %15e = "0";
        %c7 = (%5d + %15e);
        stack[%c7] = %a4;
        %e33 = "3";
        $sp = ($sp - %e33);
        %902 = "1";
        %249 = ($sp + %902);
        %aad = stack[%249];
        jump %aad;
    }
}