main {
    proc #95 {
        $sp = "-1";
        %38 = #ef;
        jump %38;
    }
}

func main {
    proc #ef {
        %54 = "5";
        $sp = ($sp + %54);
        %4f = "3";
        %2c = ($sp - %4f);
        %86 = "2";
        %56 = ($sp + %86);
        stack[%56] = %2c;
        %c1 = "4";
        %b8 = "3";
        %c2 = ($sp + %b8);
        stack[%c2] = %c1;
        %ed = "4";
        %b85 = "4";
        %6b = ($sp + %b85);
        stack[%6b] = %ed;
        %6a = "1";
        %566 = ($sp + %6a);
        %d3 = #47;
        stack[%566] = %d3;
        %69 = #85;
        jump %69;
    }

    proc #47 {
        %5e = "1";
        %9f = ($sp - %5e);
        %88 = "2";
        %6e = ($sp + %88);
        stack[%6e] = %9f;
        %7a = "5";
        %92 = "3";
        %37 = ($sp + %92);
        stack[%37] = %7a;
        %19 = "8";
        %0e = "4";
        %1c = ($sp + %0e);
        stack[%1c] = %19;
        %e0 = "1";
        %e9 = ($sp + %e0);
        %8a = #5a;
        stack[%e9] = %8a;
        %4e = #85;
        jump %4e;
    }

    proc #5a {
        %923 = "3";
        %d9 = ($sp - %923);
        %6a9 = "2";
        %3b = ($sp + %6a9);
        stack[%3b] = %d9;
        %38c = "Rect 1";
        %ca = "3";
        %91 = ($sp + %ca);
        stack[%91] = %38c;
        %7d = "1";
        %a5 = ($sp + %7d);
        %83 = #62;
        stack[%a5] = %83;
        %c17 = #1e;
        jump %c17;
    }

    proc #62 {
        %9d = "1";
        %f9 = ($sp - %9d);
        %d6 = "2";
        %691 = ($sp + %d6);
        stack[%691] = %f9;
        %c5 = "Rect 2";
        %5ed = "3";
        %ac = ($sp + %5ed);
        stack[%ac] = %c5;
        %2d = "1";
        %02 = ($sp + %2d);
        %8d = #c7;
        stack[%02] = %8d;
        %ab = #1e;
        jump %ab;
    }

    proc #c7 {
        %b3 = "Done!";
        %c7e = "2";
        %9a = ($sp + %c7e);
        stack[%9a] = %b3;
        %28 = "1";
        %d8 = ($sp + %28);
        %cd = #b4;
        stack[%d8] = %cd;
        %2a = #81;
        jump %2a;
    }

    proc #b4 {
        exit;
    }
}

func func.Rect_new {
    proc #85 {
        %06 = "4";
        $sp = ($sp + %06);
        %7e = "1";
        %09 = ($sp - %7e);
        %bb = stack[%09];
        %74 = "2";
        %fa = ($sp - %74);
        %2f = stack[%fa];
        %b2 = "0";
        %11 = (%2f + %b2);
        stack[%11] = %bb;
        %a3 = "0";
        %d1 = ($sp - %a3);
        %61 = stack[%d1];
        %bd = "2";
        %a4 = ($sp - %bd);
        %bdc = stack[%a4];
        %03 = "1";
        %90 = (%bdc + %03);
        stack[%90] = %61;
        %fd = "4";
        $sp = ($sp - %fd);
        %68 = "1";
        %acb = ($sp + %68);
        %2b = stack[%acb];
        jump %2b;
    }
}

func func.Rect_width {
    proc #edf {
        %1e4 = "3";
        $sp = ($sp + %1e4);
        %40 = "0";
        %60 = "0";
        %58 = ($sp - %60);
        %34 = stack[%58];
        %07 = (%34 + %40);
        %29 = stack[%07];
        %621 = "1";
        %17 = ($sp - %621);
        %20 = stack[%17];
        %0b = "0";
        %6b2 = (%20 + %0b);
        stack[%6b2] = %29;
        %bbe = "3";
        $sp = ($sp - %bbe);
        %db = "1";
        %0ec = ($sp + %db);
        %5d = stack[%0ec];
        jump %5d;
    }
}

func func.Rect_height {
    proc #f2 {
        %6c = "3";
        $sp = ($sp + %6c);
        %6ae = "1";
        %8e = "0";
        %7ef = ($sp - %8e);
        %3f = stack[%7ef];
        %6212 = (%3f + %6ae);
        %df = stack[%6212];
        %81b = "1";
        %00 = ($sp - %81b);
        %ec = stack[%00];
        %8f = "0";
        %fc = (%ec + %8f);
        stack[%fc] = %df;
        %d32 = "3";
        $sp = ($sp - %d32);
        %52 = "1";
        %08 = ($sp + %52);
        %48 = stack[%08];
        jump %48;
    }
}

func func.Rect_area {
    proc #953 {
        %9c = "5";
        $sp = ($sp + %9c);
        %b4d = "1";
        %d8c = ($sp - %b4d);
        %c1c = "2";
        %94 = ($sp + %c1c);
        stack[%94] = %d8c;
        %f95 = "2";
        %588 = ($sp - %f95);
        %f7 = stack[%588];
        %e95 = "3";
        %98 = ($sp + %e95);
        stack[%98] = %f7;
        %fe = "1";
        %13 = ($sp + %fe);
        %d0 = #06f;
        stack[%13] = %d0;
        %f28 = #edf;
        jump %f28;
    }

    proc #06f {
        %6f = "0";
        %df6 = ($sp - %6f);
        %de = "2";
        %4d = ($sp + %de);
        stack[%4d] = %df6;
        %d2 = "2";
        %51 = ($sp - %d2);
        %64 = stack[%51];
        %df8 = "3";
        %c3 = ($sp + %df8);
        stack[%c3] = %64;
        %0f = "1";
        %d5 = ($sp + %0f);
        %8b = #af;
        stack[%d5] = %8b;
        %ba = #f2;
        jump %ba;
    }

    proc #af {
        %3d = "1";
        %e0a = ($sp - %3d);
        %3f0 = stack[%e0a];
        %003 = "0";
        %d11 = ($sp - %003);
        %d07 = stack[%d11];
        %5b = (%3f0 * %d07);
        %92d = "3";
        %9d3 = ($sp - %92d);
        %fb = stack[%9d3];
        %55 = "0";
        %a2 = (%fb + %55);
        stack[%a2] = %5b;
        %e7 = "5";
        $sp = ($sp - %e7);
        %14 = "1";
        %7d2 = ($sp + %14);
        %de5 = stack[%7d2];
        jump %de5;
    }
}

func func.Rect_perimeter {
    proc #9530 {
        %f6 = "5";
        $sp = ($sp + %f6);
        %4f1 = "1";
        %8d6 = ($sp - %4f1);
        %5e1 = "2";
        %d15 = ($sp + %5e1);
        stack[%d15] = %8d6;
        %04 = "2";
        %547 = ($sp - %04);
        %4c = stack[%547];
        %c9 = "3";
        %6912 = ($sp + %c9);
        stack[%6912] = %4c;
        %17d = "1";
        %2e = ($sp + %17d);
        %dc = #2a2;
        stack[%2e] = %dc;
        %1a = #edf;
        jump %1a;
    }

    proc #2a2 {
        %fb8 = "0";
        %4a = ($sp - %fb8);
        %be = "2";
        %29d = ($sp + %be);
        stack[%29d] = %4a;
        %df7 = "2";
        %5e7 = ($sp - %df7);
        %d33 = stack[%5e7];
        %4b = "3";
        %9f7 = ($sp + %4b);
        stack[%9f7] = %d33;
        %ff = "1";
        %b28 = ($sp + %ff);
        %47b = #a2d;
        stack[%b28] = %47b;
        %4ef = #f2;
        jump %4ef;
    }

    proc #a2d {
        %2e6 = "1";
        %75 = ($sp - %2e6);
        %fc8 = stack[%75];
        %57 = "2";
        %dbf = (%fc8 * %57);
        %6e0 = "1";
        %4eb = ($sp - %6e0);
        %01 = "0";
        %30 = (%4eb + %01);
        stack[%30] = %dbf;
        %4e2 = "0";
        %746 = ($sp - %4e2);
        %c3b = stack[%746];
        %901 = "2";
        %642 = (%c3b * %901);
        %e9e = "0";
        %73 = ($sp - %e9e);
        %32 = "0";
        %cf = (%73 + %32);
        stack[%cf] = %642;
        %734 = "1";
        %13a = ($sp - %734);
        %d13 = stack[%13a];
        %b9 = "0";
        %72 = ($sp - %b9);
        %54c = stack[%72];
        %18 = (%d13 + %54c);
        %03d = "3";
        %d4 = ($sp - %03d);
        %f3 = stack[%d4];
        %5c = "0";
        %5af = (%f3 + %5c);
        stack[%5af] = %18;
        %f35 = "5";
        $sp = ($sp - %f35);
        %7e8 = "1";
        %69e = ($sp + %7e8);
        %f7d = stack[%69e];
        jump %f7d;
    }
}

func func.Rect_print_info {
    proc #1e {
        %c51 = "5";
        $sp = ($sp + %c51);
        %619 = "1";
        %aa = ($sp - %619);
        %382 = "2";
        %28f = ($sp + %382);
        stack[%28f] = %aa;
        %99 = "3";
        %35 = ($sp - %99);
        %815 = stack[%35];
        %4e20 = "3";
        %647 = ($sp + %4e20);
        stack[%647] = %815;
        %8d2 = "1";
        %c58 = ($sp + %8d2);
        %41 = #97;
        stack[%c58] = %41;
        %1f = #edf;
        jump %1f;
    }

    proc #97 {
        %5b3 = "0";
        %fb0 = ($sp - %5b3);
        %c18 = "2";
        %b5 = ($sp + %c18);
        stack[%b5] = %fb0;
        %0d = "3";
        %7b = ($sp - %0d);
        %f3b = stack[%7b];
        %8e7 = "3";
        %b1 = ($sp + %8e7);
        stack[%b1] = %f3b;
        %e3 = "1";
        %d7 = ($sp + %e3);
        %0a = #201;
        stack[%d7] = %0a;
        %0f6 = #f2;
        jump %0f6;
    }

    proc #201 {
        %32c = "2";
        %1d = ($sp - %32c);
        %6c1 = stack[%1d];
        %cfb = " dimensions: ";
        %afa = (%6c1 ~ %cfb);
        %df64 = "1";
        %f8 = ($sp - %df64);
        %fe5 = stack[%f8];
        %e5 = (%afa ~ %fe5);
        %28c = " x ";
        %da = (%e5 ~ %28c);
        %e8 = "0";
        %9e = ($sp - %e8);
        %c10 = stack[%9e];
        %cf3 = (%da ~ %c10);
        %610 = "2";
        %36 = ($sp + %610);
        stack[%36] = %cf3;
        %25 = "1";
        %80 = ($sp + %25);
        %db1 = #bf;
        stack[%80] = %db1;
        %86d = #81;
        jump %86d;
    }

    proc #bf {
        %1a8 = "1";
        %d65 = ($sp - %1a8);
        %fcc = "2";
        %346 = ($sp + %fcc);
        stack[%346] = %d65;
        %1ff = "3";
        %1c8 = ($sp - %1ff);
        %ab2 = stack[%1c8];
        %184 = "3";
        %dff = ($sp + %184);
        stack[%dff] = %ab2;
        %f0 = "1";
        %b0 = ($sp + %f0);
        %c73 = #0c;
        stack[%b0] = %c73;
        %84 = #9530;
        jump %84;
    }

    proc #0c {
        %ece = "2";
        %4bd = ($sp - %ece);
        %2a4 = stack[%4bd];
        %d6c = " perimeter: ";
        %7c = (%2a4 ~ %d6c);
        %f358 = "1";
        %30a = ($sp - %f358);
        %029 = stack[%30a];
        %a4e = (%7c ~ %029);
        %93 = "2";
        %0b4 = ($sp + %93);
        stack[%0b4] = %a4e;
        %4e2a = "1";
        %518 = ($sp + %4e2a);
        %33 = #66;
        stack[%518] = %33;
        %7b0 = #81;
        jump %7b0;
    }

    proc #66 {
        %06d = "1";
        %9e2 = ($sp - %06d);
        %ae = "2";
        %34d = ($sp + %ae);
        stack[%34d] = %9e2;
        %dbd = "3";
        %20d = ($sp - %dbd);
        %31 = stack[%20d];
        %000 = "3";
        %572 = ($sp + %000);
        stack[%572] = %31;
        %578 = "1";
        %6ea = ($sp + %578);
        %b4d2 = #dd;
        stack[%6ea] = %b4d2;
        %fee = #953;
        jump %fee;
    }

    proc #dd {
        %13d = "2";
        %dee = ($sp - %13d);
        %35a = stack[%dee];
        %522 = " area: ";
        %71 = (%35a ~ %522);
        %815f = "1";
        %2ef = ($sp - %815f);
        %a9 = stack[%2ef];
        %26 = (%71 ~ %a9);
        %aa6 = "2";
        %af1 = ($sp + %aa6);
        stack[%af1] = %26;
        %97b = "1";
        %012 = ($sp + %97b);
        %c5c = #988;
        stack[%012] = %c5c;
        %b10 = #81;
        jump %b10;
    }

    proc #988 {
        %f33 = "5";
        $sp = ($sp - %f33);
        %480 = "1";
        %d6c8 = ($sp + %480);
        %5f = stack[%d6c8];
        jump %5f;
    }
}

func func.out {
    proc #81 {
        %39 = "2";
        $sp = ($sp + %39);
        %a8 = "0";
        %021 = ($sp - %a8);
        %523 = stack[%021];
        out %523;
        %6e3 = "2";
        $sp = ($sp - %6e3);
        %93b = "1";
        %bd4 = ($sp + %93b);
        %9b = stack[%bd4];
        jump %9b;
    }
}

func func.in {
    proc #91a {
        %971 = "3";
        $sp = ($sp + %971);
        %6f3 = "0";
        %3dd = ($sp - %6f3);
        in;
        stack[%3dd] = $answer;
        %bb6 = "0";
        %2db = ($sp - %bb6);
        %3a = stack[%2db];
        %cf3c = "1";
        %fe4 = ($sp - %cf3c);
        %87 = stack[%fe4];
        %05 = "0";
        %b2c = (%87 + %05);
        stack[%b2c] = %3a;
        %4b8 = "3";
        $sp = ($sp - %4b8);
        %83d = "1";
        %745 = ($sp + %83d);
        %3f3 = stack[%745];
        jump %3f3;
    }
}

func func.random_num {
    proc #57d {
        %2d8 = "5";
        $sp = ($sp + %2d8);
        %6d = "0";
        %a1 = ($sp - %6d);
        %7db = "0.0";
        %b9d = "1.0";
        stack[%a1] = (%7db <random> %b9d);
        %70 = "2";
        %d01 = ($sp - %70);
        %e4 = stack[%d01];
        %cb = "0";
        %ce = ($sp - %cb);
        %e3a = stack[%ce];
        %b56 = "1";
        %f0c = ($sp - %b56);
        %5a9 = stack[%f0c];
        %253 = "2";
        %76 = ($sp - %253);
        %55a = stack[%76];
        %e73 = (%5a9 - %55a);
        %d02 = (%e3a * %e73);
        %010 = (%e4 + %d02);
        %5af9 = "3";
        %0b1 = ($sp - %5af9);
        %5f7 = stack[%0b1];
        %fcb = "0";
        %32c0 = (%5f7 + %fcb);
        stack[%32c0] = %010;
        %e38 = "5";
        $sp = ($sp - %e38);
        %6c4 = "1";
        %e41 = ($sp + %6c4);
        %00c = stack[%e41];
        jump %00c;
    }
}

func func.random_int {
    proc #336 {
        %78 = "5";
        $sp = ($sp + %78);
        %27 = "0";
        %2be = ($sp - %27);
        %68d = "2";
        %53 = ($sp - %68d);
        %ce7 = stack[%53];
        %42 = "1";
        %6bf = ($sp - %42);
        %22 = stack[%6bf];
        stack[%2be] = (%ce7 <random> %22);
        %f23 = "0";
        %476 = ($sp - %f23);
        %02c = stack[%476];
        %0a9 = "3";
        %01d = ($sp - %0a9);
        %1b = stack[%01d];
        %49 = "0";
        %1ec = (%1b + %49);
        stack[%1ec] = %02c;
        %c8 = "5";
        $sp = ($sp - %c8);
        %e44 = "1";
        %3b6 = ($sp + %e44);
        %054 = stack[%3b6];
        jump %054;
    }
}

func func.random_uint {
    proc #ad {
        %7de = "5";
        $sp = ($sp + %7de);
        %fa0 = "0";
        %d69 = ($sp - %fa0);
        %0cd = "2";
        %3be = ($sp - %0cd);
        %c2a = stack[%3be];
        %606 = "1";
        %c12 = ($sp - %606);
        %712 = stack[%c12];
        stack[%d69] = (%c2a <random> %712);
        %285 = "0";
        %eb = ($sp - %285);
        %7a7 = stack[%eb];
        %bd8 = "3";
        %f30 = ($sp - %bd8);
        %8c = stack[%f30];
        %734c = "0";
        %23 = (%8c + %734c);
        stack[%23] = %7a7;
        %ad2 = "5";
        $sp = ($sp - %ad2);
        %ab5 = "1";
        %178 = ($sp + %ab5);
        %849 = stack[%178];
        jump %849;
    }
}