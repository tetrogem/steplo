main {
    proc #dd {
        $sp = "-1";
        %75 = #2c;
        jump %75;
    }
}

func main {
    proc #2c {
        %b1 = "5";
        $sp = ($sp + %b1);
        %ac = "3";
        %63 = ($sp - %ac);
        %59 = "2";
        %77 = ($sp + %59);
        stack[%77] = %63;
        %bb = "4";
        %91 = "3";
        %7f = ($sp + %91);
        stack[%7f] = %bb;
        %10 = "4";
        %19 = "4";
        %28 = ($sp + %19);
        stack[%28] = %10;
        %61 = "1";
        %74 = ($sp + %61);
        %80 = #ca;
        stack[%74] = %80;
        %e3 = #0d;
        jump %e3;
    }

    proc #ca {
        %43 = "1";
        %fd = ($sp - %43);
        %d6 = "2";
        %592 = ($sp + %d6);
        stack[%592] = %fd;
        %c6 = "5";
        %e7 = "3";
        %20 = ($sp + %e7);
        stack[%20] = %c6;
        %6e = "8";
        %37 = "4";
        %591 = ($sp + %37);
        stack[%591] = %6e;
        %c69 = "1";
        %95 = ($sp + %c69);
        %d8 = #5b;
        stack[%95] = %d8;
        %a5 = #0d;
        jump %a5;
    }

    proc #5b {
        %be = "3";
        %6a = ($sp - %be);
        %06 = "2";
        %94 = ($sp + %06);
        stack[%94] = %6a;
        %99 = "Rect 1";
        %8e = "3";
        %a7 = ($sp + %8e);
        stack[%a7] = %99;
        %f8 = "1";
        %b6 = ($sp + %f8);
        %2d = #eb;
        stack[%b6] = %2d;
        %bd = #ea;
        jump %bd;
    }

    proc #eb {
        %6b = "1";
        %f7 = ($sp - %6b);
        %8e9 = "2";
        %5c = ($sp + %8e9);
        stack[%5c] = %f7;
        %40 = "Rect 2";
        %00 = "3";
        %2a = ($sp + %00);
        stack[%2a] = %40;
        %5e = "1";
        %29 = ($sp + %5e);
        %9c = #81;
        stack[%29] = %9c;
        %f80 = #ea;
        jump %f80;
    }

    proc #81 {
        %c9 = "Done!";
        %88 = "2";
        %5ce = ($sp + %88);
        stack[%5ce] = %c9;
        %71 = "1";
        %0f = ($sp + %71);
        %6a8 = #a55;
        stack[%0f] = %6a8;
        %5c8 = #24;
        jump %5c8;
    }

    proc #a55 {
        exit;
    }
}

func func.Rect_new {
    proc #0d {
        %7a = "4";
        $sp = ($sp + %7a);
        %ba = "1";
        %4f = ($sp - %ba);
        %d66 = stack[%4f];
        %10f = "2";
        %b6e = ($sp - %10f);
        %cc = stack[%b6e];
        %4e = "0";
        %40f = (%cc + %4e);
        stack[%40f] = %d66;
        %b7 = "0";
        %b76 = ($sp - %b7);
        %6a0 = stack[%b76];
        %54 = "2";
        %bf = ($sp - %54);
        %92 = stack[%bf];
        %5a = "1";
        %e2 = (%92 + %5a);
        stack[%e2] = %6a0;
        %62 = "4";
        $sp = ($sp - %62);
        %49 = "1";
        %96 = ($sp + %49);
        %49f = stack[%96];
        jump %49f;
    }
}

func func.Rect_width {
    proc #66 {
        %1f = "3";
        $sp = ($sp + %1f);
        %626 = "0";
        %dd6 = ($sp - %626);
        %e38 = stack[%dd6];
        %85 = stack[%e38];
        %17 = "1";
        %c91 = ($sp - %17);
        %209 = stack[%c91];
        %2090 = "0";
        %02 = (%209 + %2090);
        stack[%02] = %85;
        %377 = "3";
        $sp = ($sp - %377);
        %e3d = "1";
        %955 = ($sp + %e3d);
        %c5 = stack[%955];
        jump %c5;
    }
}

func func.Rect_height {
    proc #8e1 {
        %714 = "3";
        $sp = ($sp + %714);
        %6f = "0";
        %0c = ($sp - %6f);
        %de = stack[%0c];
        %b68 = "1";
        %b79 = (%de + %b68);
        %b75 = stack[%b79];
        %b61 = "1";
        %46 = ($sp - %b61);
        %4a = stack[%46];
        %e6 = "0";
        %bba = (%4a + %e6);
        stack[%bba] = %b75;
        %f0 = "3";
        $sp = ($sp - %f0);
        %e31 = "1";
        %a7e = ($sp + %e31);
        %87 = stack[%a7e];
        jump %87;
    }
}

func func.Rect_area {
    proc #0d7 {
        %291 = "5";
        $sp = ($sp + %291);
        %35 = "1";
        %21 = ($sp - %35);
        %dd2 = "2";
        %b0 = ($sp + %dd2);
        stack[%b0] = %21;
        %df = "2";
        %0b = ($sp - %df);
        %53 = stack[%0b];
        %a8 = "3";
        %25 = ($sp + %a8);
        stack[%25] = %53;
        %991 = "1";
        %95b = ($sp + %991);
        %a5b = #14;
        stack[%95b] = %a5b;
        %c0 = #66;
        jump %c0;
    }

    proc #14 {
        %002 = "0";
        %599 = ($sp - %002);
        %12 = "2";
        %4d = ($sp + %12);
        stack[%4d] = %599;
        %68 = "2";
        %47 = ($sp - %68);
        %45 = stack[%47];
        %d5 = "3";
        %e1 = ($sp + %d5);
        stack[%e1] = %45;
        %a1 = "1";
        %3d = ($sp + %a1);
        %f05 = #a4;
        stack[%3d] = %f05;
        %3d4 = #8e1;
        jump %3d4;
    }

    proc #a4 {
        %82 = "1";
        %8f = ($sp - %82);
        %af = stack[%8f];
        %e9 = "0";
        %200 = ($sp - %e9);
        %67 = stack[%200];
        %44 = (%af * %67);
        %e4 = "3";
        %49fa = ($sp - %e4);
        %995 = stack[%49fa];
        %5ac = "0";
        %e384 = (%995 + %5ac);
        stack[%e384] = %44;
        %7e = "5";
        $sp = ($sp - %7e);
        %f74 = "1";
        %d3 = ($sp + %f74);
        %d0 = stack[%d3];
        jump %d0;
    }
}

func func.Rect_perimeter {
    proc #b9 {
        %eb5 = "5";
        $sp = ($sp + %eb5);
        %48 = "1";
        %57 = ($sp - %48);
        %43f = "2";
        %5bb = ($sp + %43f);
        stack[%5bb] = %57;
        %84 = "2";
        %c2 = ($sp - %84);
        %c4 = stack[%c2];
        %ef = "3";
        %01 = ($sp + %ef);
        stack[%01] = %c4;
        %a2 = "1";
        %cae = ($sp + %a2);
        %b4 = #6b9;
        stack[%cae] = %b4;
        %1fe = #66;
        jump %1fe;
    }

    proc #6b9 {
        %cab = "0";
        %0c6 = ($sp - %cab);
        %c2e = "2";
        %54a = ($sp + %c2e);
        stack[%54a] = %0c6;
        %cd = "2";
        %943 = ($sp - %cd);
        %a0 = stack[%943];
        %02c = "3";
        %d5e = ($sp + %02c);
        stack[%d5e] = %a0;
        %f2 = "1";
        %827 = ($sp + %f2);
        %2e = #e22;
        stack[%827] = %2e;
        %f8c = #8e1;
        jump %f8c;
    }

    proc #e22 {
        %93 = "1";
        %1d = ($sp - %93);
        %1f1 = stack[%1d];
        %cd4 = "2";
        %0e = (%1f1 * %cd4);
        %fdf = "1";
        %15 = ($sp - %fdf);
        %c8 = "0";
        %379 = (%15 + %c8);
        stack[%379] = %0e;
        %6d = "0";
        %5c7 = ($sp - %6d);
        %814 = stack[%5c7];
        %55 = "2";
        %da = (%814 * %55);
        %c2b = "0";
        %f7c = ($sp - %c2b);
        %195 = "0";
        %83 = (%f7c + %195);
        stack[%83] = %da;
        %70 = "1";
        %11 = ($sp - %70);
        %6b1 = stack[%11];
        %0cb = "0";
        %66c = ($sp - %0cb);
        %fd7 = stack[%66c];
        %de6 = (%6b1 + %fd7);
        %285 = "3";
        %71e = ($sp - %285);
        %c9f = stack[%71e];
        %76 = "0";
        %eb9 = (%c9f + %76);
        stack[%eb9] = %de6;
        %ac1 = "5";
        $sp = ($sp - %ac1);
        %1f8 = "1";
        %e78 = ($sp + %1f8);
        %a28 = stack[%e78];
        jump %a28;
    }
}

func func.Rect_print_info {
    proc #ea {
        %483 = "5";
        $sp = ($sp + %483);
        %2ce = "1";
        %a9 = ($sp - %2ce);
        %a85 = "2";
        %bb0 = ($sp + %a85);
        stack[%bb0] = %a9;
        %617 = "3";
        %8d = ($sp - %617);
        %1f3 = stack[%8d];
        %4ec = "3";
        %0be = ($sp + %4ec);
        stack[%0be] = %1f3;
        %9d = "1";
        %fe = ($sp + %9d);
        %26 = #64;
        stack[%fe] = %26;
        %f5 = #66;
        jump %f5;
    }

    proc #64 {
        %8fd = "0";
        %ad = ($sp - %8fd);
        %a6 = "2";
        %36 = ($sp + %a6);
        stack[%36] = %ad;
        %668 = "3";
        %544 = ($sp - %668);
        %69 = stack[%544];
        %4d8 = "3";
        %bf8 = ($sp + %4d8);
        stack[%bf8] = %69;
        %f28 = "1";
        %069 = ($sp + %f28);
        %2a8 = #ed;
        stack[%069] = %2a8;
        %810 = #8e1;
        jump %810;
    }

    proc #ed {
        %c3 = "2";
        %1f33 = ($sp - %c3);
        %bac = stack[%1f33];
        %da7 = " dimensions: ";
        %1a = (%bac ~ %da7);
        %777 = "1";
        %b2 = ($sp - %777);
        %7c = stack[%b2];
        %3e = (%1a ~ %7c);
        %b8 = " x ";
        %a87 = (%3e ~ %b8);
        %f9 = "0";
        %b6b = ($sp - %f9);
        %a4e = stack[%b6b];
        %cc8 = (%a87 ~ %a4e);
        %97 = "2";
        %d85 = ($sp + %97);
        stack[%d85] = %cc8;
        %d4 = "1";
        %4c = ($sp + %d4);
        %c22 = #ae;
        stack[%4c] = %c22;
        %37b = #24;
        jump %37b;
    }

    proc #ae {
        %979 = "1";
        %b93 = ($sp - %979);
        %30 = "2";
        %51 = ($sp + %30);
        stack[%51] = %b93;
        %e5 = "3";
        %41 = ($sp - %e5);
        %65 = stack[%41];
        %140 = "3";
        %17f = ($sp + %140);
        stack[%17f] = %65;
        %6fb = "1";
        %f22 = ($sp + %6fb);
        %2b = #f59;
        stack[%f22] = %2b;
        %fdd = #b9;
        jump %fdd;
    }

    proc #f59 {
        %9f = "2";
        %85c = ($sp - %9f);
        %631 = stack[%85c];
        %4d2 = " perimeter: ";
        %97a = (%631 ~ %4d2);
        %f3 = "1";
        %31 = ($sp - %f3);
        %4ac = stack[%31];
        %b5 = (%97a ~ %4ac);
        %742 = "2";
        %aa = ($sp + %742);
        stack[%aa] = %b5;
        %32 = "1";
        %18 = ($sp + %32);
        %ab = #32d;
        stack[%18] = %ab;
        %d1 = #24;
        jump %d1;
    }

    proc #32d {
        %73 = "1";
        %db = ($sp - %73);
        %fc = "2";
        %880 = ($sp + %fc);
        stack[%880] = %db;
        %376 = "3";
        %712 = ($sp - %376);
        %da2 = stack[%712];
        %50 = "3";
        %1b = ($sp + %50);
        stack[%1b] = %da2;
        %af6 = "1";
        %c7 = ($sp + %af6);
        %247 = #ded;
        stack[%c7] = %247;
        %46f = #0d7;
        jump %46f;
    }

    proc #ded {
        %479 = "2";
        %2bc = ($sp - %479);
        %8e1b = stack[%2bc];
        %d09 = " area: ";
        %de64 = (%8e1b ~ %d09);
        %a8b = "1";
        %38 = ($sp - %a8b);
        %e7d = stack[%38];
        %c2ed = (%de64 ~ %e7d);
        %df2 = "2";
        %828 = ($sp + %df2);
        stack[%828] = %c2ed;
        %370 = "1";
        %76e = ($sp + %370);
        %bf0 = #dc;
        stack[%76e] = %bf0;
        %ce = #24;
        jump %ce;
    }

    proc #dc {
        %364 = "5";
        $sp = ($sp - %364);
        %991c = "1";
        %90 = ($sp + %991c);
        %98 = stack[%90];
        jump %98;
    }
}

func func.out {
    proc #24 {
        %712f = "2";
        $sp = ($sp + %712f);
        %99a = "0";
        %04 = ($sp - %99a);
        %33 = stack[%04];
        out %33;
        %d32 = "2";
        $sp = ($sp - %d32);
        %8c = "1";
        %5e5 = ($sp + %8c);
        %88e = stack[%5e5];
        jump %88e;
    }
}

func func.in {
    proc #5d {
        %9e = "3";
        $sp = ($sp + %9e);
        %cda = "0";
        %431 = ($sp - %cda);
        in;
        stack[%431] = $answer;
        %417 = "0";
        %84c = ($sp - %417);
        %854 = stack[%84c];
        %d7 = "1";
        %189 = ($sp - %d7);
        %d0d = stack[%189];
        %b84 = "0";
        %249 = (%d0d + %b84);
        stack[%249] = %854;
        %7f9 = "3";
        $sp = ($sp - %7f9);
        %9f3 = "1";
        %18d = ($sp + %9f3);
        %3a = stack[%18d];
        jump %3a;
    }
}