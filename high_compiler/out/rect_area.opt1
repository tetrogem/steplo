main {
    proc #f2 {
        $sp = "-1";
        jump #91;
    }
}

func main {
    proc #91 {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = "4";
        stack[($sp + "4")] = "4";
        stack[($sp + "1")] = #b2;
        jump #4f;
    }

    proc #b2 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = "5";
        stack[($sp + "4")] = "8";
        stack[($sp + "1")] = #a8;
        jump #4f;
    }

    proc #a8 {
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = "Rect 1";
        stack[($sp + "1")] = #79;
        jump #e5;
    }

    proc #79 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = "Rect 2";
        stack[($sp + "1")] = #c3;
        jump #e5;
    }

    proc #c3 {
        stack[($sp + "2")] = "Done!";
        stack[($sp + "1")] = #8a;
        jump #40;
    }

    proc #8a {
        exit;
    }
}

func func.Rect_new {
    proc #4f {
        $sp = ($sp + "4");
        stack[stack[($sp - "2")]] = stack[($sp - "1")];
        stack[(stack[($sp - "2")] + "1")] = stack[$sp];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Rect_width {
    proc #b9 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[stack[$sp]];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Rect_height {
    proc #7a {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[(stack[$sp] + "1")];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Rect_area {
    proc #11 {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #a0;
        jump #b9;
    }

    proc #a0 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #aa;
        jump #7a;
    }

    proc #aa {
        stack[stack[($sp - "3")]] = (stack[($sp - "1")] * stack[$sp]);
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.Rect_perimeter {
    proc #c4 {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #70;
        jump #b9;
    }

    proc #70 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #19;
        jump #7a;
    }

    proc #19 {
        stack[($sp - "1")] = (stack[($sp - "1")] * "2");
        stack[$sp] = (stack[$sp] * "2");
        stack[stack[($sp - "3")]] = (stack[($sp - "1")] + stack[$sp]);
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.Rect_print_info {
    proc #e5 {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #ce;
        jump #b9;
    }

    proc #ce {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #ec;
        jump #7a;
    }

    proc #ec {
        stack[($sp + "2")] = ((((stack[($sp - "2")] ~ " dimensions: ") ~ stack[($sp - "1")]) ~ " x ") ~ stack[$sp]);
        stack[($sp + "1")] = #35;
        jump #40;
    }

    proc #35 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #fe;
        jump #c4;
    }

    proc #fe {
        stack[($sp + "2")] = ((stack[($sp - "2")] ~ " perimeter: ") ~ stack[($sp - "1")]);
        stack[($sp + "1")] = #da;
        jump #40;
    }

    proc #da {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #3c;
        jump #11;
    }

    proc #3c {
        stack[($sp + "2")] = ((stack[($sp - "2")] ~ " area: ") ~ stack[($sp - "1")]);
        stack[($sp + "1")] = #41;
        jump #40;
    }

    proc #41 {
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.out {
    proc #40 {
        $sp = ($sp + "2");
        out stack[$sp];
        $sp = ($sp - "2");
        jump stack[($sp + "1")];
    }
}