main {
    proc #d5 {
        $sp = "-1";
        jump #2f;
    }
}

func main {
    proc #2f {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = "4";
        stack[($sp + "4")] = "4";
        stack[($sp + "1")] = #f5;
        jump #b9;
    }

    proc #f5 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = "5";
        stack[($sp + "4")] = "8";
        stack[($sp + "1")] = #58;
        jump #b9;
    }

    proc #58 {
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = "Rect 1";
        stack[($sp + "1")] = #43;
        jump #cb;
    }

    proc #43 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = "Rect 2";
        stack[($sp + "1")] = #c8;
        jump #cb;
    }

    proc #c8 {
        stack[($sp + "2")] = "Done!";
        stack[($sp + "1")] = #ec;
        jump #da;
    }

    proc #ec {
        exit;
    }
}

func func.Rect_new {
    proc #b9 {
        $sp = ($sp + "4");
        stack[stack[($sp - "2")]] = stack[($sp - "1")];
        stack[(stack[($sp - "2")] + "1")] = stack[$sp];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Rect_width {
    proc #a2 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[stack[$sp]];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Rect_height {
    proc #09 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[(stack[$sp] + "1")];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Rect_area {
    proc #b3 {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #d50;
        jump #a2;
    }

    proc #d50 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #78;
        jump #09;
    }

    proc #78 {
        stack[stack[($sp - "3")]] = (stack[($sp - "1")] * stack[$sp]);
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.Rect_perimeter {
    proc #49 {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #ad;
        jump #a2;
    }

    proc #ad {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #76;
        jump #09;
    }

    proc #76 {
        stack[($sp - "1")] = (stack[($sp - "1")] * "2");
        stack[$sp] = (stack[$sp] * "2");
        stack[stack[($sp - "3")]] = (stack[($sp - "1")] + stack[$sp]);
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.Rect_print_info {
    proc #cb {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #c7;
        jump #a2;
    }

    proc #c7 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #dc;
        jump #09;
    }

    proc #dc {
        stack[($sp + "2")] = ((((stack[($sp - "2")] ~ " dimensions: ") ~ stack[($sp - "1")]) ~ " x ") ~ stack[$sp]);
        stack[($sp + "1")] = #b6;
        jump #da;
    }

    proc #b6 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #8e;
        jump #49;
    }

    proc #8e {
        stack[($sp + "2")] = ((stack[($sp - "2")] ~ " perimeter: ") ~ stack[($sp - "1")]);
        stack[($sp + "1")] = #41;
        jump #da;
    }

    proc #41 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #ecb;
        jump #b3;
    }

    proc #ecb {
        stack[($sp + "2")] = ((stack[($sp - "2")] ~ " area: ") ~ stack[($sp - "1")]);
        stack[($sp + "1")] = #4d;
        jump #da;
    }

    proc #4d {
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.out {
    proc #da {
        $sp = ($sp + "2");
        out stack[$sp];
        $sp = ($sp - "2");
        jump stack[($sp + "1")];
    }
}