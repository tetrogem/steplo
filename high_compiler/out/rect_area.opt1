main {
    proc #dd {
        $sp = "-1";
        jump #2c;
    }
}

func main {
    proc #2c {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = "4";
        stack[($sp + "4")] = "4";
        stack[($sp + "1")] = #ca;
        jump #0d;
    }

    proc #ca {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = "5";
        stack[($sp + "4")] = "8";
        stack[($sp + "1")] = #5b;
        jump #0d;
    }

    proc #5b {
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = "Rect 1";
        stack[($sp + "1")] = #eb;
        jump #ea;
    }

    proc #eb {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = "Rect 2";
        stack[($sp + "1")] = #81;
        jump #ea;
    }

    proc #81 {
        stack[($sp + "2")] = "Done!";
        stack[($sp + "1")] = #a5;
        jump #24;
    }

    proc #a5 {
        exit;
    }
}

func func.Rect_new {
    proc #0d {
        $sp = ($sp + "4");
        stack[stack[($sp - "2")]] = stack[($sp - "1")];
        stack[(stack[($sp - "2")] + "1")] = stack[$sp];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Rect_width {
    proc #66 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[stack[$sp]];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Rect_height {
    proc #8e {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[(stack[$sp] + "1")];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Rect_area {
    proc #0d7 {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #14;
        jump #66;
    }

    proc #14 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #a4;
        jump #8e;
    }

    proc #a4 {
        stack[stack[($sp - "3")]] = (stack[($sp - "1")] * stack[$sp]);
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.Rect_perimeter {
    proc #b9 {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #6b;
        jump #66;
    }

    proc #6b {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #e2;
        jump #8e;
    }

    proc #e2 {
        stack[($sp - "1")] = (stack[($sp - "1")] * "2");
        stack[$sp] = (stack[$sp] * "2");
        stack[stack[($sp - "3")]] = (stack[($sp - "1")] + stack[$sp]);
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.Rect_print_info {
    proc #ea {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #64;
        jump #66;
    }

    proc #64 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #ed;
        jump #8e;
    }

    proc #ed {
        stack[($sp + "2")] = ((((stack[($sp - "2")] ~ " dimensions: ") ~ stack[($sp - "1")]) ~ " x ") ~ stack[$sp]);
        stack[($sp + "1")] = #ae;
        jump #24;
    }

    proc #ae {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #f5;
        jump #b9;
    }

    proc #f5 {
        stack[($sp + "2")] = ((stack[($sp - "2")] ~ " perimeter: ") ~ stack[($sp - "1")]);
        stack[($sp + "1")] = #32;
        jump #24;
    }

    proc #32 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #de;
        jump #0d7;
    }

    proc #de {
        stack[($sp + "2")] = ((stack[($sp - "2")] ~ " area: ") ~ stack[($sp - "1")]);
        stack[($sp + "1")] = #dc;
        jump #24;
    }

    proc #dc {
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.out {
    proc #24 {
        $sp = ($sp + "2");
        out stack[$sp];
        $sp = ($sp - "2");
        jump stack[($sp + "1")];
    }
}