main {
    proc #6d {
        $sp = "-1";
        jump #62;
    }
}

func main {
    proc #62 {
        $sp = ($sp + "103");
        stack[($sp - "101")] = "0";
        stack[(($sp - "101") + "1")] = "10";
        stack[(($sp - "101") + "2")] = "a";
        stack[(($sp - "101") + "3")] = "-5";
        stack[(($sp - "101") + "4")] = "283";
        stack[(($sp - "101") + "5")] = "2";
        stack[(($sp - "101") + "6")] = "6";
        stack[(($sp - "101") + "7")] = "4";
        stack[(($sp - "101") + "8")] = "what";
        stack[(($sp - "101") + "9")] = "-1";
        stack[(($sp - "101") + "10")] = "20";
        stack[(($sp - "101") + "11")] = "7";
        stack[(($sp - "101") + "12")] = "8";
        stack[(($sp - "101") + "13")] = "2";
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = ($sp - "101");
        stack[($sp + "4")] = "99";
        stack[($sp + "5")] = "14";
        stack[($sp + "1")] = #3a;
        jump #41;
    }

    proc #3a {
        stack[($sp + "2")] = "Unsorted:";
        stack[($sp + "1")] = #18;
        jump #ea;
    }

    proc #18 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #d7;
        jump #04;
    }

    proc #d7 {
        stack[($sp + "2")] = "Sorted:";
        stack[($sp + "1")] = #77;
        jump #ea;
    }

    proc #77 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #d4;
        jump #af;
    }

    proc #d4 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #e3;
        jump #04;
    }

    proc #e3 {
        stack[($sp + "2")] = "Pushing `12.5` then sorting again:";
        stack[($sp + "1")] = #76;
        jump #ea;
    }

    proc #76 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = "12.5";
        stack[($sp + "1")] = #ef;
        jump #0f;
    }

    proc #ef {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #43;
        jump #af;
    }

    proc #43 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #4d;
        jump #04;
    }

    proc #4d {
        exit;
    }
}

func func.Vec_new {
    proc #41 {
        $sp = ($sp + "5");
        stack[stack[($sp - "3")]] = stack[($sp - "2")];
        stack[(stack[($sp - "3")] + "1")] = stack[($sp - "1")];
        stack[(stack[($sp - "3")] + "2")] = stack[$sp];
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.Vec_entry {
    proc #efa {
        $sp = ($sp + "4");
        stack[stack[($sp - "2")]] = (stack[stack[($sp - "1")]] + stack[$sp]);
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vec_cap {
    proc #60 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[(stack[$sp] + "1")];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vec_len_r {
    proc #40 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = (stack[$sp] + "2");
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vec_len {
    proc #66 {
        $sp = ($sp + "4");
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "1")];
        stack[($sp + "1")] = #65;
        jump #40;
    }

    proc #65 {
        stack[stack[($sp - "2")]] = stack[stack[$sp]];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vec_push {
    proc #0f {
        $sp = ($sp + "7");
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #6e;
        jump #60;
    }

    proc #6e {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #e0;
        jump #66;
    }

    proc #e0 {
        if (stack[($sp - "2")] < stack[($sp - "3")]) then jump #e1 else jump #c1;
    }

    proc #c1 {
        $sp = ($sp - "7");
        jump stack[($sp + "1")];
    }

    proc #e1 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "4")] = stack[($sp - "2")];
        stack[($sp + "1")] = #b0;
        jump #efa;
    }

    proc #b0 {
        stack[stack[($sp - "1")]] = stack[($sp - "4")];
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #33;
        jump #40;
    }

    proc #33 {
        stack[stack[$sp]] = (stack[($sp - "2")] + "1");
        jump #c1;
    }
}

func func.Vec_print {
    proc #04 {
        $sp = ($sp + "6");
        stack[($sp - "3")] = "0";
        stack[$sp] = "Vec (";
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "4")];
        stack[($sp + "1")] = #ae;
        jump #66;
    }

    proc #ae {
        stack[$sp] = (stack[$sp] ~ stack[($sp - "2")]);
        stack[$sp] = (stack[$sp] ~ ") ");
        if (stack[($sp - "3")] < stack[($sp - "2")]) then jump #3c else jump #d1;
    }

    proc #d1 {
        stack[($sp + "2")] = stack[$sp];
        stack[($sp + "1")] = #a6;
        jump #ea;
    }

    proc #a6 {
        $sp = ($sp - "6");
        jump stack[($sp + "1")];
    }

    proc #3c {
        if (!(stack[($sp - "3")] == "0")) then jump #89 else jump #660;
    }

    proc #660 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "4")];
        stack[($sp + "4")] = stack[($sp - "3")];
        stack[($sp + "1")] = #7f;
        jump #efa;
    }

    proc #7f {
        stack[$sp] = (stack[$sp] ~ stack[stack[($sp - "1")]]);
        stack[($sp - "3")] = (stack[($sp - "3")] + "1");
        if (stack[($sp - "3")] < stack[($sp - "2")]) then jump #3c else jump #d1;
    }

    proc #89 {
        stack[$sp] = (stack[$sp] ~ ", ");
        jump #660;
    }
}

func func.Vec_sort {
    proc #af {
        $sp = ($sp + "9");
        stack[($sp - "6")] = "0";
        stack[($sp + "2")] = ($sp - "4");
        stack[($sp + "3")] = stack[($sp - "7")];
        stack[($sp + "1")] = #36;
        jump #66;
    }

    proc #36 {
        if (stack[($sp - "6")] < stack[($sp - "4")]) then jump #9b else jump #6f;
    }

    proc #6f {
        $sp = ($sp - "9");
        jump stack[($sp + "1")];
    }

    proc #9b {
        stack[($sp - "5")] = stack[($sp - "6")];
        if (stack[($sp - "5")] < stack[($sp - "4")]) then jump #68 else jump #07;
    }

    proc #07 {
        stack[($sp - "6")] = (stack[($sp - "6")] + "1");
        if (stack[($sp - "6")] < stack[($sp - "4")]) then jump #9b else jump #6f;
    }

    proc #68 {
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = stack[($sp - "7")];
        stack[($sp + "4")] = stack[($sp - "6")];
        stack[($sp + "1")] = #e1e;
        jump #efa;
    }

    proc #e1e {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "7")];
        stack[($sp + "4")] = stack[($sp - "5")];
        stack[($sp + "1")] = #b9;
        jump #efa;
    }

    proc #b9 {
        stack[($sp - "1")] = stack[stack[($sp - "3")]];
        stack[$sp] = stack[stack[($sp - "2")]];
        if (stack[$sp] < stack[($sp - "1")]) then jump #21 else jump #0c;
    }

    proc #0c {
        stack[($sp - "5")] = (stack[($sp - "5")] + "1");
        if (stack[($sp - "5")] < stack[($sp - "4")]) then jump #68 else jump #07;
    }

    proc #21 {
        stack[($sp + "2")] = stack[($sp - "3")];
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #0c;
        jump #3e;
    }
}

func func.swap {
    proc #3e {
        $sp = ($sp + "4");
        stack[$sp] = stack[stack[($sp - "2")]];
        stack[stack[($sp - "2")]] = stack[stack[($sp - "1")]];
        stack[stack[($sp - "1")]] = stack[$sp];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.out {
    proc #ea {
        $sp = ($sp + "2");
        out stack[$sp];
        $sp = ($sp - "2");
        jump stack[($sp + "1")];
    }
}