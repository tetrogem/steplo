main {
    proc #ab {
        $sp = "-1";
        %36 = #32;
        jump %36;
    }
}

func main {
    proc #32 {
        %52 = "103";
        $sp = ($sp + %52);
        %13 = "2";
        %99 = ($sp - %13);
        %00 = "2";
        %d1 = ($sp + %00);
        stack[%d1] = %99;
        %b9 = "101";
        %79 = ($sp - %b9);
        %abf = "3";
        %37 = ($sp + %abf);
        stack[%37] = %79;
        %b3 = "99";
        %a0 = "4";
        %43 = ($sp + %a0);
        stack[%43] = %b3;
        %1a = "0";
        %50 = "5";
        %4d = ($sp + %50);
        stack[%4d] = %1a;
        %45 = "1";
        %a3 = ($sp + %45);
        %57 = #ad;
        stack[%a3] = %57;
        %26 = #a1;
        jump %26;
    }

    proc #ad {
        %371 = "2";
        %dc = ($sp - %371);
        %b8 = "2";
        %25 = ($sp + %b8);
        stack[%25] = %dc;
        %dd = "10";
        %a7 = "3";
        %e0 = ($sp + %a7);
        stack[%e0] = %dd;
        %49 = "-100";
        %7e = "4";
        %66 = ($sp + %7e);
        stack[%66] = %49;
        %d9 = "100";
        %3b = "5";
        %80 = ($sp + %3b);
        stack[%80] = %d9;
        %44 = "1";
        %b5 = ($sp + %44);
        %24 = #55;
        stack[%b5] = %24;
        %fd = #cf;
        jump %fd;
    }

    proc #55 {
        %02 = "Unsorted:";
        %1b = "2";
        %9a = ($sp + %1b);
        stack[%9a] = %02;
        %08 = "1";
        %eb = ($sp + %08);
        %c4 = #263;
        stack[%eb] = %c4;
        %1f = #09;
        jump %1f;
    }

    proc #263 {
        %71 = "2";
        %135 = ($sp - %71);
        %d4 = "2";
        %ca = ($sp + %d4);
        stack[%ca] = %135;
        %0e = "1";
        %d5 = ($sp + %0e);
        %3e = #58;
        stack[%d5] = %3e;
        %54 = #bd;
        jump %54;
    }

    proc #58 {
        %ba = "Sorted:";
        %a72 = "2";
        %27 = ($sp + %a72);
        stack[%27] = %ba;
        %2e = "1";
        %70 = ($sp + %2e);
        %21 = #e3;
        stack[%70] = %21;
        %92 = #09;
        jump %92;
    }

    proc #e3 {
        %dd4 = "2";
        %3d = ($sp - %dd4);
        %cc = "2";
        %088 = ($sp + %cc);
        stack[%088] = %3d;
        %04 = "1";
        %4de = ($sp + %04);
        %7f = #4e;
        stack[%4de] = %7f;
        %4c = #f3;
        jump %4c;
    }

    proc #4e {
        %a8 = "2";
        %a5 = ($sp - %a8);
        %15 = "2";
        %1c = ($sp + %15);
        stack[%1c] = %a5;
        %cac = "1";
        %17 = ($sp + %cac);
        %add = #2c;
        stack[%17] = %add;
        %571 = #bd;
        jump %571;
    }

    proc #2c {
        %33 = "Pushing `12.5` then sorting again:";
        %3d6 = "2";
        %1e = ($sp + %3d6);
        stack[%1e] = %33;
        %8f = "1";
        %b1 = ($sp + %8f);
        %77 = #06;
        stack[%b1] = %77;
        %e6 = #09;
        jump %e6;
    }

    proc #06 {
        %61 = "2";
        %7f5 = ($sp - %61);
        %e2 = "2";
        %97 = ($sp + %e2);
        stack[%97] = %7f5;
        %7fb = "12.5";
        %a9 = "3";
        %5e = ($sp + %a9);
        stack[%5e] = %7fb;
        %c3 = "1";
        %b8d = ($sp + %c3);
        %16 = #2cd;
        stack[%b8d] = %16;
        %dde = #e64;
        jump %dde;
    }

    proc #2cd {
        %e1 = "2";
        %23 = ($sp - %e1);
        %b7 = "2";
        %ba8 = ($sp + %b7);
        stack[%ba8] = %23;
        %32e = "1";
        %86 = ($sp + %32e);
        %4cc = #0a;
        stack[%86] = %4cc;
        %adb = #f3;
        jump %adb;
    }

    proc #0a {
        %93 = "2";
        %bf = ($sp - %93);
        %e19 = "2";
        %e7 = ($sp + %e19);
        stack[%e7] = %bf;
        %3b0 = "1";
        %abe = ($sp + %3b0);
        %51 = #86d;
        stack[%abe] = %51;
        %792 = #bd;
        jump %792;
    }

    proc #86d {
        exit;
    }
}

func func.Vec_new {
    proc #a1 {
        %1d = "5";
        $sp = ($sp + %1d);
        %73 = "2";
        %87 = ($sp - %73);
        %273 = stack[%87];
        %4b = "3";
        %b8f = ($sp - %4b);
        %66b = stack[%b8f];
        %01 = "0";
        %c3d = (%66b + %01);
        stack[%c3d] = %273;
        %588 = "1";
        %45d = ($sp - %588);
        %323 = stack[%45d];
        %ff = "3";
        %0e1 = ($sp - %ff);
        %c2 = stack[%0e1];
        %2a = "1";
        %8fa = (%c2 + %2a);
        stack[%8fa] = %323;
        %88 = "0";
        %9b = ($sp - %88);
        %72 = stack[%9b];
        %ffe = "3";
        %6e = ($sp - %ffe);
        %321 = stack[%6e];
        %be = "2";
        %f2 = (%321 + %be);
        stack[%f2] = %72;
        %f0 = "5";
        $sp = ($sp - %f0);
        %9a2 = "1";
        %ef = ($sp + %9a2);
        %2c5 = stack[%ef];
        jump %2c5;
    }
}

func func.Vec_entry {
    proc #a73 {
        %f6 = "4";
        $sp = ($sp + %f6);
        %67 = "0";
        %bf7 = ($sp - %67);
        %c7 = stack[%bf7];
        %bd0 = "0";
        %f67 = "1";
        %7d = ($sp - %f67);
        %82 = stack[%7d];
        %82a = (%82 + %bd0);
        %063 = stack[%82a];
        %c21 = (%063 + %c7);
        %34 = "2";
        %0d = ($sp - %34);
        %0d6 = stack[%0d];
        %bdb = "0";
        %84 = (%0d6 + %bdb);
        stack[%84] = %c21;
        %f66 = "4";
        $sp = ($sp - %f66);
        %ea = "1";
        %add9 = ($sp + %ea);
        %8d = stack[%add9];
        jump %8d;
    }
}

func func.Vec_cap {
    proc #b6 {
        %54b = "3";
        $sp = ($sp + %54b);
        %ef2 = "1";
        %a83 = "0";
        %b96 = ($sp - %a83);
        %46 = stack[%b96];
        %f6a = (%46 + %ef2);
        %6b = stack[%f6a];
        %b90 = "1";
        %258 = ($sp - %b90);
        %28 = stack[%258];
        %cd = "0";
        %7c = (%28 + %cd);
        stack[%7c] = %6b;
        %d8 = "3";
        $sp = ($sp - %d8);
        %232 = "1";
        %7c5 = ($sp + %232);
        %81 = stack[%7c5];
        jump %81;
    }
}

func func.Vec_len_r {
    proc #212 {
        %7b = "3";
        $sp = ($sp + %7b);
        %47 = "2";
        %8a = "0";
        %9c = ($sp - %8a);
        %05 = stack[%9c];
        %8a3 = (%05 + %47);
        %df = "1";
        %64 = ($sp - %df);
        %3716 = stack[%64];
        %bef = "0";
        %d5d = (%3716 + %bef);
        stack[%d5d] = %8a3;
        %db = "3";
        $sp = ($sp - %db);
        %f4 = "1";
        %4f = ($sp + %f4);
        %3f = stack[%4f];
        jump %3f;
    }
}

func func.Vec_len {
    proc #94 {
        %a09 = "4";
        $sp = ($sp + %a09);
        %da = "0";
        %516 = ($sp - %da);
        %814 = "2";
        %c42 = ($sp + %814);
        stack[%c42] = %516;
        %a4 = "1";
        %c9 = ($sp - %a4);
        %2f = stack[%c9];
        %80d = "3";
        %60 = ($sp + %80d);
        stack[%60] = %2f;
        %91 = "1";
        %1c2 = ($sp + %91);
        %cfd = #30;
        stack[%1c2] = %cfd;
        %73f = #212;
        jump %73f;
    }

    proc #30 {
        %a14 = "0";
        %b5d = ($sp - %a14);
        %f8 = stack[%b5d];
        %4a = stack[%f8];
        %35 = "2";
        %1f7 = ($sp - %35);
        %6a = stack[%1f7];
        %c0 = "0";
        %543 = (%6a + %c0);
        stack[%543] = %4a;
        %9d = "4";
        $sp = ($sp - %9d);
        %1e3 = "1";
        %d3 = ($sp + %1e3);
        %4f1 = stack[%d3];
        jump %4f1;
    }
}

func func.Vec_push {
    proc #e64 {
        %818 = "7";
        $sp = ($sp + %818);
        %0a2 = "3";
        %98 = ($sp - %0a2);
        %2a2 = "2";
        %572 = ($sp + %2a2);
        stack[%572] = %98;
        %1cf = "5";
        %18 = ($sp - %1cf);
        %41 = stack[%18];
        %6bf = "3";
        %79a = ($sp + %6bf);
        stack[%79a] = %41;
        %342 = "1";
        %6e2 = ($sp + %342);
        %7de = #154;
        stack[%6e2] = %7de;
        %9f = #b6;
        jump %9f;
    }

    proc #154 {
        %734 = "2";
        %990 = ($sp - %734);
        %4f3 = "2";
        %07 = ($sp + %4f3);
        stack[%07] = %990;
        %798 = "5";
        %1a9 = ($sp - %798);
        %094 = stack[%1a9];
        %2d = "3";
        %468 = ($sp + %2d);
        stack[%468] = %094;
        %efe = "1";
        %2d8 = ($sp + %efe);
        %fd8 = #5c;
        stack[%2d8] = %fd8;
        %cb = #94;
        jump %cb;
    }

    proc #5c {
        %6e3 = "2";
        %603 = ($sp - %6e3);
        %0c = stack[%603];
        %7b9 = "3";
        %881 = ($sp - %7b9);
        %75 = stack[%881];
        %74 = (%0c < %75);
        %a91 = #e3e;
        %fde = #023;
        if %74 then jump %a91 else jump %fde;
    }

    proc #023 {
        %6d = "7";
        $sp = ($sp - %6d);
        %255 = "1";
        %4c2 = ($sp + %255);
        %fc = stack[%4c2];
        jump %fc;
    }

    proc #e3e {
        %7d6 = "1";
        %ef9 = ($sp - %7d6);
        %499 = "2";
        %80a = ($sp + %499);
        stack[%80a] = %ef9;
        %665 = "5";
        %ef5 = ($sp - %665);
        %3f7 = stack[%ef5];
        %301 = "3";
        %66a = ($sp + %301);
        stack[%66a] = %3f7;
        %77b = "2";
        %755 = ($sp - %77b);
        %8a7 = stack[%755];
        %94e = "4";
        %06f = ($sp + %94e);
        stack[%06f] = %8a7;
        %27a = "1";
        %bb = ($sp + %27a);
        %820 = #b4;
        stack[%bb] = %820;
        %0a7 = #a73;
        jump %0a7;
    }

    proc #b4 {
        %60d = "4";
        %9a1 = ($sp - %60d);
        %2df = stack[%9a1];
        %85 = "1";
        %47f = ($sp - %85);
        %bda = stack[%47f];
        %067 = "0";
        %74e = (%bda + %067);
        stack[%74e] = %2df;
        %f1 = "0";
        %8f3 = ($sp - %f1);
        %e4 = "2";
        %f9 = ($sp + %e4);
        stack[%f9] = %8f3;
        %0a0 = "5";
        %0af = ($sp - %0a0);
        %ba0 = stack[%0af];
        %a73c = "3";
        %c79 = ($sp + %a73c);
        stack[%c79] = %ba0;
        %055 = "1";
        %8c = ($sp + %055);
        %98a = #324;
        stack[%8c] = %98a;
        %fc9 = #212;
        jump %fc9;
    }

    proc #324 {
        %330 = "2";
        %aa = ($sp - %330);
        %42 = stack[%aa];
        %e1f = "1";
        %451 = (%42 + %e1f);
        %aaf = "0";
        %13d = ($sp - %aaf);
        %707 = stack[%13d];
        %65 = "0";
        %5f = (%707 + %65);
        stack[%5f] = %451;
        %8ce = #023;
        jump %8ce;
    }
}

func func.Vec_print {
    proc #bd {
        %38 = "6";
        $sp = ($sp + %38);
        %20 = "0";
        %4514 = "3";
        %ee = ($sp - %4514);
        %40 = "0";
        %727 = (%ee + %40);
        stack[%727] = %20;
        %56 = "Vec (";
        %28f = "0";
        %859 = ($sp - %28f);
        %991 = "0";
        %8e = (%859 + %991);
        stack[%8e] = %56;
        %667 = "2";
        %81d = ($sp - %667);
        %76 = "2";
        %8c5 = ($sp + %76);
        stack[%8c5] = %81d;
        %840 = "4";
        %e5 = ($sp - %840);
        %9b1 = stack[%e5];
        %455 = "3";
        %3db = ($sp + %455);
        stack[%3db] = %9b1;
        %f8c = "1";
        %731 = ($sp + %f8c);
        %96 = #527;
        stack[%731] = %96;
        %59 = #94;
        jump %59;
    }

    proc #527 {
        %e8 = "0";
        %4c3 = ($sp - %e8);
        %20d = stack[%4c3];
        %3a = "2";
        %a4e = ($sp - %3a);
        %373 = stack[%a4e];
        %af = (%20d ~ %373);
        %61f = "0";
        %d3b = ($sp - %61f);
        %eec = "0";
        %48 = (%d3b + %eec);
        stack[%48] = %af;
        %dd4e = "0";
        %8fe = ($sp - %dd4e);
        %10 = stack[%8fe];
        %e20 = ") ";
        %f1e = (%10 ~ %e20);
        %0f = "0";
        %4df = ($sp - %0f);
        %0f0 = "0";
        %d7 = (%4df + %0f0);
        stack[%d7] = %f1e;
        %df4 = #283;
        jump %df4;
    }

    proc #90 {
        %235 = "0";
        %1fb = ($sp - %235);
        %fc6 = stack[%1fb];
        %272 = "2";
        %f1d = ($sp + %272);
        stack[%f1d] = %fc6;
        %d16 = "1";
        %cb2 = ($sp + %d16);
        %0ed = #03;
        stack[%cb2] = %0ed;
        %df7 = #09;
        jump %df7;
    }

    proc #03 {
        %92f = "6";
        $sp = ($sp - %92f);
        %1f3 = "1";
        %cc5 = ($sp + %1f3);
        %84f = stack[%cc5];
        jump %84f;
    }

    proc #030 {
        %b53 = "3";
        %667a = ($sp - %b53);
        %89 = stack[%667a];
        %8ae = "0";
        %6ec = (!(%89 == %8ae));
        %d31 = #007;
        %90b = #2e1;
        if %6ec then jump %d31 else jump %90b;
    }

    proc #2e1 {
        %5c5 = "1";
        %aaa = ($sp - %5c5);
        %7a = "2";
        %846 = ($sp + %7a);
        stack[%846] = %aaa;
        %c6 = "4";
        %429 = ($sp - %c6);
        %5c6 = stack[%429];
        %19 = "3";
        %1a0 = ($sp + %19);
        stack[%1a0] = %5c6;
        %18f = "3";
        %b13 = ($sp - %18f);
        %6d1 = stack[%b13];
        %85b = "4";
        %5f3 = ($sp + %85b);
        stack[%5f3] = %6d1;
        %ff4 = "1";
        %2f7 = ($sp + %ff4);
        %ae = #39;
        stack[%2f7] = %ae;
        %02e = #a73;
        jump %02e;
    }

    proc #39 {
        %a03 = "0";
        %e1b = ($sp - %a03);
        %426 = stack[%e1b];
        %bb8 = "1";
        %8140 = ($sp - %bb8);
        %68 = stack[%8140];
        %17d = stack[%68];
        %f11 = (%426 ~ %17d);
        %805 = "0";
        %b2 = ($sp - %805);
        %f6a2 = "0";
        %976 = (%b2 + %f6a2);
        stack[%976] = %f11;
        %fd6 = "3";
        %b63 = ($sp - %fd6);
        %583 = stack[%b63];
        %1c7 = "1";
        %7ea = (%583 + %1c7);
        %791 = "3";
        %2ab = ($sp - %791);
        %f81 = "0";
        %d8f = (%2ab + %f81);
        stack[%d8f] = %7ea;
        %090 = #283;
        jump %090;
    }

    proc #007 {
        %c8 = "0";
        %3f4 = ($sp - %c8);
        %34f = stack[%3f4];
        %5e9 = ", ";
        %0ee = (%34f ~ %5e9);
        %9ff = "0";
        %e3b = ($sp - %9ff);
        %508 = "0";
        %c95 = (%e3b + %508);
        stack[%c95] = %0ee;
        %577 = #2e1;
        jump %577;
    }

    proc #283 {
        %29 = "3";
        %bbf = ($sp - %29);
        %da2 = stack[%bbf];
        %f5 = "2";
        %137 = ($sp - %f5);
        %a92 = stack[%137];
        %b1d = (%da2 < %a92);
        %2c2 = #030;
        %14 = #90;
        if %b1d then jump %2c2 else jump %14;
    }
}

func func.Vec_sort {
    proc #f3 {
        %ade = "9";
        $sp = ($sp + %ade);
        %092 = "0";
        %ff43 = "6";
        %39e = ($sp - %ff43);
        %c9a = "0";
        %aec = (%39e + %c9a);
        stack[%aec] = %092;
        %c70 = "4";
        %4e5 = ($sp - %c70);
        %88c = "2";
        %400 = ($sp + %88c);
        stack[%400] = %4e5;
        %74b = "7";
        %b0 = ($sp - %74b);
        %545 = stack[%b0];
        %14f = "3";
        %61d = ($sp + %14f);
        stack[%61d] = %545;
        %ca6 = "1";
        %64c = ($sp + %ca6);
        %2da = #a2;
        stack[%64c] = %2da;
        %38a = #94;
        jump %38a;
    }

    proc #a2 {
        %592 = #d2;
        jump %592;
    }

    proc #8d7 {
        %906 = "9";
        $sp = ($sp - %906);
        %dde4 = "1";
        %546 = ($sp + %dde4);
        %8c0 = stack[%546];
        jump %8c0;
    }

    proc #322 {
        %de = "6";
        %82b = ($sp - %de);
        %bc = stack[%82b];
        %9cc = "5";
        %bbd = ($sp - %9cc);
        %c37 = "0";
        %722 = (%bbd + %c37);
        stack[%722] = %bc;
        %1c4 = #493;
        jump %1c4;
    }

    proc #3ee {
        %b0c = "6";
        %5f1 = ($sp - %b0c);
        %82c = stack[%5f1];
        %cd3 = "1";
        %7b2 = (%82c + %cd3);
        %50e = "6";
        %9ca = ($sp - %50e);
        %770 = "0";
        %f63 = (%9ca + %770);
        stack[%f63] = %7b2;
        %36d = #d2;
        jump %36d;
    }

    proc #887 {
        %515 = "3";
        %d7b = ($sp - %515);
        %904 = "2";
        %70a = ($sp + %904);
        stack[%70a] = %d7b;
        %18d = "7";
        %5b = ($sp - %18d);
        %19b = stack[%5b];
        %ea2 = "3";
        %a9e = ($sp + %ea2);
        stack[%a9e] = %19b;
        %8ee = "6";
        %6d12 = ($sp - %8ee);
        %c0d = stack[%6d12];
        %49d = "4";
        %ab3 = ($sp + %49d);
        stack[%ab3] = %c0d;
        %082 = "1";
        %bed = ($sp + %082);
        %d2e = #d20;
        stack[%bed] = %d2e;
        %b14 = #a73;
        jump %b14;
    }

    proc #d20 {
        %7a9 = "2";
        %53 = ($sp - %7a9);
        %108 = "2";
        %b9e = ($sp + %108);
        stack[%b9e] = %53;
        %102 = "7";
        %71e = ($sp - %102);
        %f7 = stack[%71e];
        %e38 = "3";
        %b17 = ($sp + %e38);
        stack[%b17] = %f7;
        %ec = "5";
        %ba1 = ($sp - %ec);
        %fc7 = stack[%ba1];
        %9c2 = "4";
        %701 = ($sp + %9c2);
        stack[%701] = %fc7;
        %406 = "1";
        %8ea = ($sp + %406);
        %164 = #328;
        stack[%8ea] = %164;
        %5fa = #a73;
        jump %5fa;
    }

    proc #328 {
        %83 = "3";
        %85c = ($sp - %83);
        %3f7e = stack[%85c];
        %f43 = stack[%3f7e];
        %6be = "1";
        %a3f = ($sp - %6be);
        %613 = "0";
        %858 = (%a3f + %613);
        stack[%858] = %f43;
        %8b = "2";
        %260 = ($sp - %8b);
        %7550 = stack[%260];
        %45c = stack[%7550];
        %3c = "0";
        %d82 = ($sp - %3c);
        %036 = "0";
        %ba0e = (%d82 + %036);
        stack[%ba0e] = %45c;
        %0a3 = "0";
        %462 = ($sp - %0a3);
        %68f = stack[%462];
        %78 = "1";
        %059 = ($sp - %78);
        %b42 = stack[%059];
        %8ab = (%68f < %b42);
        %fcf = #081;
        %63 = #5a;
        if %8ab then jump %fcf else jump %63;
    }

    proc #5a {
        %d6 = "5";
        %f97 = ($sp - %d6);
        %3716c = stack[%f97];
        %6e7 = "1";
        %aa7 = (%3716c + %6e7);
        %4d8 = "5";
        %b966 = ($sp - %4d8);
        %12 = "0";
        %020 = (%b966 + %12);
        stack[%020] = %aa7;
        %eea = #493;
        jump %eea;
    }

    proc #081 {
        %042 = "3";
        %c950 = ($sp - %042);
        %830 = stack[%c950];
        %920 = "2";
        %ca8 = ($sp + %920);
        stack[%ca8] = %830;
        %dda = "2";
        %8feb = ($sp - %dda);
        %e388 = stack[%8feb];
        %0b = "3";
        %bf5 = ($sp + %0b);
        stack[%bf5] = %e388;
        %c5 = "1";
        %368 = ($sp + %c5);
        %cfdb = #fd9;
        stack[%368] = %cfdb;
        %a06 = #37b;
        jump %a06;
    }

    proc #fd9 {
        %49f = #5a;
        jump %49f;
    }

    proc #493 {
        %70b = "5";
        %3aa = ($sp - %70b);
        %84a = stack[%3aa];
        %437 = "4";
        %8fb = ($sp - %437);
        %d0 = stack[%8fb];
        %3a0 = (%84a < %d0);
        %35a = #887;
        %abf1 = #3ee;
        if %3a0 then jump %35a else jump %abf1;
    }

    proc #d2 {
        %b08 = "6";
        %aa2 = ($sp - %b08);
        %2b = stack[%aa2];
        %e5c = "4";
        %7d9 = ($sp - %e5c);
        %4b4 = stack[%7d9];
        %a9f = (%2b < %4b4);
        %e3d = #322;
        %03d = #8d7;
        if %a9f then jump %e3d else jump %03d;
    }
}

func func.swap {
    proc #37b {
        %512 = "4";
        $sp = ($sp + %512);
        %1cb = "2";
        %d25 = ($sp - %1cb);
        %258b = stack[%d25];
        %eb6 = stack[%258b];
        %c9c = "0";
        %596 = ($sp - %c9c);
        %eaa = "0";
        %dd1 = (%596 + %eaa);
        stack[%dd1] = %eb6;
        %107 = "1";
        %2d6 = ($sp - %107);
        %eaf = stack[%2d6];
        %91a = stack[%eaf];
        %69 = "2";
        %ed = ($sp - %69);
        %14b = stack[%ed];
        %6e9 = "0";
        %cda = (%14b + %6e9);
        stack[%cda] = %91a;
        %3ac = "0";
        %ce = ($sp - %3ac);
        %6c = stack[%ce];
        %1b3 = "1";
        %baf = ($sp - %1b3);
        %4c0 = stack[%baf];
        %675 = "0";
        %a75 = (%4c0 + %675);
        stack[%a75] = %6c;
        %d55 = "4";
        $sp = ($sp - %d55);
        %e57 = "1";
        %c2b = ($sp + %e57);
        %abc = stack[%c2b];
        jump %abc;
    }
}

func func.Vec_random_populate {
    proc #cf {
        %655 = "7";
        $sp = ($sp + %655);
        %666 = #0da;
        jump %666;
    }

    proc #383 {
        %b8da = "7";
        $sp = ($sp - %b8da);
        %690 = "1";
        %341 = ($sp + %690);
        %bde = stack[%341];
        jump %bde;
    }

    proc #932 {
        %940 = "0";
        %bae = ($sp - %940);
        %899 = "2";
        %81e = ($sp + %899);
        stack[%81e] = %bae;
        %509 = "3";
        %408 = ($sp - %509);
        %6b2 = stack[%408];
        %f89 = "3";
        %73c = ($sp + %f89);
        stack[%73c] = %6b2;
        %0e6 = "2";
        %752 = ($sp - %0e6);
        %8aed = stack[%752];
        %7a8 = "4";
        %419 = ($sp + %7a8);
        stack[%419] = %8aed;
        %b43 = "1";
        %95 = ($sp + %b43);
        %49a = #dca;
        stack[%95] = %49a;
        %450 = #6f;
        jump %450;
    }

    proc #dca {
        %df5 = "5";
        %11 = ($sp - %df5);
        %ec5 = stack[%11];
        %144 = "2";
        %6a3 = ($sp + %144);
        stack[%6a3] = %ec5;
        %3016 = "0";
        %b6a = ($sp - %3016);
        %0a0b = stack[%b6a];
        %a59 = "3";
        %61e = ($sp + %a59);
        stack[%61e] = %0a0b;
        %0ff = "1";
        %480 = ($sp + %0ff);
        %b21 = #4db;
        stack[%480] = %b21;
        %2e7 = #e64;
        jump %2e7;
    }

    proc #4db {
        %11f = "1";
        %5c9 = ($sp - %11f);
        %ba7 = stack[%5c9];
        %6cc = "1";
        %458 = (%ba7 + %6cc);
        %fe = "1";
        %92b = ($sp - %fe);
        %926 = "0";
        %560 = (%92b + %926);
        stack[%560] = %458;
        %104 = #0da;
        jump %104;
    }

    proc #0da {
        %e29 = "1";
        %5a7 = ($sp - %e29);
        %d36 = stack[%5a7];
        %286 = "4";
        %0aa = ($sp - %286);
        %0d7 = stack[%0aa];
        %7ba = (%d36 < %0d7);
        %c93 = #932;
        %31 = #383;
        if %7ba then jump %c93 else jump %31;
    }
}

func func.out {
    proc #09 {
        %64f = "2";
        $sp = ($sp + %64f);
        %b54 = "0";
        %1a0c = ($sp - %b54);
        %422 = stack[%1a0c];
        out %422;
        %f7a = "2";
        $sp = ($sp - %f7a);
        %177 = "1";
        %d9b = ($sp + %177);
        %618 = stack[%d9b];
        jump %618;
    }
}

func func.in {
    proc #391 {
        %8e8 = "3";
        $sp = ($sp + %8e8);
        %869 = "0";
        %010 = ($sp - %869);
        in;
        stack[%010] = $answer;
        %4507 = "0";
        %7e5 = ($sp - %4507);
        %a26 = stack[%7e5];
        %84ab = "1";
        %e298 = ($sp - %84ab);
        %2f4 = stack[%e298];
        %610 = "0";
        %ae9 = (%2f4 + %610);
        stack[%ae9] = %a26;
        %af6 = "3";
        $sp = ($sp - %af6);
        %766 = "1";
        %d59 = ($sp + %766);
        %756 = stack[%d59];
        jump %756;
    }
}

func func.random {
    proc #6f {
        %c33 = "5";
        $sp = ($sp + %c33);
        %b15 = "0";
        %f19 = ($sp - %b15);
        %00e = "2";
        %62 = ($sp - %00e);
        %b5b = stack[%62];
        %100 = "1";
        %6a5 = ($sp - %100);
        %fcd = stack[%6a5];
        stack[%f19] = (%b5b <random> %fcd);
        %403 = "0";
        %94c = ($sp - %403);
        %ee6 = stack[%94c];
        %6c2 = "3";
        %ed3 = ($sp - %6c2);
        %89d = stack[%ed3];
        %22 = "0";
        %a50 = (%89d + %22);
        stack[%a50] = %ee6;
        %fa = "5";
        $sp = ($sp - %fa);
        %2c21 = "1";
        %151 = ($sp + %2c21);
        %3de = stack[%151];
        jump %3de;
    }
}