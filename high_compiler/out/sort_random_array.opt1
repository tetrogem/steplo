main {
    proc #ab {
        $sp = "-1";
        jump #32;
    }
}

func main {
    proc #32 {
        $sp = ($sp + "103");
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = ($sp - "101");
        stack[($sp + "4")] = "99";
        stack[($sp + "5")] = "0";
        stack[($sp + "1")] = #ad;
        jump #a1;
    }

    proc #ad {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = "10";
        stack[($sp + "4")] = "-100";
        stack[($sp + "5")] = "100";
        stack[($sp + "1")] = #55;
        jump #cf;
    }

    proc #55 {
        stack[($sp + "2")] = "Unsorted:";
        stack[($sp + "1")] = #26;
        jump #09;
    }

    proc #26 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #58;
        jump #bd;
    }

    proc #58 {
        stack[($sp + "2")] = "Sorted:";
        stack[($sp + "1")] = #e3;
        jump #09;
    }

    proc #e3 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #4e;
        jump #f3;
    }

    proc #4e {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #2c;
        jump #bd;
    }

    proc #2c {
        stack[($sp + "2")] = "Pushing `12.5` then sorting again:";
        stack[($sp + "1")] = #06;
        jump #09;
    }

    proc #06 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = "12.5";
        stack[($sp + "1")] = #2cd;
        jump #e6;
    }

    proc #2cd {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #0a;
        jump #f3;
    }

    proc #0a {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #86;
        jump #bd;
    }

    proc #86 {
        exit;
    }
}

func func.Vec_new {
    proc #a1 {
        $sp = ($sp + "5");
        stack[stack[($sp - "3")]] = stack[($sp - "2")];
        stack[(stack[($sp - "3")] + "1")] = stack[($sp - "1")];
        stack[(stack[($sp - "3")] + "2")] = stack[$sp];
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.Vec_entry {
    proc #a7 {
        $sp = ($sp + "4");
        stack[stack[($sp - "2")]] = (stack[stack[($sp - "1")]] + stack[$sp]);
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vec_cap {
    proc #b6 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[(stack[$sp] + "1")];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vec_len_r {
    proc #21 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = (stack[$sp] + "2");
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vec_len {
    proc #94 {
        $sp = ($sp + "4");
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "1")];
        stack[($sp + "1")] = #30;
        jump #21;
    }

    proc #30 {
        stack[stack[($sp - "2")]] = stack[stack[$sp]];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vec_push {
    proc #e6 {
        $sp = ($sp + "7");
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #15;
        jump #b6;
    }

    proc #15 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #5c;
        jump #94;
    }

    proc #5c {
        if (stack[($sp - "2")] < stack[($sp - "3")]) then jump #e3e else jump #02;
    }

    proc #02 {
        $sp = ($sp - "7");
        jump stack[($sp + "1")];
    }

    proc #e3e {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "4")] = stack[($sp - "2")];
        stack[($sp + "1")] = #b4;
        jump #a7;
    }

    proc #b4 {
        stack[stack[($sp - "1")]] = stack[($sp - "4")];
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #324;
        jump #21;
    }

    proc #324 {
        stack[stack[$sp]] = (stack[($sp - "2")] + "1");
        jump #02;
    }
}

func func.Vec_print {
    proc #bd {
        $sp = ($sp + "6");
        stack[($sp - "3")] = "0";
        stack[$sp] = "Vec (";
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "4")];
        stack[($sp + "1")] = #52;
        jump #94;
    }

    proc #52 {
        stack[$sp] = (stack[$sp] ~ stack[($sp - "2")]);
        stack[$sp] = (stack[$sp] ~ ") ");
        if (stack[($sp - "3")] < stack[($sp - "2")]) then jump #03 else jump #90;
    }

    proc #90 {
        stack[($sp + "2")] = stack[$sp];
        stack[($sp + "1")] = #039;
        jump #09;
    }

    proc #039 {
        $sp = ($sp - "6");
        jump stack[($sp + "1")];
    }

    proc #03 {
        if (!(stack[($sp - "3")] == "0")) then jump #00 else jump #2e;
    }

    proc #2e {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "4")];
        stack[($sp + "4")] = stack[($sp - "3")];
        stack[($sp + "1")] = #39;
        jump #a7;
    }

    proc #39 {
        stack[$sp] = (stack[$sp] ~ stack[stack[($sp - "1")]]);
        stack[($sp - "3")] = (stack[($sp - "3")] + "1");
        if (stack[($sp - "3")] < stack[($sp - "2")]) then jump #03 else jump #90;
    }

    proc #00 {
        stack[$sp] = (stack[$sp] ~ ", ");
        jump #2e;
    }
}

func func.Vec_sort {
    proc #f3 {
        $sp = ($sp + "9");
        stack[($sp - "6")] = "0";
        stack[($sp + "2")] = ($sp - "4");
        stack[($sp + "3")] = stack[($sp - "7")];
        stack[($sp + "1")] = #a2;
        jump #94;
    }

    proc #a2 {
        if (stack[($sp - "6")] < stack[($sp - "4")]) then jump #322 else jump #8d;
    }

    proc #8d {
        $sp = ($sp - "9");
        jump stack[($sp + "1")];
    }

    proc #322 {
        stack[($sp - "5")] = stack[($sp - "6")];
        if (stack[($sp - "5")] < stack[($sp - "4")]) then jump #88 else jump #3e;
    }

    proc #3e {
        stack[($sp - "6")] = (stack[($sp - "6")] + "1");
        if (stack[($sp - "6")] < stack[($sp - "4")]) then jump #322 else jump #8d;
    }

    proc #88 {
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = stack[($sp - "7")];
        stack[($sp + "4")] = stack[($sp - "6")];
        stack[($sp + "1")] = #d2;
        jump #a7;
    }

    proc #d2 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "7")];
        stack[($sp + "4")] = stack[($sp - "5")];
        stack[($sp + "1")] = #328;
        jump #a7;
    }

    proc #328 {
        stack[($sp - "1")] = stack[stack[($sp - "3")]];
        stack[$sp] = stack[stack[($sp - "2")]];
        if (stack[$sp] < stack[($sp - "1")]) then jump #08 else jump #5a;
    }

    proc #5a {
        stack[($sp - "5")] = (stack[($sp - "5")] + "1");
        if (stack[($sp - "5")] < stack[($sp - "4")]) then jump #88 else jump #3e;
    }

    proc #08 {
        stack[($sp + "2")] = stack[($sp - "3")];
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #5a;
        jump #37;
    }
}

func func.swap {
    proc #37 {
        $sp = ($sp + "4");
        stack[$sp] = stack[stack[($sp - "2")]];
        stack[stack[($sp - "2")]] = stack[stack[($sp - "1")]];
        stack[stack[($sp - "1")]] = stack[$sp];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vec_random_populate {
    proc #cf {
        $sp = ($sp + "7");
        if (stack[($sp - "1")] < stack[($sp - "4")]) then jump #93 else jump #38;
    }

    proc #38 {
        $sp = ($sp - "7");
        jump stack[($sp + "1")];
    }

    proc #93 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "4")] = stack[($sp - "2")];
        stack[($sp + "1")] = #dc;
        jump #6f;
    }

    proc #dc {
        stack[($sp + "2")] = stack[($sp - "5")];
        stack[($sp + "3")] = stack[$sp];
        stack[($sp + "1")] = #4d;
        jump #e6;
    }

    proc #4d {
        stack[($sp - "1")] = (stack[($sp - "1")] + "1");
        if (stack[($sp - "1")] < stack[($sp - "4")]) then jump #93 else jump #38;
    }
}

func func.out {
    proc #09 {
        $sp = ($sp + "2");
        out stack[$sp];
        $sp = ($sp - "2");
        jump stack[($sp + "1")];
    }
}

func func.random {
    proc #6f {
        $sp = ($sp + "5");
        stack[$sp] = (stack[($sp - "2")] <random> stack[($sp - "1")]);
        stack[stack[($sp - "3")]] = stack[$sp];
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}