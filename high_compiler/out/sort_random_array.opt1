main {
    proc #1f {
        $sp = "-1";
        jump #c4;
    }
}

func main {
    proc #c4 {
        $sp = ($sp + "103");
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = ($sp - "101");
        stack[($sp + "4")] = "99";
        stack[($sp + "5")] = "0";
        stack[($sp + "1")] = #7f;
        jump #e0;
    }

    proc #7f {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = "10";
        stack[($sp + "4")] = "-100";
        stack[($sp + "5")] = "100";
        stack[($sp + "1")] = #2a;
        jump #a4;
    }

    proc #2a {
        stack[($sp + "2")] = "Unsorted:";
        stack[($sp + "1")] = #61;
        jump #64;
    }

    proc #61 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #a49;
        jump #616;
    }

    proc #a49 {
        stack[($sp + "2")] = "Sorted:";
        stack[($sp + "1")] = #50;
        jump #64;
    }

    proc #50 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #80;
        jump #6f;
    }

    proc #80 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #a5;
        jump #616;
    }

    proc #a5 {
        stack[($sp + "2")] = "Pushing `12.5` then sorting again:";
        stack[($sp + "1")] = #b9;
        jump #64;
    }

    proc #b9 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = "12.5";
        stack[($sp + "1")] = #88;
        jump #20;
    }

    proc #88 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #93;
        jump #6f;
    }

    proc #93 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #3d;
        jump #616;
    }

    proc #3d {
        exit;
    }
}

func func.Vec_new {
    proc #e0 {
        $sp = ($sp + "5");
        stack[stack[($sp - "3")]] = stack[($sp - "2")];
        stack[(stack[($sp - "3")] + "1")] = stack[($sp - "1")];
        stack[(stack[($sp - "3")] + "2")] = stack[$sp];
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.Vec_entry {
    proc #4f {
        $sp = ($sp + "4");
        stack[stack[($sp - "2")]] = (stack[stack[($sp - "1")]] + stack[$sp]);
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vec_cap {
    proc #01 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[(stack[$sp] + "1")];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vec_len_r {
    proc #82 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = (stack[$sp] + "2");
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vec_len {
    proc #a7 {
        $sp = ($sp + "4");
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "1")];
        stack[($sp + "1")] = #fe;
        jump #82;
    }

    proc #fe {
        stack[stack[($sp - "2")]] = stack[stack[$sp]];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vec_push {
    proc #20 {
        $sp = ($sp + "7");
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #8c;
        jump #01;
    }

    proc #8c {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #51;
        jump #a7;
    }

    proc #51 {
        if (stack[($sp - "2")] < stack[($sp - "3")]) then jump #ec else jump #09;
    }

    proc #09 {
        $sp = ($sp - "7");
        jump stack[($sp + "1")];
    }

    proc #ec {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "4")] = stack[($sp - "2")];
        stack[($sp + "1")] = #b93;
        jump #4f;
    }

    proc #b93 {
        stack[stack[($sp - "1")]] = stack[($sp - "4")];
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #52;
        jump #82;
    }

    proc #52 {
        stack[stack[$sp]] = (stack[($sp - "2")] + "1");
        jump #09;
    }
}

func func.Vec_print {
    proc #616 {
        $sp = ($sp + "6");
        stack[($sp - "3")] = "0";
        stack[$sp] = "Vec (";
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "4")];
        stack[($sp + "1")] = #42;
        jump #a7;
    }

    proc #42 {
        stack[$sp] = (stack[$sp] ~ stack[($sp - "2")]);
        stack[$sp] = (stack[$sp] ~ ") ");
        if (stack[($sp - "3")] < stack[($sp - "2")]) then jump #4b else jump #b2;
    }

    proc #b2 {
        stack[($sp + "2")] = stack[$sp];
        stack[($sp + "1")] = #1d;
        jump #64;
    }

    proc #1d {
        $sp = ($sp - "6");
        jump stack[($sp + "1")];
    }

    proc #4b {
        if (!(stack[($sp - "3")] == "0")) then jump #a2 else jump #22;
    }

    proc #22 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "4")];
        stack[($sp + "4")] = stack[($sp - "3")];
        stack[($sp + "1")] = #4a;
        jump #4f;
    }

    proc #4a {
        stack[$sp] = (stack[$sp] ~ stack[stack[($sp - "1")]]);
        stack[($sp - "3")] = (stack[($sp - "3")] + "1");
        if (stack[($sp - "3")] < stack[($sp - "2")]) then jump #4b else jump #b2;
    }

    proc #a2 {
        stack[$sp] = (stack[$sp] ~ ", ");
        jump #22;
    }
}

func func.Vec_sort {
    proc #6f {
        $sp = ($sp + "9");
        stack[($sp - "6")] = "0";
        stack[($sp + "2")] = ($sp - "4");
        stack[($sp + "3")] = stack[($sp - "7")];
        stack[($sp + "1")] = #0c;
        jump #a7;
    }

    proc #0c {
        if (stack[($sp - "6")] < stack[($sp - "4")]) then jump #24 else jump #7b;
    }

    proc #7b {
        $sp = ($sp - "9");
        jump stack[($sp + "1")];
    }

    proc #24 {
        stack[($sp - "5")] = stack[($sp - "6")];
        if (stack[($sp - "5")] < stack[($sp - "4")]) then jump #e1 else jump #c8;
    }

    proc #c8 {
        stack[($sp - "6")] = (stack[($sp - "6")] + "1");
        if (stack[($sp - "6")] < stack[($sp - "4")]) then jump #24 else jump #7b;
    }

    proc #e1 {
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = stack[($sp - "7")];
        stack[($sp + "4")] = stack[($sp - "6")];
        stack[($sp + "1")] = #65;
        jump #4f;
    }

    proc #65 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "7")];
        stack[($sp + "4")] = stack[($sp - "5")];
        stack[($sp + "1")] = #21;
        jump #4f;
    }

    proc #21 {
        stack[($sp - "1")] = stack[stack[($sp - "3")]];
        stack[$sp] = stack[stack[($sp - "2")]];
        if (stack[$sp] < stack[($sp - "1")]) then jump #f1 else jump #42f;
    }

    proc #42f {
        stack[($sp - "5")] = (stack[($sp - "5")] + "1");
        if (stack[($sp - "5")] < stack[($sp - "4")]) then jump #e1 else jump #c8;
    }

    proc #f1 {
        stack[($sp + "2")] = stack[($sp - "3")];
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #42f;
        jump #c9;
    }
}

func func.swap {
    proc #c9 {
        $sp = ($sp + "4");
        stack[$sp] = stack[stack[($sp - "2")]];
        stack[stack[($sp - "2")]] = stack[stack[($sp - "1")]];
        stack[stack[($sp - "1")]] = stack[$sp];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vec_random_populate {
    proc #a4 {
        $sp = ($sp + "7");
        if (stack[($sp - "1")] < stack[($sp - "4")]) then jump #43 else jump #be;
    }

    proc #be {
        $sp = ($sp - "7");
        jump stack[($sp + "1")];
    }

    proc #43 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "4")] = stack[($sp - "2")];
        stack[($sp + "1")] = #33;
        jump #e3;
    }

    proc #33 {
        stack[($sp + "2")] = stack[($sp - "5")];
        stack[($sp + "3")] = stack[$sp];
        stack[($sp + "1")] = #66;
        jump #20;
    }

    proc #66 {
        stack[($sp - "1")] = (stack[($sp - "1")] + "1");
        if (stack[($sp - "1")] < stack[($sp - "4")]) then jump #43 else jump #be;
    }
}

func func.out {
    proc #64 {
        $sp = ($sp + "2");
        out stack[$sp];
        $sp = ($sp - "2");
        jump stack[($sp + "1")];
    }
}

func func.random_num {
    proc #e3 {
        $sp = ($sp + "5");
        stack[$sp] = (stack[($sp - "2")] <random> stack[($sp - "1")]);
        stack[stack[($sp - "3")]] = stack[$sp];
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}