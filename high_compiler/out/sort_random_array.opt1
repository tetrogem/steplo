main {
    proc #6b {
        $sp = "-1";
        jump #94;
    }
}

func main {
    proc #94 {
        $sp = ($sp + "103");
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = ($sp - "101");
        stack[($sp + "4")] = "99";
        stack[($sp + "5")] = "0";
        stack[($sp + "1")] = #c6;
        jump #b9;
    }

    proc #c6 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = "10";
        stack[($sp + "4")] = "-100";
        stack[($sp + "5")] = "100";
        stack[($sp + "1")] = #29;
        jump #8d;
    }

    proc #29 {
        stack[($sp + "2")] = "Unsorted:";
        stack[($sp + "1")] = #a3;
        jump #48;
    }

    proc #a3 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #6be;
        jump #82;
    }

    proc #6be {
        stack[($sp + "2")] = "Sorted:";
        stack[($sp + "1")] = #7b;
        jump #48;
    }

    proc #7b {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #30;
        jump #e4;
    }

    proc #30 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #f4;
        jump #82;
    }

    proc #f4 {
        stack[($sp + "2")] = "Pushing `12.5` then sorting again:";
        stack[($sp + "1")] = #14;
        jump #48;
    }

    proc #14 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = "12.5";
        stack[($sp + "1")] = #c2;
        jump #0e;
    }

    proc #c2 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #57;
        jump #e4;
    }

    proc #57 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "1")] = #01;
        jump #82;
    }

    proc #01 {
        exit;
    }
}

func func.Vec_new {
    proc #b9 {
        $sp = ($sp + "5");
        stack[stack[($sp - "3")]] = stack[($sp - "2")];
        stack[(stack[($sp - "3")] + "1")] = stack[($sp - "1")];
        stack[(stack[($sp - "3")] + "2")] = stack[$sp];
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.Vec_entry {
    proc #48a {
        $sp = ($sp + "4");
        stack[stack[($sp - "2")]] = (stack[stack[($sp - "1")]] + stack[$sp]);
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vec_cap {
    proc #3d {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[(stack[$sp] + "1")];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vec_len_r {
    proc #d7 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = (stack[$sp] + "2");
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vec_len {
    proc #bb {
        $sp = ($sp + "4");
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "1")];
        stack[($sp + "1")] = #50;
        jump #d7;
    }

    proc #50 {
        stack[stack[($sp - "2")]] = stack[stack[$sp]];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vec_push {
    proc #0e {
        $sp = ($sp + "7");
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #14c;
        jump #3d;
    }

    proc #14c {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #e6;
        jump #bb;
    }

    proc #e6 {
        if (stack[($sp - "2")] < stack[($sp - "3")]) then jump #49 else jump #59;
    }

    proc #59 {
        $sp = ($sp - "7");
        jump stack[($sp + "1")];
    }

    proc #49 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "4")] = stack[($sp - "2")];
        stack[($sp + "1")] = #ee;
        jump #48a;
    }

    proc #ee {
        stack[stack[($sp - "1")]] = stack[($sp - "4")];
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #0b;
        jump #d7;
    }

    proc #0b {
        stack[stack[$sp]] = (stack[($sp - "2")] + "1");
        jump #59;
    }
}

func func.Vec_print {
    proc #82 {
        $sp = ($sp + "6");
        stack[($sp - "3")] = "0";
        stack[$sp] = "Vec (";
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "4")];
        stack[($sp + "1")] = #308;
        jump #bb;
    }

    proc #308 {
        stack[$sp] = (stack[$sp] ~ stack[($sp - "2")]);
        stack[$sp] = (stack[$sp] ~ ") ");
        if (stack[($sp - "3")] < stack[($sp - "2")]) then jump #c4 else jump #2d;
    }

    proc #2d {
        stack[($sp + "2")] = stack[$sp];
        stack[($sp + "1")] = #c3;
        jump #48;
    }

    proc #c3 {
        $sp = ($sp - "6");
        jump stack[($sp + "1")];
    }

    proc #c4 {
        if (!(stack[($sp - "3")] == "0")) then jump #19 else jump #5f;
    }

    proc #5f {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "4")];
        stack[($sp + "4")] = stack[($sp - "3")];
        stack[($sp + "1")] = #ec;
        jump #48a;
    }

    proc #ec {
        stack[$sp] = (stack[$sp] ~ stack[stack[($sp - "1")]]);
        stack[($sp - "3")] = (stack[($sp - "3")] + "1");
        if (stack[($sp - "3")] < stack[($sp - "2")]) then jump #c4 else jump #2d;
    }

    proc #19 {
        stack[$sp] = (stack[$sp] ~ ", ");
        jump #5f;
    }
}

func func.Vec_sort {
    proc #e4 {
        $sp = ($sp + "9");
        stack[($sp - "6")] = "0";
        stack[($sp + "2")] = ($sp - "4");
        stack[($sp + "3")] = stack[($sp - "7")];
        stack[($sp + "1")] = #92;
        jump #bb;
    }

    proc #92 {
        if (stack[($sp - "6")] < stack[($sp - "4")]) then jump #6d else jump #e7;
    }

    proc #e7 {
        $sp = ($sp - "9");
        jump stack[($sp + "1")];
    }

    proc #6d {
        stack[($sp - "5")] = stack[($sp - "6")];
        if (stack[($sp - "5")] < stack[($sp - "4")]) then jump #38 else jump #aa;
    }

    proc #aa {
        stack[($sp - "6")] = (stack[($sp - "6")] + "1");
        if (stack[($sp - "6")] < stack[($sp - "4")]) then jump #6d else jump #e7;
    }

    proc #38 {
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = stack[($sp - "7")];
        stack[($sp + "4")] = stack[($sp - "6")];
        stack[($sp + "1")] = #f6;
        jump #48a;
    }

    proc #f6 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "7")];
        stack[($sp + "4")] = stack[($sp - "5")];
        stack[($sp + "1")] = #e2;
        jump #48a;
    }

    proc #e2 {
        stack[($sp - "1")] = stack[stack[($sp - "3")]];
        stack[$sp] = stack[stack[($sp - "2")]];
        if (stack[$sp] < stack[($sp - "1")]) then jump #45 else jump #a1;
    }

    proc #a1 {
        stack[($sp - "5")] = (stack[($sp - "5")] + "1");
        if (stack[($sp - "5")] < stack[($sp - "4")]) then jump #38 else jump #aa;
    }

    proc #45 {
        stack[($sp + "2")] = stack[($sp - "3")];
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #a1;
        jump #c65;
    }
}

func func.swap {
    proc #c65 {
        $sp = ($sp + "4");
        stack[$sp] = stack[stack[($sp - "2")]];
        stack[stack[($sp - "2")]] = stack[stack[($sp - "1")]];
        stack[stack[($sp - "1")]] = stack[$sp];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vec_random_populate {
    proc #8d {
        $sp = ($sp + "7");
        if (stack[($sp - "1")] < stack[($sp - "4")]) then jump #920 else jump #08;
    }

    proc #08 {
        $sp = ($sp - "7");
        jump stack[($sp + "1")];
    }

    proc #920 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "4")] = stack[($sp - "2")];
        stack[($sp + "1")] = #72;
        jump #33;
    }

    proc #72 {
        stack[($sp + "2")] = stack[($sp - "5")];
        stack[($sp + "3")] = stack[$sp];
        stack[($sp + "1")] = #50c;
        jump #0e;
    }

    proc #50c {
        stack[($sp - "1")] = (stack[($sp - "1")] + "1");
        if (stack[($sp - "1")] < stack[($sp - "4")]) then jump #920 else jump #08;
    }
}

func func.out {
    proc #48 {
        $sp = ($sp + "2");
        out stack[$sp];
        $sp = ($sp - "2");
        jump stack[($sp + "1")];
    }
}

func func.random_num {
    proc #33 {
        $sp = ($sp + "5");
        stack[$sp] = ("0.0" <random> "1.0");
        stack[stack[($sp - "3")]] = (stack[($sp - "2")] + (stack[$sp] * (stack[($sp - "1")] - stack[($sp - "2")])));
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}