main {
    proc #89 {
        $sp = "-1";
        jump #a1;
    }
}

func main {
    proc #a1 {
        $sp = ($sp + "13");
        stack[($sp - "11")] = "1";
        stack[(($sp - "11") + "1")] = "1";
        stack[(($sp - "11") + "2")] = "2";
        stack[(($sp - "11") + "3")] = "3";
        stack[(($sp - "11") + "4")] = "3";
        stack[(($sp - "11") + "5")] = "4";
        stack[(($sp - "11") + "6")] = "5";
        stack[(($sp - "11") + "7")] = "6";
        stack[(($sp - "11") + "8")] = "6";
        stack[(($sp - "11") + "9")] = "6";
        stack[(($sp - "11") + "10")] = "7";
        stack[($sp + "2")] = "With duplicates:";
        stack[($sp + "1")] = #a5;
        jump #0c;
    }

    proc #a5 {
        stack[($sp + "2")] = ($sp - "11");
        stack[($sp + "3")] = "11";
        stack[($sp + "1")] = #ac;
        jump #88;
    }

    proc #ac {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = ($sp - "11");
        stack[($sp + "1")] = #4c;
        jump #a6;
    }

    proc #4c {
        stack[($sp + "2")] = "Without duplicates:";
        stack[($sp + "1")] = #3f;
        jump #0c;
    }

    proc #3f {
        stack[($sp + "2")] = ($sp - "11");
        stack[($sp + "3")] = stack[$sp];
        stack[($sp + "1")] = #c3;
        jump #88;
    }

    proc #c3 {
        exit;
    }
}

func func.delete_duplicates {
    proc #a6 {
        $sp = ($sp + "6");
        stack[($sp - "1")] = "0";
        stack[$sp] = "11";
        stack[($sp - "2")] = "0";
        if (stack[($sp - "1")] < stack[$sp]) then jump #42 else jump #bb;
    }

    proc #bb {
        stack[stack[($sp - "4")]] = stack[$sp];
        $sp = ($sp - "6");
        jump stack[($sp + "1")];
    }

    proc #42 {
        if ((stack[($sp - "1")] > "0") && (stack[(stack[($sp - "3")] + stack[($sp - "1")])] == stack[($sp - "2")])) then jump #47 else jump #12;
    }

    proc #50 {
        stack[($sp - "1")] = (stack[($sp - "1")] + "1");
        if (stack[($sp - "1")] < stack[$sp]) then jump #42 else jump #bb;
    }

    proc #47 {
        stack[($sp + "2")] = stack[($sp - "3")];
        stack[($sp + "3")] = stack[($sp - "1")];
        stack[($sp + "1")] = #0b;
        jump #94;
    }

    proc #0b {
        stack[($sp - "1")] = (stack[($sp - "1")] - "1");
        stack[$sp] = (stack[$sp] - "1");
        jump #50;
    }

    proc #12 {
        stack[($sp - "2")] = stack[(stack[($sp - "3")] + stack[($sp - "1")])];
        jump #50;
    }
}

func func.delete_index {
    proc #94 {
        $sp = ($sp + "4");
        stack[$sp] = "0";
        if (stack[$sp] < "11") then jump #b0 else jump #9c;
    }

    proc #9c {
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }

    proc #b0 {
        if (stack[$sp] > stack[($sp - "1")]) then jump #c9 else jump #d9;
    }

    proc #d9 {
        stack[$sp] = (stack[$sp] + "1");
        if (stack[$sp] < "11") then jump #b0 else jump #9c;
    }

    proc #c9 {
        stack[(stack[($sp - "2")] + (stack[$sp] - "1"))] = stack[(stack[($sp - "2")] + stack[$sp])];
        jump #d9;
    }
}

func func.print_arr {
    proc #88 {
        $sp = ($sp + "5");
        stack[$sp] = "[";
        stack[($sp - "1")] = "0";
        if (stack[($sp - "1")] < stack[($sp - "2")]) then jump #66 else jump #97;
    }

    proc #97 {
        stack[$sp] = (stack[$sp] ~ "]");
        stack[($sp + "2")] = stack[$sp];
        stack[($sp + "1")] = #db;
        jump #0c;
    }

    proc #db {
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }

    proc #66 {
        stack[$sp] = (stack[$sp] ~ stack[(stack[($sp - "3")] + stack[($sp - "1")])]);
        if (!(stack[($sp - "1")] == (stack[($sp - "2")] - "1"))) then jump #f7 else jump #54;
    }

    proc #54 {
        stack[($sp - "1")] = (stack[($sp - "1")] + "1");
        if (stack[($sp - "1")] < stack[($sp - "2")]) then jump #66 else jump #97;
    }

    proc #f7 {
        stack[$sp] = (stack[$sp] ~ ", ");
        jump #54;
    }
}

func func.out {
    proc #0c {
        $sp = ($sp + "2");
        out stack[$sp];
        $sp = ($sp - "2");
        jump stack[($sp + "1")];
    }
}