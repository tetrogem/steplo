main {
    proc #12 {
        $sp = "-1";
        jump #89;
    }
}

func main {
    proc #89 {
        $sp = ($sp + "25");
        stack[($sp - "23")] = "-3";
        stack[(($sp - "23") + "1")] = "-2";
        stack[(($sp - "23") + "2")] = "0";
        stack[(($sp - "23") + "3")] = "0";
        stack[(($sp - "23") + "4")] = "0";
        stack[(($sp - "23") + "5")] = "6";
        stack[(($sp - "23") + "6")] = "7";
        stack[(($sp - "23") + "7")] = "0";
        stack[(($sp - "23") + "8")] = "0";
        stack[(($sp - "23") + "9")] = "0";
        stack[(($sp - "23") + "10")] = "0";
        stack[(($sp - "23") + "11")] = "0";
        stack[(($sp - "23") + "12")] = "0";
        stack[($sp - "8")] = "-1";
        stack[(($sp - "8") + "1")] = "1";
        stack[(($sp - "8") + "2")] = "1";
        stack[(($sp - "8") + "3")] = "1";
        stack[(($sp - "8") + "4")] = "2";
        stack[(($sp - "8") + "5")] = "3";
        stack[($sp + "2")] = ($sp - "10");
        stack[($sp + "3")] = ($sp - "23");
        stack[($sp + "4")] = "13";
        stack[($sp + "1")] = #70;
        jump #ec;
    }

    proc #70 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = ($sp - "8");
        stack[($sp + "4")] = "6";
        stack[($sp + "1")] = #34;
        jump #ec;
    }

    proc #34 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = ($sp - "10");
        stack[($sp + "1")] = #c3;
        jump #a0;
    }

    proc #c3 {
        stack[($sp + "2")] = stack[$sp];
        stack[($sp + "1")] = #c9;
        jump #ae;
    }

    proc #c9 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = ($sp - "2");
        stack[($sp + "1")] = #1d;
        jump #a0;
    }

    proc #1d {
        stack[($sp + "2")] = stack[$sp];
        stack[($sp + "1")] = #85;
        jump #ae;
    }

    proc #85 {
        stack[($sp + "2")] = ($sp - "10");
        stack[($sp + "3")] = "7";
        stack[($sp + "4")] = ($sp - "2");
        stack[($sp + "5")] = "6";
        stack[($sp + "1")] = #ac;
        jump #c6;
    }

    proc #ac {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = ($sp - "10");
        stack[($sp + "1")] = #27;
        jump #a0;
    }

    proc #27 {
        stack[($sp + "2")] = ("Merged: " ~ stack[$sp]);
        stack[($sp + "1")] = #86;
        jump #ae;
    }

    proc #86 {
        exit;
    }
}

func func.Vector_new {
    proc #ec {
        $sp = ($sp + "4");
        stack[stack[($sp - "2")]] = stack[($sp - "1")];
        stack[(stack[($sp - "2")] + "1")] = stack[$sp];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Vector_vals_r {
    proc #3e {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[stack[$sp]];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vector_len {
    proc #0c {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[(stack[$sp] + "1")];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Vector_to_string {
    proc #a0 {
        $sp = ($sp + "8");
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #5c;
        jump #3e;
    }

    proc #5c {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "5")];
        stack[($sp + "1")] = #fa;
        jump #0c;
    }

    proc #fa {
        stack[($sp - "4")] = "[";
        stack[($sp - "3")] = "0";
        if (stack[($sp - "3")] < stack[($sp - "1")]) then jump #55 else jump #1f;
    }

    proc #1f {
        stack[($sp - "4")] = (stack[($sp - "4")] ~ "]");
        stack[stack[($sp - "6")]] = stack[($sp - "4")];
        $sp = ($sp - "8");
        jump stack[($sp + "1")];
    }

    proc #55 {
        stack[$sp] = stack[(stack[($sp - "2")] + stack[($sp - "3")])];
        stack[($sp - "4")] = (stack[($sp - "4")] ~ stack[$sp]);
        if ((stack[($sp - "3")] + "1") < stack[($sp - "1")]) then jump #5b else jump #f8;
    }

    proc #f8 {
        stack[($sp - "3")] = (stack[($sp - "3")] + "1");
        if (stack[($sp - "3")] < stack[($sp - "1")]) then jump #55 else jump #1f;
    }

    proc #5b {
        stack[($sp - "4")] = (stack[($sp - "4")] ~ ", ");
        jump #f8;
    }
}

func func.merge_sorted_vecs {
    proc #c6 {
        $sp = ($sp + "10");
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = stack[($sp - "8")];
        stack[($sp + "1")] = #b4;
        jump #3e;
    }

    proc #b4 {
        stack[($sp + "2")] = ($sp - "2");
        stack[($sp + "3")] = stack[($sp - "6")];
        stack[($sp + "1")] = #18;
        jump #3e;
    }

    proc #18 {
        stack[($sp - "4")] = ((stack[($sp - "7")] + stack[($sp - "5")]) - "1");
        if (!(stack[($sp - "4")] < "0")) then jump #f4 else jump #66;
    }

    proc #66 {
        $sp = ($sp - "10");
        jump stack[($sp + "1")];
    }

    proc #f4 {
        stack[($sp - "1")] = stack[(stack[($sp - "3")] + (stack[($sp - "7")] - "1"))];
        stack[$sp] = stack[(stack[($sp - "2")] + (stack[($sp - "5")] - "1"))];
        if ((!(stack[($sp - "5")] > "0")) || (!(stack[($sp - "1")] < stack[$sp]))) then jump #2b else jump #cb;
    }

    proc #49 {
        stack[($sp - "4")] = (stack[($sp - "4")] - "1");
        if (!(stack[($sp - "4")] < "0")) then jump #f4 else jump #66;
    }

    proc #2b {
        stack[(stack[($sp - "3")] + stack[($sp - "4")])] = stack[($sp - "1")];
        stack[($sp - "7")] = (stack[($sp - "7")] - "1");
        jump #49;
    }

    proc #cb {
        stack[(stack[($sp - "3")] + stack[($sp - "4")])] = stack[$sp];
        stack[($sp - "5")] = (stack[($sp - "5")] - "1");
        jump #49;
    }
}

func func.out {
    proc #ae {
        $sp = ($sp + "2");
        out stack[$sp];
        $sp = ($sp - "2");
        jump stack[($sp + "1")];
    }
}