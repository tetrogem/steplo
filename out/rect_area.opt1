main {
    proc #95 {
        $sp = "-1";
        jump #ef;
    }
}

func main {
    proc #ef {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = "4";
        stack[($sp + "4")] = "4";
        stack[($sp + "1")] = #47;
        jump #85;
    }

    proc #47 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = "5";
        stack[($sp + "4")] = "8";
        stack[($sp + "1")] = #5a;
        jump #85;
    }

    proc #5a {
        stack[($sp + "2")] = ($sp - "3");
        stack[($sp + "3")] = "Rect 1";
        stack[($sp + "1")] = #62;
        jump #1e;
    }

    proc #62 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = "Rect 2";
        stack[($sp + "1")] = #c7;
        jump #1e;
    }

    proc #c7 {
        stack[($sp + "2")] = "Done!";
        stack[($sp + "1")] = #b4;
        jump #81;
    }

    proc #b4 {
        exit;
    }
}

func func.Rect_new {
    proc #85 {
        $sp = ($sp + "4");
        stack[stack[($sp - "2")]] = stack[($sp - "1")];
        stack[(stack[($sp - "2")] + "1")] = stack[$sp];
        $sp = ($sp - "4");
        jump stack[($sp + "1")];
    }
}

func func.Rect_width {
    proc #ed {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[stack[$sp]];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Rect_height {
    proc #f2 {
        $sp = ($sp + "3");
        stack[stack[($sp - "1")]] = stack[(stack[$sp] + "1")];
        $sp = ($sp - "3");
        jump stack[($sp + "1")];
    }
}

func func.Rect_area {
    proc #953 {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #06;
        jump #ed;
    }

    proc #06 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #af;
        jump #f2;
    }

    proc #af {
        stack[stack[($sp - "3")]] = (stack[($sp - "1")] * stack[$sp]);
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.Rect_perimeter {
    proc #9530 {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #2a;
        jump #ed;
    }

    proc #2a {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "2")];
        stack[($sp + "1")] = #a2;
        jump #f2;
    }

    proc #a2 {
        stack[($sp - "1")] = (stack[($sp - "1")] * "2");
        stack[$sp] = (stack[$sp] * "2");
        stack[stack[($sp - "3")]] = (stack[($sp - "1")] + stack[$sp]);
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.Rect_print_info {
    proc #1e {
        $sp = ($sp + "5");
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #97;
        jump #ed;
    }

    proc #97 {
        stack[($sp + "2")] = $sp;
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #20;
        jump #f2;
    }

    proc #20 {
        stack[($sp + "2")] = ((((stack[($sp - "2")] ~ " dimensions: ") ~ stack[($sp - "1")]) ~ " x ") ~ stack[$sp]);
        stack[($sp + "1")] = #bf;
        jump #81;
    }

    proc #bf {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #0c;
        jump #9530;
    }

    proc #0c {
        stack[($sp + "2")] = ((stack[($sp - "2")] ~ " perimeter: ") ~ stack[($sp - "1")]);
        stack[($sp + "1")] = #66;
        jump #81;
    }

    proc #66 {
        stack[($sp + "2")] = ($sp - "1");
        stack[($sp + "3")] = stack[($sp - "3")];
        stack[($sp + "1")] = #dd;
        jump #953;
    }

    proc #dd {
        stack[($sp + "2")] = ((stack[($sp - "2")] ~ " area: ") ~ stack[($sp - "1")]);
        stack[($sp + "1")] = #98;
        jump #81;
    }

    proc #98 {
        $sp = ($sp - "5");
        jump stack[($sp + "1")];
    }
}

func func.out {
    proc #81 {
        $sp = ($sp + "2");
        out stack[$sp];
        $sp = ($sp - "2");
        jump stack[($sp + "1")];
    }
}